/*$file${HSMs::../src::alarm.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*
* Model: ClockAlarm.qm
* File:  ${HSMs::../src::alarm.cpp}
*
* This code has been generated by QM 5.2.2 <www.state-machine.com/qm>.
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* SPDX-License-Identifier: GPL-3.0-or-later
*
* This generated code is open source software: you can redistribute it under
* the terms of the GNU General Public License as published by the Free
* Software Foundation.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
* more details.
*
* NOTE:
* Alternatively, this generated code may be distributed under the terms
* of Quantum Leaps commercial licenses, which expressly supersede the GNU
* General Public License and are specifically designed for licensees
* interested in retaining the proprietary status of their code.
*
* Contact information:
* <www.state-machine.com/licensing>
* <info@state-machine.com>
*/
/*$endhead${HSMs::../src::alarm.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
#include <Arduino.h>
#include "qpn.h"
#include "alarm.h"
#include "ClockAlarm_SM.h"


Q_DEFINE_THIS_FILE;


/*$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/* Check for the minimum required QP version */
#if (QP_VERSION < 690U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpn version 6.9.0 or higher required
#endif
/*$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/

/*$define${HSMs::Alarm} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${HSMs::Alarm} ...........................................................*/

/*${HSMs::Alarm::init} .....................................................*/
void Alarm_init(Alarm * const me) {
    QHSM_INIT(&me->super);
}

/*${HSMs::Alarm::Dispatch} .................................................*/
void Alarm_Dispatch(Alarm * const me) {
    QHSM_DISPATCH(&me->super);
}

/*${HSMs::Alarm::set_alarm_time} ...........................................*/
void Alarm_set_alarm_time(Alarm * const me,
    uint32_t alarm_time)
{
    me->alarm_time = alarm_time; //When the user change the time , updated here.
}

/*${HSMs::Alarm::set_status} ...............................................*/
void Alarm_set_status(Alarm * const me,
    uint8_t status)
{
    me->alarm_status = status;
}

/*${HSMs::Alarm::get_alarm_time} ...........................................*/
uint32_t Alarm_get_alarm_time(Alarm * const me) {
    return me->alarm_time;
}

/*${HSMs::Alarm::SM} .......................................................*/
QState Alarm_initial(Alarm * const me) {
    /*${HSMs::Alarm::SM::initial} */
    me->alarm_time = INITIAL_ALARM_TIME;
    me->alarm_status = ALARM_OFF;
    return Q_TRAN(&Alarm_ALARM);
}

/*${HSMs::Alarm::SM::ALARM} ................................................*/
QState Alarm_ALARM(Alarm * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${HSMs::Alarm::SM::ALARM::ALARM_CHECK} */
        case ALARM_CHECK_SIG: {
            if(Q_PAR(me) == me->alarm_time)
                QACTIVE_POST(AO_ClockAlarm,ALARM_SIG,0U);
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*$enddef${HSMs::Alarm} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$define${HSMs::Alarm_ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${HSMs::Alarm_ctor} ......................................................*/
void Alarm_ctor(Alarm *const me) {
    QHsm_ctor(&me->super, Q_STATE_CAST(&Alarm_initial));
}
/*$enddef${HSMs::Alarm_ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
