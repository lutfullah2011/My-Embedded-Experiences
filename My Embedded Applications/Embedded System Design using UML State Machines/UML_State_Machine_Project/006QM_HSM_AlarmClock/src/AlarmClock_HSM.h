/*$file${HSMs::../src::AlarmClock_HSM.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*
* Model: AlarmClock.qm
* File:  ${HSMs::../src::AlarmClock_HSM.h}
*
* This code has been generated by QM 5.2.2 <www.state-machine.com/qm>.
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* SPDX-License-Identifier: GPL-3.0-or-later
*
* This generated code is open source software: you can redistribute it under
* the terms of the GNU General Public License as published by the Free
* Software Foundation.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
* more details.
*
* NOTE:
* Alternatively, this generated code may be distributed under the terms
* of Quantum Leaps commercial licenses, which expressly supersede the GNU
* General Public License and are specifically designed for licensees
* interested in retaining the proprietary status of their code.
*
* Contact information:
* <www.state-machine.com/licensing>
* <info@state-machine.com>
*/
/*$endhead${HSMs::../src::AlarmClock_HSM.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
#ifndef ALARM_CLOCK_H
#define ALARM_CLOCK_H


enum AlarmClock_Signals{
    SET_SIG = Q_USER_SIG,
    OK_SIG,
    CANCEL_SIG,
    ALARM_SIG,
    TICK_SIG,
    IGNORE_SIG,
    MAX_SIG
};


enum time_mode{
    MODE_24H,
    MODE_12H
};

enum alarm_status{
    ALARM_OFF,
    ALARM_ON
};

typedef enum time_format{
    FORMAT_24H,
    FORMAT_AM,
    FORMAT_PM
}time_format_t;

//Helper MACROs to get time in different formats, hh/mm/ss format
#define GET_HOUR(seconds)     (seconds/3600UL)
#define GET_MIN(seconds)      ((seconds/60UL)%60UL)
#define GET_SEC(seconds)      (seconds % 60UL)
#define DIGIT1(d)             (d/10U)
#define DIGIT2(d)             (d%10U)


#define MAX_TIME (864000UL) //24*3600*10 = Every 100ms
#define INITIAL_CURR_TIME  ((9UL * 3600UL + 5UL * 60UL) * 10UL) // 09:05:00 (Represented 24H format)
#define INITIAL_ALARM_TIME  (7UL * 3600UL) // 07:00:00  (Represented 24H format)


//These MACROS show the row and column places in LCD with the names below indicated STATEs firstly.
#define TICKING_CURR_TIME_ROW  0
#define TICKING_CURR_TIME_COL  3
#define CLOCK_SETTING_TIME_ROW 0
#define CLOCK_SETTING_TIME_COL 2
#define CLOCK_SETTING_TIME_HOUR_D1_COL 2
#define CLOCK_SETTING_TIME_HOUR_D2_COL 3
#define CLOCK_SETTING_TIME_MIN_D1_COL 5
#define CLOCK_SETTING_TIME_MIN_D2_COL 6
#define CLOCK_SETTING_TIME_SEC_D1_COL 8
#define CLOCK_SETTING_TIME_SEC_D2_COL 9
#define CLOCK_SETTING_TIME_FMT_COL     11
#define CLOCK_SETTING_ERR_MSG_ROW 1 //Where the "Error!" written
#define CLOCK_SETTING_ERR_MSG_COL  4
#define CLOCK_SETTING_ERR_MSG_COL_END 9

#define ALARM_SETTING_CURR_TIME_ROW 1
#define ALARM_SETTING_CURR_TIME_COL  2
#define ALARM_SETTING_STATUS_ROW 0
#define ALARM_SETTING_STATUS_COL  4
#define ALARM_REMINDER_MSG_ROW 0
#define ALARM_REMINDER_MSG_COL 4

#define CS_ROW 0
#define CS_HOUR_D1_COL  2

/*$declare${HSMs::Alarm_Clock_ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${HSMs::Alarm_Clock_ctor} ................................................*/
void Alarm_Clock_ctor(void);
/*$enddecl${HSMs::Alarm_Clock_ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$declare${HSMs::super_AlarmClock} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/*${HSMs::super_AlarmClock} ................................................*/
extern QHsm *const super_AlarmClock;
/*$enddecl${HSMs::super_AlarmClock} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/



#endif
