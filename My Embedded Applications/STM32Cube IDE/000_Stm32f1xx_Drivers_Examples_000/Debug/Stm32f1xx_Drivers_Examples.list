
Stm32f1xx_Drivers_Examples.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d28  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000e58  08000e58  00010e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e74  08000e74  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000e74  08000e74  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e74  08000e74  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e74  08000e74  00010e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e78  08000e78  00010e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000e7c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000e80  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000e80  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000010ee  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004a1  00000000  00000000  0002111b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000178  00000000  00000000  000215c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000140  00000000  00000000  00021738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000012ac  00000000  00000000  00021878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000006fe  00000000  00000000  00022b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00023222  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000054c  00000000  00000000  00023274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e40 	.word	0x08000e40

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000e40 	.word	0x08000e40

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <GPIO_PCLK>:
#include "stm32f100xx_gpio.h"


/*Peripheral Clock Setup(Enable or Disable)*/
void GPIO_PCLK(GPIO_RegDef_t *pGPIOx, uint8_t EnorDis)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
 8000188:	460b      	mov	r3, r1
 800018a:	70fb      	strb	r3, [r7, #3]
	  if (EnorDis != DISABLE)
 800018c:	78fb      	ldrb	r3, [r7, #3]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d036      	beq.n	8000200 <GPIO_PCLK+0x80>
	  {
	      if(pGPIOx == GPIOA)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4a38      	ldr	r2, [pc, #224]	; (8000278 <GPIO_PCLK+0xf8>)
 8000196:	4293      	cmp	r3, r2
 8000198:	d106      	bne.n	80001a8 <GPIO_PCLK+0x28>
	      {
	    	  GPIOA_PCLK_EN();
 800019a:	4b38      	ldr	r3, [pc, #224]	; (800027c <GPIO_PCLK+0xfc>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	4a37      	ldr	r2, [pc, #220]	; (800027c <GPIO_PCLK+0xfc>)
 80001a0:	f043 0304 	orr.w	r3, r3, #4
 80001a4:	6193      	str	r3, [r2, #24]
	      }else if(pGPIOx == GPIOE)
	      {
	    	  GPIOE_PCLK_DIS();
	      }
	  }
}
 80001a6:	e061      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOB)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	4a35      	ldr	r2, [pc, #212]	; (8000280 <GPIO_PCLK+0x100>)
 80001ac:	4293      	cmp	r3, r2
 80001ae:	d106      	bne.n	80001be <GPIO_PCLK+0x3e>
	    	  GPIOB_PCLK_EN();
 80001b0:	4b32      	ldr	r3, [pc, #200]	; (800027c <GPIO_PCLK+0xfc>)
 80001b2:	699b      	ldr	r3, [r3, #24]
 80001b4:	4a31      	ldr	r2, [pc, #196]	; (800027c <GPIO_PCLK+0xfc>)
 80001b6:	f043 0308 	orr.w	r3, r3, #8
 80001ba:	6193      	str	r3, [r2, #24]
}
 80001bc:	e056      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOC)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	4a30      	ldr	r2, [pc, #192]	; (8000284 <GPIO_PCLK+0x104>)
 80001c2:	4293      	cmp	r3, r2
 80001c4:	d106      	bne.n	80001d4 <GPIO_PCLK+0x54>
	    	  GPIOC_PCLK_EN();
 80001c6:	4b2d      	ldr	r3, [pc, #180]	; (800027c <GPIO_PCLK+0xfc>)
 80001c8:	699b      	ldr	r3, [r3, #24]
 80001ca:	4a2c      	ldr	r2, [pc, #176]	; (800027c <GPIO_PCLK+0xfc>)
 80001cc:	f043 0310 	orr.w	r3, r3, #16
 80001d0:	6193      	str	r3, [r2, #24]
}
 80001d2:	e04b      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOD)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	4a2c      	ldr	r2, [pc, #176]	; (8000288 <GPIO_PCLK+0x108>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d106      	bne.n	80001ea <GPIO_PCLK+0x6a>
	    	  GPIOD_PCLK_EN();
 80001dc:	4b27      	ldr	r3, [pc, #156]	; (800027c <GPIO_PCLK+0xfc>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	4a26      	ldr	r2, [pc, #152]	; (800027c <GPIO_PCLK+0xfc>)
 80001e2:	f043 0320 	orr.w	r3, r3, #32
 80001e6:	6193      	str	r3, [r2, #24]
}
 80001e8:	e040      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOE)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a27      	ldr	r2, [pc, #156]	; (800028c <GPIO_PCLK+0x10c>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d13c      	bne.n	800026c <GPIO_PCLK+0xec>
	    	  GPIOE_PCLK_EN();
 80001f2:	4b22      	ldr	r3, [pc, #136]	; (800027c <GPIO_PCLK+0xfc>)
 80001f4:	699b      	ldr	r3, [r3, #24]
 80001f6:	4a21      	ldr	r2, [pc, #132]	; (800027c <GPIO_PCLK+0xfc>)
 80001f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001fc:	6193      	str	r3, [r2, #24]
}
 80001fe:	e035      	b.n	800026c <GPIO_PCLK+0xec>
	      if(pGPIOx == GPIOA)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4a1d      	ldr	r2, [pc, #116]	; (8000278 <GPIO_PCLK+0xf8>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d106      	bne.n	8000216 <GPIO_PCLK+0x96>
	    	  GPIOA_PCLK_DIS();
 8000208:	4b1c      	ldr	r3, [pc, #112]	; (800027c <GPIO_PCLK+0xfc>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a1b      	ldr	r2, [pc, #108]	; (800027c <GPIO_PCLK+0xfc>)
 800020e:	f023 0304 	bic.w	r3, r3, #4
 8000212:	6193      	str	r3, [r2, #24]
}
 8000214:	e02a      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOB)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a19      	ldr	r2, [pc, #100]	; (8000280 <GPIO_PCLK+0x100>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIO_PCLK+0xac>
	    	  GPIOB_PCLK_DIS();
 800021e:	4b17      	ldr	r3, [pc, #92]	; (800027c <GPIO_PCLK+0xfc>)
 8000220:	699b      	ldr	r3, [r3, #24]
 8000222:	4a16      	ldr	r2, [pc, #88]	; (800027c <GPIO_PCLK+0xfc>)
 8000224:	f023 0308 	bic.w	r3, r3, #8
 8000228:	6193      	str	r3, [r2, #24]
}
 800022a:	e01f      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOC)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a15      	ldr	r2, [pc, #84]	; (8000284 <GPIO_PCLK+0x104>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <GPIO_PCLK+0xc2>
	    	  GPIOC_PCLK_DIS();
 8000234:	4b11      	ldr	r3, [pc, #68]	; (800027c <GPIO_PCLK+0xfc>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	4a10      	ldr	r2, [pc, #64]	; (800027c <GPIO_PCLK+0xfc>)
 800023a:	f023 0310 	bic.w	r3, r3, #16
 800023e:	6193      	str	r3, [r2, #24]
}
 8000240:	e014      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOD)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a10      	ldr	r2, [pc, #64]	; (8000288 <GPIO_PCLK+0x108>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <GPIO_PCLK+0xd8>
	    	  GPIOD_PCLK_DIS();
 800024a:	4b0c      	ldr	r3, [pc, #48]	; (800027c <GPIO_PCLK+0xfc>)
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	4a0b      	ldr	r2, [pc, #44]	; (800027c <GPIO_PCLK+0xfc>)
 8000250:	f023 0320 	bic.w	r3, r3, #32
 8000254:	6193      	str	r3, [r2, #24]
}
 8000256:	e009      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOE)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a0c      	ldr	r2, [pc, #48]	; (800028c <GPIO_PCLK+0x10c>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d105      	bne.n	800026c <GPIO_PCLK+0xec>
	    	  GPIOE_PCLK_DIS();
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <GPIO_PCLK+0xfc>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a05      	ldr	r2, [pc, #20]	; (800027c <GPIO_PCLK+0xfc>)
 8000266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800026a:	6193      	str	r3, [r2, #24]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40010800 	.word	0x40010800
 800027c:	40021000 	.word	0x40021000
 8000280:	40010c00 	.word	0x40010c00
 8000284:	40011000 	.word	0x40011000
 8000288:	40011400 	.word	0x40011400
 800028c:	40011800 	.word	0x40011800

08000290 <GPIO_Init>:

/*
 * Initializes the GPIOx with the pGPIOHandle.
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

	//Enable the Clock first .  //I configured this setting inside the Init function because user could forget to enable the clock:)
	GPIO_PCLK(pGPIOHandle->pGPIOx, ENABLE);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2101      	movs	r1, #1
 800029e:	4618      	mov	r0, r3
 80002a0:	f7ff ff6e 	bl	8000180 <GPIO_PCLK>

	//currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);

	/**************************************************************************************************************/
	//INTERRUPT MODE CONFIG // CHECK FIRST BELOW CONDITION FOR INTERRUPT MODES
	if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode > GPIO_MODE_AF_OD)// It means that if one of the mode is in interrupt modes or not.
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	2b1c      	cmp	r3, #28
 80002aa:	f240 809c 	bls.w	80003e6 <GPIO_Init+0x156>
	{
		/*1. Configure the triggering selection*/
		if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_IT_RT) {
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	2b24      	cmp	r3, #36	; 0x24
 80002b4:	d117      	bne.n	80002e6 <GPIO_Init+0x56>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Set the RTRS reg
 80002b6:	4b99      	ldr	r3, [pc, #612]	; (800051c <GPIO_Init+0x28c>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	6852      	ldr	r2, [r2, #4]
 80002be:	2101      	movs	r1, #1
 80002c0:	fa01 f202 	lsl.w	r2, r1, r2
 80002c4:	4611      	mov	r1, r2
 80002c6:	4a95      	ldr	r2, [pc, #596]	; (800051c <GPIO_Init+0x28c>)
 80002c8:	430b      	orrs	r3, r1
 80002ca:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clear the FTRS reg
 80002cc:	4b93      	ldr	r3, [pc, #588]	; (800051c <GPIO_Init+0x28c>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	6852      	ldr	r2, [r2, #4]
 80002d4:	2101      	movs	r1, #1
 80002d6:	fa01 f202 	lsl.w	r2, r1, r2
 80002da:	43d2      	mvns	r2, r2
 80002dc:	4611      	mov	r1, r2
 80002de:	4a8f      	ldr	r2, [pc, #572]	; (800051c <GPIO_Init+0x28c>)
 80002e0:	400b      	ands	r3, r1
 80002e2:	60d3      	str	r3, [r2, #12]
 80002e4:	e035      	b.n	8000352 <GPIO_Init+0xc2>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_IT_FT) {
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	2b44      	cmp	r3, #68	; 0x44
 80002ec:	d117      	bne.n	800031e <GPIO_Init+0x8e>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Set the FTRS reg
 80002ee:	4b8b      	ldr	r3, [pc, #556]	; (800051c <GPIO_Init+0x28c>)
 80002f0:	68db      	ldr	r3, [r3, #12]
 80002f2:	687a      	ldr	r2, [r7, #4]
 80002f4:	6852      	ldr	r2, [r2, #4]
 80002f6:	2101      	movs	r1, #1
 80002f8:	fa01 f202 	lsl.w	r2, r1, r2
 80002fc:	4611      	mov	r1, r2
 80002fe:	4a87      	ldr	r2, [pc, #540]	; (800051c <GPIO_Init+0x28c>)
 8000300:	430b      	orrs	r3, r1
 8000302:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clear the RTRS reg
 8000304:	4b85      	ldr	r3, [pc, #532]	; (800051c <GPIO_Init+0x28c>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	6852      	ldr	r2, [r2, #4]
 800030c:	2101      	movs	r1, #1
 800030e:	fa01 f202 	lsl.w	r2, r1, r2
 8000312:	43d2      	mvns	r2, r2
 8000314:	4611      	mov	r1, r2
 8000316:	4a81      	ldr	r2, [pc, #516]	; (800051c <GPIO_Init+0x28c>)
 8000318:	400b      	ands	r3, r1
 800031a:	6093      	str	r3, [r2, #8]
 800031c:	e019      	b.n	8000352 <GPIO_Init+0xc2>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_IT_RFT) {
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	2b84      	cmp	r3, #132	; 0x84
 8000324:	d115      	bne.n	8000352 <GPIO_Init+0xc2>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Set the RTRS reg
 8000326:	4b7d      	ldr	r3, [pc, #500]	; (800051c <GPIO_Init+0x28c>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	6852      	ldr	r2, [r2, #4]
 800032e:	2101      	movs	r1, #1
 8000330:	fa01 f202 	lsl.w	r2, r1, r2
 8000334:	4611      	mov	r1, r2
 8000336:	4a79      	ldr	r2, [pc, #484]	; (800051c <GPIO_Init+0x28c>)
 8000338:	430b      	orrs	r3, r1
 800033a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Set the FTRS reg
 800033c:	4b77      	ldr	r3, [pc, #476]	; (800051c <GPIO_Init+0x28c>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	6852      	ldr	r2, [r2, #4]
 8000344:	2101      	movs	r1, #1
 8000346:	fa01 f202 	lsl.w	r2, r1, r2
 800034a:	4611      	mov	r1, r2
 800034c:	4a73      	ldr	r2, [pc, #460]	; (800051c <GPIO_Init+0x28c>)
 800034e:	430b      	orrs	r3, r1
 8000350:	60d3      	str	r3, [r2, #12]

		}

		/*2. Configuration of the GPIO Port Selection in AFIO->EXTICR*/
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_Pin / 4; //Created for deciding which EXTICR register
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	089b      	lsrs	r3, r3, #2
 8000358:	73fb      	strb	r3, [r7, #15]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_Pin % 4; //Created for deciding which pins(4 pin) inside the selected EXTICR register
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	b2db      	uxtb	r3, r3
 8000360:	f003 0303 	and.w	r3, r3, #3
 8000364:	73bb      	strb	r3, [r7, #14]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a6d      	ldr	r2, [pc, #436]	; (8000520 <GPIO_Init+0x290>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d01d      	beq.n	80003ac <GPIO_Init+0x11c>
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a6b      	ldr	r2, [pc, #428]	; (8000524 <GPIO_Init+0x294>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d016      	beq.n	80003a8 <GPIO_Init+0x118>
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a6a      	ldr	r2, [pc, #424]	; (8000528 <GPIO_Init+0x298>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d00f      	beq.n	80003a4 <GPIO_Init+0x114>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a68      	ldr	r2, [pc, #416]	; (800052c <GPIO_Init+0x29c>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d008      	beq.n	80003a0 <GPIO_Init+0x110>
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4a67      	ldr	r2, [pc, #412]	; (8000530 <GPIO_Init+0x2a0>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d101      	bne.n	800039c <GPIO_Init+0x10c>
 8000398:	2304      	movs	r3, #4
 800039a:	e008      	b.n	80003ae <GPIO_Init+0x11e>
 800039c:	2300      	movs	r3, #0
 800039e:	e006      	b.n	80003ae <GPIO_Init+0x11e>
 80003a0:	2303      	movs	r3, #3
 80003a2:	e004      	b.n	80003ae <GPIO_Init+0x11e>
 80003a4:	2302      	movs	r3, #2
 80003a6:	e002      	b.n	80003ae <GPIO_Init+0x11e>
 80003a8:	2301      	movs	r3, #1
 80003aa:	e000      	b.n	80003ae <GPIO_Init+0x11e>
 80003ac:	2300      	movs	r3, #0
 80003ae:	737b      	strb	r3, [r7, #13]
		AFIO_PCLK_EN(); //Clock enabled first.
 80003b0:	4b60      	ldr	r3, [pc, #384]	; (8000534 <GPIO_Init+0x2a4>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a5f      	ldr	r2, [pc, #380]	; (8000534 <GPIO_Init+0x2a4>)
 80003b6:	f043 0301 	orr.w	r3, r3, #1
 80003ba:	6193      	str	r3, [r2, #24]
		AFIO->EXTICR[temp1] = portcode << (temp2 * 4);
 80003bc:	7b7a      	ldrb	r2, [r7, #13]
 80003be:	7bbb      	ldrb	r3, [r7, #14]
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	fa02 f103 	lsl.w	r1, r2, r3
 80003c6:	4a5c      	ldr	r2, [pc, #368]	; (8000538 <GPIO_Init+0x2a8>)
 80003c8:	7bfb      	ldrb	r3, [r7, #15]
 80003ca:	3302      	adds	r3, #2
 80003cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		/*3. Enable the EXTI from interrupt mask register (EXTI->IMR)*/
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin);
 80003d0:	4b52      	ldr	r3, [pc, #328]	; (800051c <GPIO_Init+0x28c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	6852      	ldr	r2, [r2, #4]
 80003d8:	2101      	movs	r1, #1
 80003da:	fa01 f202 	lsl.w	r2, r1, r2
 80003de:	4611      	mov	r1, r2
 80003e0:	4a4e      	ldr	r2, [pc, #312]	; (800051c <GPIO_Init+0x28c>)
 80003e2:	430b      	orrs	r3, r1
 80003e4:	6013      	str	r3, [r2, #0]

	}
	/**************************************************************************************************************/


	uint32_t tempmode=0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	60bb      	str	r3, [r7, #8]

	// 1. Configure the mode, first define whether the mode is output or not.
	if((pGPIOHandle->GPIO_PinConfig.GPIO_Mode) & (0x10))//All output mode's 5th bit is 1 (ex: 0001 0100)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	f003 0310 	and.w	r3, r3, #16
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d006      	beq.n	8000404 <GPIO_Init+0x174>
	{
		pGPIOHandle->GPIO_PinConfig.GPIO_Mode |= pGPIOHandle->GPIO_PinConfig.GPIO_Speed; //Entegrating Output mode with speed
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	689a      	ldr	r2, [r3, #8]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	68db      	ldr	r3, [r3, #12]
 80003fe:	431a      	orrs	r2, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	609a      	str	r2, [r3, #8]
	}

	//2. Configure the mode for CRL
	if(pGPIOHandle->GPIO_PinConfig.GPIO_Pin <=7) //Below the pin number 7 is in CRL register
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	2b07      	cmp	r3, #7
 800040a:	d861      	bhi.n	80004d0 <GPIO_Init+0x240>
	{

	    /* Reset the corresponding ODR bit to configure pull-down activation */
	    if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INPUT_PD)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	2b28      	cmp	r3, #40	; 0x28
 8000412:	d11b      	bne.n	800044c <GPIO_Init+0x1bc>
	    {
	    	pGPIOHandle->pGPIOx->BRR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	695a      	ldr	r2, [r3, #20]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	2101      	movs	r1, #1
 8000420:	fa01 f303 	lsl.w	r3, r1, r3
 8000424:	43db      	mvns	r3, r3
 8000426:	4619      	mov	r1, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	400a      	ands	r2, r1
 800042e:	615a      	str	r2, [r3, #20]
	    	pGPIOHandle->pGPIOx->BRR |= ( 1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	695a      	ldr	r2, [r3, #20]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	2101      	movs	r1, #1
 800043c:	fa01 f303 	lsl.w	r3, r1, r3
 8000440:	4619      	mov	r1, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	430a      	orrs	r2, r1
 8000448:	615a      	str	r2, [r3, #20]
 800044a:	e01e      	b.n	800048a <GPIO_Init+0x1fa>
	    }
	    else
	    {
	      /* Set the corresponding ODR bit to configure pull-up activation */
	      if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INPUT_PU)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	2b48      	cmp	r3, #72	; 0x48
 8000452:	d11a      	bne.n	800048a <GPIO_Init+0x1fa>
	      {
	  		  pGPIOHandle->pGPIOx->BSRR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clearing the corresponding bits.
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	691a      	ldr	r2, [r3, #16]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	2101      	movs	r1, #1
 8000460:	fa01 f303 	lsl.w	r3, r1, r3
 8000464:	43db      	mvns	r3, r3
 8000466:	4619      	mov	r1, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	400a      	ands	r2, r1
 800046e:	611a      	str	r2, [r3, #16]
	    	  pGPIOHandle->pGPIOx->BSRR |= ( 1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	691a      	ldr	r2, [r3, #16]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	2101      	movs	r1, #1
 800047c:	fa01 f303 	lsl.w	r3, r1, r3
 8000480:	4619      	mov	r1, r3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	430a      	orrs	r2, r1
 8000488:	611a      	str	r2, [r3, #16]
	      }
	    }

		tempmode |= (((pGPIOHandle->GPIO_PinConfig.GPIO_Mode) & (0x0F)) <<  (4 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin) ); // Getting the last 4 bits of GPIO_Mode to shift them 4 times left properly
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	f003 020f 	and.w	r2, r3, #15
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	fa02 f303 	lsl.w	r3, r2, r3
 800049c:	68ba      	ldr	r2, [r7, #8]
 800049e:	4313      	orrs	r3, r2
 80004a0:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->CRL &= ~( 0xF << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin) ); // Clearing the corresponding bits first.
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	210f      	movs	r1, #15
 80004b0:	fa01 f303 	lsl.w	r3, r1, r3
 80004b4:	43db      	mvns	r3, r3
 80004b6:	4619      	mov	r1, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	400a      	ands	r2, r1
 80004be:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= tempmode;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	6819      	ldr	r1, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	68ba      	ldr	r2, [r7, #8]
 80004cc:	430a      	orrs	r2, r1
 80004ce:	601a      	str	r2, [r3, #0]
	}


	//3. Configure the mode for CRH
	if(pGPIOHandle->GPIO_PinConfig.GPIO_Pin >7) //Above the pin number 7 is in CRH register
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	2b07      	cmp	r3, #7
 80004d6:	d975      	bls.n	80005c4 <GPIO_Init+0x334>
	{
		tempmode=0;
 80004d8:	2300      	movs	r3, #0
 80004da:	60bb      	str	r3, [r7, #8]

	    /* Reset the corresponding ODR bit to configure pull-down activation(Told in Reference Manual) */
	    if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INPUT_PD)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	2b28      	cmp	r3, #40	; 0x28
 80004e2:	d12b      	bne.n	800053c <GPIO_Init+0x2ac>
	    {
	    	pGPIOHandle->pGPIOx->BRR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clearing the corresponding bits.
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	695a      	ldr	r2, [r3, #20]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	2101      	movs	r1, #1
 80004f0:	fa01 f303 	lsl.w	r3, r1, r3
 80004f4:	43db      	mvns	r3, r3
 80004f6:	4619      	mov	r1, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	400a      	ands	r2, r1
 80004fe:	615a      	str	r2, [r3, #20]
	    	pGPIOHandle->pGPIOx->BRR |= ( 1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	695a      	ldr	r2, [r3, #20]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	2101      	movs	r1, #1
 800050c:	fa01 f303 	lsl.w	r3, r1, r3
 8000510:	4619      	mov	r1, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	430a      	orrs	r2, r1
 8000518:	615a      	str	r2, [r3, #20]
 800051a:	e02e      	b.n	800057a <GPIO_Init+0x2ea>
 800051c:	40010400 	.word	0x40010400
 8000520:	40010800 	.word	0x40010800
 8000524:	40010c00 	.word	0x40010c00
 8000528:	40011000 	.word	0x40011000
 800052c:	40011400 	.word	0x40011400
 8000530:	40011800 	.word	0x40011800
 8000534:	40021000 	.word	0x40021000
 8000538:	40010000 	.word	0x40010000
	    }
	    else
	    {
	      /* Set the corresponding ODR bit to configure pull-up activation(Told in Reference Manual) */
	      if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INPUT_PU)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	2b48      	cmp	r3, #72	; 0x48
 8000542:	d11a      	bne.n	800057a <GPIO_Init+0x2ea>
	      {
	    	  pGPIOHandle->pGPIOx->BSRR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clearing the corresponding bits.
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	691a      	ldr	r2, [r3, #16]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	2101      	movs	r1, #1
 8000550:	fa01 f303 	lsl.w	r3, r1, r3
 8000554:	43db      	mvns	r3, r3
 8000556:	4619      	mov	r1, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	400a      	ands	r2, r1
 800055e:	611a      	str	r2, [r3, #16]
	    	  pGPIOHandle->pGPIOx->BSRR |= ( 1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	691a      	ldr	r2, [r3, #16]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	2101      	movs	r1, #1
 800056c:	fa01 f303 	lsl.w	r3, r1, r3
 8000570:	4619      	mov	r1, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	430a      	orrs	r2, r1
 8000578:	611a      	str	r2, [r3, #16]
	      }
	    }

		tempmode |= (((pGPIOHandle->GPIO_PinConfig.GPIO_Mode) & (0x0F)) <<  (4 * ((pGPIOHandle->GPIO_PinConfig.GPIO_Pin) - 8)) ); // Getting the last 4 bits of GPIO_Mode to shift them 4 times left properly. Between 8-16 pin number
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	f003 020f 	and.w	r2, r3, #15
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	3b08      	subs	r3, #8
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	fa02 f303 	lsl.w	r3, r2, r3
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	4313      	orrs	r3, r2
 8000592:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->CRH &= ~( 0xF << (4 * ((pGPIOHandle->GPIO_PinConfig.GPIO_Pin) - 8)) ); // Clearing the corresponding bits first.
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	685a      	ldr	r2, [r3, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	3b08      	subs	r3, #8
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	210f      	movs	r1, #15
 80005a4:	fa01 f303 	lsl.w	r3, r1, r3
 80005a8:	43db      	mvns	r3, r3
 80005aa:	4619      	mov	r1, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	400a      	ands	r2, r1
 80005b2:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= tempmode ;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	6859      	ldr	r1, [r3, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	430a      	orrs	r2, r1
 80005c2:	605a      	str	r2, [r3, #4]

	}

}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <GPIO_ReadFromInputPin>:
}



uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	70fb      	strb	r3, [r7, #3]
	uint8_t value=0;
 80005d8:	2300      	movs	r3, #0
 80005da:	73fb      	strb	r3, [r7, #15]
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);// Shift the corresponding reg value amount of pin number
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	689a      	ldr	r2, [r3, #8]
 80005e0:	78fb      	ldrb	r3, [r7, #3]
 80005e2:	fa22 f303 	lsr.w	r3, r2, r3
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	f003 0301 	and.w	r3, r3, #1
 80005ec:	73fb      	strb	r3, [r7, #15]
													  //and take the last bit with AND operator(masking)
	return value;
 80005ee:	7bfb      	ldrb	r3, [r7, #15]

}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr

080005fa <GPIO_ToggleOutputPin>:
	pGPIOx->ODR = Value;

}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b083      	sub	sp, #12
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
 8000602:	460b      	mov	r3, r1
 8000604:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1<<PinNumber);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	78fa      	ldrb	r2, [r7, #3]
 800060c:	2101      	movs	r1, #1
 800060e:	fa01 f202 	lsl.w	r2, r1, r2
 8000612:	405a      	eors	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	60da      	str	r2, [r3, #12]

}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
	...

08000624 <SPI_PCLK>:
/*
 * Peripheral Clock Setup
 * I used only SPI1, So it is simple.
 */
void SPI_PCLK(SPI_RegDef_t *pSPIx, uint8_t EnorDis)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	70fb      	strb	r3, [r7, #3]

	  if (EnorDis != DISABLE)
 8000630:	78fb      	ldrb	r3, [r7, #3]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d006      	beq.n	8000644 <SPI_PCLK+0x20>
	  {
		  SPI1_PCLK_EN();
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <SPI_PCLK+0x38>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	4a08      	ldr	r2, [pc, #32]	; (800065c <SPI_PCLK+0x38>)
 800063c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000640:	6193      	str	r3, [r2, #24]
	  }else
	  {
		  SPI1_PCLK_DIS();
	  }
}
 8000642:	e005      	b.n	8000650 <SPI_PCLK+0x2c>
		  SPI1_PCLK_DIS();
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <SPI_PCLK+0x38>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <SPI_PCLK+0x38>)
 800064a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800064e:	6193      	str	r3, [r2, #24]
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000

08000660 <SPI_Init>:

/*
 * Initializes the SPIx with the pSPIHandle.
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

	//Enable the Clock first .  //I configured this setting inside the Init function because user could forget to enable the clock:)
	SPI_PCLK(pSPIHandle->pSPIx, ENABLE);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2101      	movs	r1, #1
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ffd8 	bl	8000624 <SPI_PCLK>


	/**************************	SPI_CR1 Configuration *******************************/
	uint32_t tempreg = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]

	//1. Device mode configuration
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	791b      	ldrb	r3, [r3, #4]
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	461a      	mov	r2, r3
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	4313      	orrs	r3, r2
 8000684:	60fb      	str	r3, [r7, #12]


	//2. Bus configuration(Direction)
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) //Full dublex
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	795b      	ldrb	r3, [r3, #5]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d104      	bne.n	8000698 <SPI_Init+0x38>
	{
		tempreg &= ~(1<<SPI_CR1_BIDIMODE); //Clear BIDIMODE bit in CR1 Reg
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	e014      	b.n	80006c2 <SPI_Init+0x62>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) //Half dublex
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	795b      	ldrb	r3, [r3, #5]
 800069c:	2b02      	cmp	r3, #2
 800069e:	d104      	bne.n	80006aa <SPI_Init+0x4a>
	{
		tempreg |= (1<<SPI_CR1_BIDIMODE); //Set BIDIMODE bit in CR1 Reg
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	e00b      	b.n	80006c2 <SPI_Init+0x62>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_S_RXONLY) //Simplex Receive Only
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	795b      	ldrb	r3, [r3, #5]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d107      	bne.n	80006c2 <SPI_Init+0x62>
	{
		tempreg &= ~(1<<SPI_CR1_BIDIMODE); //Clear BIDIMODE bit in CR1 Reg
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80006b8:	60fb      	str	r3, [r7, #12]
		tempreg |= (1<<SPI_CR1_RXONLY); //Set RXONLY bit in CR1 Reg (output disabled)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006c0:	60fb      	str	r3, [r7, #12]
	}

	//3. (Speed)Baud rate control Configuration
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	799b      	ldrb	r3, [r3, #6]
 80006c6:	00db      	lsls	r3, r3, #3
 80006c8:	461a      	mov	r2, r3
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	4313      	orrs	r3, r2
 80006ce:	60fb      	str	r3, [r7, #12]

	//4. DFF(Data Frame Format) Configuration
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF ;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	79db      	ldrb	r3, [r3, #7]
 80006d4:	02db      	lsls	r3, r3, #11
 80006d6:	461a      	mov	r2, r3
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4313      	orrs	r3, r2
 80006dc:	60fb      	str	r3, [r7, #12]

	//5. CPOL Configuration
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL <<SPI_CR1_CPOL;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7a1b      	ldrb	r3, [r3, #8]
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	461a      	mov	r2, r3
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	60fb      	str	r3, [r7, #12]

	//6. CPHA Configuration
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	7a5b      	ldrb	r3, [r3, #9]
 80006f0:	461a      	mov	r2, r3
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	60fb      	str	r3, [r7, #12]

	//7. SSM Configuration
	tempreg |= pSPIHandle->SPIConfig.SPI_SPI_SSM << SPI_CR1_SSM;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	7a9b      	ldrb	r3, [r3, #10]
 80006fc:	025b      	lsls	r3, r3, #9
 80006fe:	461a      	mov	r2, r3
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	4313      	orrs	r3, r2
 8000704:	60fb      	str	r3, [r7, #12]


	pSPIHandle->pSPIx->CR1 = tempreg; //putting all settings into actual place which is CR1 reg.
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	601a      	str	r2, [r3, #0]
}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <SPI_GetFlagStatus>:
//	}
}


uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	689a      	ldr	r2, [r3, #8]
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	4013      	ands	r3, r2
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800072c:	2301      	movs	r3, #1
 800072e:	e000      	b.n	8000732 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <SPI_SendData>:

/*
 * Data Send with blocking(polling) Method
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
	while(Len > 0)//until no data remain
 8000748:	e027      	b.n	800079a <SPI_SendData+0x5e>
	{
		while (SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET); //Check transmit buffer empty or not! Wait until TXE is set!!
 800074a:	bf00      	nop
 800074c:	2102      	movs	r1, #2
 800074e:	68f8      	ldr	r0, [r7, #12]
 8000750:	f7ff ffe1 	bl	8000716 <SPI_GetFlagStatus>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d0f8      	beq.n	800074c <SPI_SendData+0x10>

		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)) // Check data is 8 bit or 16 bit format!
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000762:	2b00      	cmp	r3, #0
 8000764:	d00e      	beq.n	8000784 <SPI_SendData+0x48>
		{
			pSPIx->DR = *((uint16_t*)pTxBuffer); //16 bit data loads to the DR
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	60da      	str	r2, [r3, #12]
			Len--;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	607b      	str	r3, [r7, #4]
			Len--; // 2 times decrease because we just send 2 bytes of data
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3b01      	subs	r3, #1
 800077a:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	3301      	adds	r3, #1
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	e00a      	b.n	800079a <SPI_SendData+0x5e>
		}else
		{
			pSPIx->DR = *pTxBuffer; //8 bit data loads to the DR
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	60da      	str	r2, [r3, #12]
			Len--; // 1 times decrease because we just send 1 bytes of data
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	3b01      	subs	r3, #1
 8000792:	607b      	str	r3, [r7, #4]
			pTxBuffer++; // data buffer increased for next byte of data
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	3301      	adds	r3, #1
 8000798:	60bb      	str	r3, [r7, #8]
	while(Len > 0)//until no data remain
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d1d4      	bne.n	800074a <SPI_SendData+0xe>

		}
	}
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <SPI_ReceiveData>:

/*
 * Data Receive with blocking(polling) Method
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b084      	sub	sp, #16
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	60f8      	str	r0, [r7, #12]
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
	while(Len > 0)//until no data remain
 80007b6:	e027      	b.n	8000808 <SPI_ReceiveData+0x5e>
	{
		while (SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG)  == (uint8_t)FLAG_RESET ); //Check Receive buffer not empty ! Wait until RXNE is set!!
 80007b8:	bf00      	nop
 80007ba:	2101      	movs	r1, #1
 80007bc:	68f8      	ldr	r0, [r7, #12]
 80007be:	f7ff ffaa 	bl	8000716 <SPI_GetFlagStatus>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d0f8      	beq.n	80007ba <SPI_ReceiveData+0x10>

		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)) // Check data is 8 bit or 16 bit format!
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d00e      	beq.n	80007f2 <SPI_ReceiveData+0x48>
		{
			*((uint16_t*)pRxBuffer) = pSPIx->DR; //16 bit data reads from the DR
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	b29a      	uxth	r2, r3
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	801a      	strh	r2, [r3, #0]
			Len--;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
			Len--; // 2 times decrease because we just receive 2 bytes of data
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
			(uint16_t*)pRxBuffer++;
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	3301      	adds	r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	e00a      	b.n	8000808 <SPI_ReceiveData+0x5e>
		}else
		{
			*pRxBuffer = pSPIx->DR; //8 bit data reads from the DR
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	68db      	ldr	r3, [r3, #12]
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	701a      	strb	r2, [r3, #0]
			Len--; // 1 times decrease because we just receive 1 bytes of data
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	607b      	str	r3, [r7, #4]
			pRxBuffer++; // data buffer increased for next byte of data
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	3301      	adds	r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
	while(Len > 0)//until no data remain
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1d4      	bne.n	80007b8 <SPI_ReceiveData+0xe>

		}
	}
}
 800080e:	bf00      	nop
 8000810:	bf00      	nop
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <SPI_PeriphControl>:

/*
 * SPI Peripheral Enable or Disable Configuration API
 */
void SPI_PeriphControl(SPI_RegDef_t *pSPIx, uint8_t EnorDis)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	70fb      	strb	r3, [r7, #3]
	  if (EnorDis != DISABLE)
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d006      	beq.n	8000838 <SPI_PeriphControl+0x20>
	  {
		  pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	601a      	str	r2, [r3, #0]

	  }else
	  {
		  pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	  }
}
 8000836:	e005      	b.n	8000844 <SPI_PeriphControl+0x2c>
		  pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	601a      	str	r2, [r3, #0]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr

0800084e <SPI_SSOEConfig>:

/*
 * SPI SSOE bit Enable or Disable Configuration API
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDis)
{
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
 8000856:	460b      	mov	r3, r1
 8000858:	70fb      	strb	r3, [r7, #3]
	  if (EnorDis != DISABLE)
 800085a:	78fb      	ldrb	r3, [r7, #3]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d006      	beq.n	800086e <SPI_SSOEConfig+0x20>
	  {
		  pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	f043 0204 	orr.w	r2, r3, #4
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	605a      	str	r2, [r3, #4]

	  }else
	  {
		  pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	  }
}
 800086c:	e005      	b.n	800087a <SPI_SSOEConfig+0x2c>
		  pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	f023 0204 	bic.w	r2, r3, #4
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	605a      	str	r2, [r3, #4]
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <gpioConfig>:
uint8_t commandcode;
uint8_t ackbyte;
uint8_t args[2];


void gpioConfig(){
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	; 0x30
 8000888:	af00      	add	r7, sp, #0
	 * PA4 --> SPI1_NCC - General Output
	 * PA5 --> SPI1_SCK - Alternate Output PP
	 * PA6 --> SPI1_MISO - INPUT FLOATING
	 * PA7 --> SPI1_MOSI - Alternate Output PP
	 */
	pGPIOspi.pGPIOx = GPIOA;
 800088a:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <gpioConfig+0x80>)
 800088c:	623b      	str	r3, [r7, #32]
	pGPIOspi.GPIO_PinConfig.GPIO_Mode = GPIO_MODE_AF_PP;
 800088e:	2318      	movs	r3, #24
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
	pGPIOspi.GPIO_PinConfig.GPIO_Speed = GPIO_SPEED_MEDIUM;
 8000892:	2301      	movs	r3, #1
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c

	//For SCLK
	pGPIOspi.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_5;
 8000896:	2305      	movs	r3, #5
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_Init(&pGPIOspi);
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fcf6 	bl	8000290 <GPIO_Init>

	//For MISO
	pGPIOspi.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_6;
 80008a4:	2306      	movs	r3, #6
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_Init(&pGPIOspi);
 80008a8:	f107 0320 	add.w	r3, r7, #32
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fcef 	bl	8000290 <GPIO_Init>

	//For MOSI
	pGPIOspi.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_7;
 80008b2:	2307      	movs	r3, #7
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_Init(&pGPIOspi);
 80008b6:	f107 0320 	add.w	r3, r7, #32
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fce8 	bl	8000290 <GPIO_Init>

	//For NCC
	pGPIOspi.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_4;
 80008c0:	2304      	movs	r3, #4
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_Init(&pGPIOspi);
 80008c4:	f107 0320 	add.w	r3, r7, #32
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fce1 	bl	8000290 <GPIO_Init>


	//For LED
	GPIOLed.pGPIOx = GPIOB;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <gpioConfig+0x84>)
 80008d0:	613b      	str	r3, [r7, #16]
	GPIOLed.GPIO_PinConfig.GPIO_Mode = GPIO_MODE_OUT_PP;
 80008d2:	2310      	movs	r3, #16
 80008d4:	61bb      	str	r3, [r7, #24]
	GPIOLed.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_1;
 80008d6:	2301      	movs	r3, #1
 80008d8:	617b      	str	r3, [r7, #20]
	GPIOLed.GPIO_PinConfig.GPIO_Speed = GPIO_SPEED_MEDIUM;
 80008da:	2301      	movs	r3, #1
 80008dc:	61fb      	str	r3, [r7, #28]
	GPIO_Init(&GPIOLed);
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fcd4 	bl	8000290 <GPIO_Init>

	//For button
	GPIOButton.pGPIOx = GPIOA;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <gpioConfig+0x80>)
 80008ea:	603b      	str	r3, [r7, #0]
	GPIOButton.GPIO_PinConfig.GPIO_Mode = GPIO_MODE_INPUT_PD;
 80008ec:	2328      	movs	r3, #40	; 0x28
 80008ee:	60bb      	str	r3, [r7, #8]
	GPIOButton.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
	GPIO_Init(&GPIOButton);
 80008f4:	463b      	mov	r3, r7
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fcca 	bl	8000290 <GPIO_Init>

}
 80008fc:	bf00      	nop
 80008fe:	3730      	adds	r7, #48	; 0x30
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40010800 	.word	0x40010800
 8000908:	40010c00 	.word	0x40010c00

0800090c <spiConfig>:



void spiConfig(){
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0

	SPI_Handle_t SPIHandle;

	SPIHandle.pSPIx = SPI1;
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <spiConfig+0x38>)
 8000914:	607b      	str	r3, [r7, #4]
	SPIHandle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000916:	2301      	movs	r3, #1
 8000918:	723b      	strb	r3, [r7, #8]
	SPIHandle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800091a:	2301      	movs	r3, #1
 800091c:	727b      	strb	r3, [r7, #9]
	SPIHandle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800091e:	2300      	movs	r3, #0
 8000920:	72fb      	strb	r3, [r7, #11]
	SPIHandle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV16;// fclock generates 8Mhz and  sclk is now mhz.
 8000922:	2303      	movs	r3, #3
 8000924:	72bb      	strb	r3, [r7, #10]
	SPIHandle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	733b      	strb	r3, [r7, #12]
	SPIHandle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	737b      	strb	r3, [r7, #13]
	SPIHandle.SPIConfig.SPI_SPI_SSM = SPI_SSM_DIS; //Software slave managment disabled, we will use hardware slave managment
 800092e:	2300      	movs	r3, #0
 8000930:	73bb      	strb	r3, [r7, #14]


	SPI_Init(&SPIHandle);
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff fe93 	bl	8000660 <SPI_Init>
}
 800093a:	bf00      	nop
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40013000 	.word	0x40013000

08000948 <delay>:



void delay(uint32_t time){
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]

	while(time--);
 8000950:	bf00      	nop
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	1e5a      	subs	r2, r3, #1
 8000956:	607a      	str	r2, [r7, #4]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d1fa      	bne.n	8000952 <delay+0xa>

}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr

08000968 <main>:


int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0

	gpioConfig(); // GPIO INIT
 800096c:	f7ff ff8a 	bl	8000884 <gpioConfig>
	spiConfig();  // SPI INIT
 8000970:	f7ff ffcc 	bl	800090c <spiConfig>
	 * SSOE = 1 means NSS output enable.
	 * NSS pin is managed by hardware.
	 * When spi enabled, NSS will pulled to low.
	 * When spi disabled, NSS will pulled to high.
	 */
	SPI_SSOEConfig(SPI1, ENABLE); // Setting SSOE pin, NSS pin will pull to low in order to activate slave device(Ardiuno in this scenario)
 8000974:	2101      	movs	r1, #1
 8000976:	4836      	ldr	r0, [pc, #216]	; (8000a50 <main+0xe8>)
 8000978:	f7ff ff69 	bl	800084e <SPI_SSOEConfig>


	while (1)
	{

		GPIO_ToggleOutputPin(GPIOB, GPIO_Pin_1);
 800097c:	2101      	movs	r1, #1
 800097e:	4835      	ldr	r0, [pc, #212]	; (8000a54 <main+0xec>)
 8000980:	f7ff fe3b 	bl	80005fa <GPIO_ToggleOutputPin>

		//Enable the SPI Peripheral
		SPI_PeriphControl(SPI1, ENABLE);
 8000984:	2101      	movs	r1, #1
 8000986:	4832      	ldr	r0, [pc, #200]	; (8000a50 <main+0xe8>)
 8000988:	f7ff ff46 	bl	8000818 <SPI_PeriphControl>

		while ( ! (GPIO_ReadFromInputPin(GPIOA, GPIO_Pin_0)) ); // Data will send only if I press the button. Because code will not hanging in "here (while)" when I press the button
 800098c:	bf00      	nop
 800098e:	2100      	movs	r1, #0
 8000990:	4831      	ldr	r0, [pc, #196]	; (8000a58 <main+0xf0>)
 8000992:	f7ff fe1b 	bl	80005cc <GPIO_ReadFromInputPin>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d0f8      	beq.n	800098e <main+0x26>
		GPIO_ToggleOutputPin(GPIOB, GPIO_Pin_1);
 800099c:	2101      	movs	r1, #1
 800099e:	482d      	ldr	r0, [pc, #180]	; (8000a54 <main+0xec>)
 80009a0:	f7ff fe2b 	bl	80005fa <GPIO_ToggleOutputPin>
		delay(500000); //small delay for button debouncing issues.
 80009a4:	482d      	ldr	r0, [pc, #180]	; (8000a5c <main+0xf4>)
 80009a6:	f7ff ffcf 	bl	8000948 <delay>
		command_led_control();
 80009aa:	f000 f869 	bl	8000a80 <command_led_control>

		while ( ! (GPIO_ReadFromInputPin(GPIOA, GPIO_Pin_0)) );
 80009ae:	bf00      	nop
 80009b0:	2100      	movs	r1, #0
 80009b2:	4829      	ldr	r0, [pc, #164]	; (8000a58 <main+0xf0>)
 80009b4:	f7ff fe0a 	bl	80005cc <GPIO_ReadFromInputPin>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d0f8      	beq.n	80009b0 <main+0x48>
		GPIO_ToggleOutputPin(GPIOB, GPIO_Pin_1);
 80009be:	2101      	movs	r1, #1
 80009c0:	4824      	ldr	r0, [pc, #144]	; (8000a54 <main+0xec>)
 80009c2:	f7ff fe1a 	bl	80005fa <GPIO_ToggleOutputPin>
		delay(500000); //small delay for button debouncing issues.
 80009c6:	4825      	ldr	r0, [pc, #148]	; (8000a5c <main+0xf4>)
 80009c8:	f7ff ffbe 	bl	8000948 <delay>
		command_read_sensor();
 80009cc:	f000 f898 	bl	8000b00 <command_read_sensor>

		while ( ! (GPIO_ReadFromInputPin(GPIOA, GPIO_Pin_0)) );
 80009d0:	bf00      	nop
 80009d2:	2100      	movs	r1, #0
 80009d4:	4820      	ldr	r0, [pc, #128]	; (8000a58 <main+0xf0>)
 80009d6:	f7ff fdf9 	bl	80005cc <GPIO_ReadFromInputPin>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d0f8      	beq.n	80009d2 <main+0x6a>
		GPIO_ToggleOutputPin(GPIOB, GPIO_Pin_1);
 80009e0:	2101      	movs	r1, #1
 80009e2:	481c      	ldr	r0, [pc, #112]	; (8000a54 <main+0xec>)
 80009e4:	f7ff fe09 	bl	80005fa <GPIO_ToggleOutputPin>
		delay(500000); //small delay for button debouncing issues.
 80009e8:	481c      	ldr	r0, [pc, #112]	; (8000a5c <main+0xf4>)
 80009ea:	f7ff ffad 	bl	8000948 <delay>
		command_read_led();
 80009ee:	f000 f8d5 	bl	8000b9c <command_read_led>

		while ( ! (GPIO_ReadFromInputPin(GPIOA, GPIO_Pin_0)) );
 80009f2:	bf00      	nop
 80009f4:	2100      	movs	r1, #0
 80009f6:	4818      	ldr	r0, [pc, #96]	; (8000a58 <main+0xf0>)
 80009f8:	f7ff fde8 	bl	80005cc <GPIO_ReadFromInputPin>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0f8      	beq.n	80009f4 <main+0x8c>
		GPIO_ToggleOutputPin(GPIOB, GPIO_Pin_1);
 8000a02:	2101      	movs	r1, #1
 8000a04:	4813      	ldr	r0, [pc, #76]	; (8000a54 <main+0xec>)
 8000a06:	f7ff fdf8 	bl	80005fa <GPIO_ToggleOutputPin>
		delay(500000); //small delay for button debouncing issues.
 8000a0a:	4814      	ldr	r0, [pc, #80]	; (8000a5c <main+0xf4>)
 8000a0c:	f7ff ff9c 	bl	8000948 <delay>
		command_what_yo_want_to_print();
 8000a10:	f000 f912 	bl	8000c38 <command_what_yo_want_to_print>

		while ( ! (GPIO_ReadFromInputPin(GPIOA, GPIO_Pin_0)) );
 8000a14:	bf00      	nop
 8000a16:	2100      	movs	r1, #0
 8000a18:	480f      	ldr	r0, [pc, #60]	; (8000a58 <main+0xf0>)
 8000a1a:	f7ff fdd7 	bl	80005cc <GPIO_ReadFromInputPin>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d0f8      	beq.n	8000a16 <main+0xae>
		GPIO_ToggleOutputPin(GPIOB, GPIO_Pin_1);
 8000a24:	2101      	movs	r1, #1
 8000a26:	480b      	ldr	r0, [pc, #44]	; (8000a54 <main+0xec>)
 8000a28:	f7ff fde7 	bl	80005fa <GPIO_ToggleOutputPin>
		delay(500000); //small delay for button debouncing issues.
 8000a2c:	480b      	ldr	r0, [pc, #44]	; (8000a5c <main+0xf4>)
 8000a2e:	f7ff ff8b 	bl	8000948 <delay>
		command_check_id();
 8000a32:	f000 f96d 	bl	8000d10 <command_check_id>


		//Before disable the SPI, lets confirm SPI is not busy
		while(SPI_GetFlagStatus(SPI1, SPI_BUSY_FLAG));
 8000a36:	bf00      	nop
 8000a38:	2180      	movs	r1, #128	; 0x80
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <main+0xe8>)
 8000a3c:	f7ff fe6b 	bl	8000716 <SPI_GetFlagStatus>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1f8      	bne.n	8000a38 <main+0xd0>

		//Disable the SPI Peripheral
		SPI_PeriphControl(SPI1, DISABLE);
 8000a46:	2100      	movs	r1, #0
 8000a48:	4801      	ldr	r0, [pc, #4]	; (8000a50 <main+0xe8>)
 8000a4a:	f7ff fee5 	bl	8000818 <SPI_PeriphControl>
		GPIO_ToggleOutputPin(GPIOB, GPIO_Pin_1);
 8000a4e:	e795      	b.n	800097c <main+0x14>
 8000a50:	40013000 	.word	0x40013000
 8000a54:	40010c00 	.word	0x40010c00
 8000a58:	40010800 	.word	0x40010800
 8000a5c:	0007a120 	.word	0x0007a120

08000a60 <SPI_ResponseCheck>:




uint8_t SPI_ResponseCheck(uint8_t ackbyte)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]

	if(ackbyte == (uint8_t)0xF5)
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2bf5      	cmp	r3, #245	; 0xf5
 8000a6e:	d101      	bne.n	8000a74 <SPI_ResponseCheck+0x14>
	{
		return 1; //ACK ise 1 değilse 0 döndür!
 8000a70:	2301      	movs	r3, #1
 8000a72:	e000      	b.n	8000a76 <SPI_ResponseCheck+0x16>
	}

	return 0;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <command_led_control>:



void command_led_control()
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
    //1. CMD_LED_CTRL takes pin no(1) &  value(1)

	commandcode = COMMAND_LED_CTRL;
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <command_led_control+0x68>)
 8000a86:	2250      	movs	r2, #80	; 0x50
 8000a88:	701a      	strb	r2, [r3, #0]

	//send command
	SPI_SendData(SPI1,&commandcode,1);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4916      	ldr	r1, [pc, #88]	; (8000ae8 <command_led_control+0x68>)
 8000a8e:	4817      	ldr	r0, [pc, #92]	; (8000aec <command_led_control+0x6c>)
 8000a90:	f7ff fe54 	bl	800073c <SPI_SendData>

	//do dummy read to clear off the RXNE
	SPI_ReceiveData(SPI1,&empty_read,1);
 8000a94:	2201      	movs	r2, #1
 8000a96:	4916      	ldr	r1, [pc, #88]	; (8000af0 <command_led_control+0x70>)
 8000a98:	4814      	ldr	r0, [pc, #80]	; (8000aec <command_led_control+0x6c>)
 8000a9a:	f7ff fe86 	bl	80007aa <SPI_ReceiveData>

	// IMPORTANT NOTE : When Master or Slave sends 1 byte, it also receive 1 byte in return. Thats why I am doing dummy reads & writes

	//Send some dummy bits (1 byte) fetch the response from the slave
	SPI_SendData(SPI1,&empty_write,1);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4914      	ldr	r1, [pc, #80]	; (8000af4 <command_led_control+0x74>)
 8000aa2:	4812      	ldr	r0, [pc, #72]	; (8000aec <command_led_control+0x6c>)
 8000aa4:	f7ff fe4a 	bl	800073c <SPI_SendData>

	//read the ack byte received
	SPI_ReceiveData(SPI1,&ackbyte,1);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	4913      	ldr	r1, [pc, #76]	; (8000af8 <command_led_control+0x78>)
 8000aac:	480f      	ldr	r0, [pc, #60]	; (8000aec <command_led_control+0x6c>)
 8000aae:	f7ff fe7c 	bl	80007aa <SPI_ReceiveData>

	if( SPI_ResponseCheck(ackbyte))
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <command_led_control+0x78>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ffd2 	bl	8000a60 <SPI_ResponseCheck>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d00f      	beq.n	8000ae2 <command_led_control+0x62>
	{
		args[0] = LED_PIN;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <command_led_control+0x7c>)
 8000ac4:	2209      	movs	r2, #9
 8000ac6:	701a      	strb	r2, [r3, #0]
		args[1] = LED_ON;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <command_led_control+0x7c>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	705a      	strb	r2, [r3, #1]

		//send arguments
		SPI_SendData(SPI1,args,2);
 8000ace:	2202      	movs	r2, #2
 8000ad0:	490a      	ldr	r1, [pc, #40]	; (8000afc <command_led_control+0x7c>)
 8000ad2:	4806      	ldr	r0, [pc, #24]	; (8000aec <command_led_control+0x6c>)
 8000ad4:	f7ff fe32 	bl	800073c <SPI_SendData>
		// dummy read
		SPI_ReceiveData(SPI1,args,2);
 8000ad8:	2202      	movs	r2, #2
 8000ada:	4908      	ldr	r1, [pc, #32]	; (8000afc <command_led_control+0x7c>)
 8000adc:	4803      	ldr	r0, [pc, #12]	; (8000aec <command_led_control+0x6c>)
 8000ade:	f7ff fe64 	bl	80007aa <SPI_ReceiveData>
	}

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000021 	.word	0x20000021
 8000aec:	40013000 	.word	0x40013000
 8000af0:	20000020 	.word	0x20000020
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000022 	.word	0x20000022
 8000afc:	20000024 	.word	0x20000024

08000b00 <command_read_sensor>:


void command_read_sensor()
 {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
	//2. CMD_SENSOR_READ   needs analog pin number(1)

	commandcode = COMMAND_SENSOR_READ;
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <command_read_sensor+0x84>)
 8000b08:	2251      	movs	r2, #81	; 0x51
 8000b0a:	701a      	strb	r2, [r3, #0]

	//send command
	SPI_SendData(SPI1, &commandcode, 1);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	491d      	ldr	r1, [pc, #116]	; (8000b84 <command_read_sensor+0x84>)
 8000b10:	481d      	ldr	r0, [pc, #116]	; (8000b88 <command_read_sensor+0x88>)
 8000b12:	f7ff fe13 	bl	800073c <SPI_SendData>

	//do dummy read to clear off the RXNE
	SPI_ReceiveData(SPI1, &empty_read, 1);
 8000b16:	2201      	movs	r2, #1
 8000b18:	491c      	ldr	r1, [pc, #112]	; (8000b8c <command_read_sensor+0x8c>)
 8000b1a:	481b      	ldr	r0, [pc, #108]	; (8000b88 <command_read_sensor+0x88>)
 8000b1c:	f7ff fe45 	bl	80007aa <SPI_ReceiveData>

	//Send some dummy byte to fetch the response from the slave
	SPI_SendData(SPI1, &empty_write, 1);
 8000b20:	2201      	movs	r2, #1
 8000b22:	491b      	ldr	r1, [pc, #108]	; (8000b90 <command_read_sensor+0x90>)
 8000b24:	4818      	ldr	r0, [pc, #96]	; (8000b88 <command_read_sensor+0x88>)
 8000b26:	f7ff fe09 	bl	800073c <SPI_SendData>

	//read the ack byte received
	SPI_ReceiveData(SPI1, &ackbyte, 1);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4919      	ldr	r1, [pc, #100]	; (8000b94 <command_read_sensor+0x94>)
 8000b2e:	4816      	ldr	r0, [pc, #88]	; (8000b88 <command_read_sensor+0x88>)
 8000b30:	f7ff fe3b 	bl	80007aa <SPI_ReceiveData>

	if (SPI_ResponseCheck(ackbyte)) {
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <command_read_sensor+0x94>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff91 	bl	8000a60 <SPI_ResponseCheck>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d01b      	beq.n	8000b7c <command_read_sensor+0x7c>
		args[0] = ANALOG_PIN0;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <command_read_sensor+0x98>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]

		//send arguments
		SPI_SendData(SPI1, args, 1); //sending one byte of
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4912      	ldr	r1, [pc, #72]	; (8000b98 <command_read_sensor+0x98>)
 8000b4e:	480e      	ldr	r0, [pc, #56]	; (8000b88 <command_read_sensor+0x88>)
 8000b50:	f7ff fdf4 	bl	800073c <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI1, &empty_read, 1);
 8000b54:	2201      	movs	r2, #1
 8000b56:	490d      	ldr	r1, [pc, #52]	; (8000b8c <command_read_sensor+0x8c>)
 8000b58:	480b      	ldr	r0, [pc, #44]	; (8000b88 <command_read_sensor+0x88>)
 8000b5a:	f7ff fe26 	bl	80007aa <SPI_ReceiveData>

		//insert some delay so that slave can ready with the data
		delay(50000);
 8000b5e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b62:	f7ff fef1 	bl	8000948 <delay>

		//Send some dummy bits (1 byte) fetch the response from the slave
		SPI_SendData(SPI1, &empty_write, 1);
 8000b66:	2201      	movs	r2, #1
 8000b68:	4909      	ldr	r1, [pc, #36]	; (8000b90 <command_read_sensor+0x90>)
 8000b6a:	4807      	ldr	r0, [pc, #28]	; (8000b88 <command_read_sensor+0x88>)
 8000b6c:	f7ff fde6 	bl	800073c <SPI_SendData>

		uint8_t analog_read;
		SPI_ReceiveData(SPI1, &analog_read, 1);
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	2201      	movs	r2, #1
 8000b74:	4619      	mov	r1, r3
 8000b76:	4804      	ldr	r0, [pc, #16]	; (8000b88 <command_read_sensor+0x88>)
 8000b78:	f7ff fe17 	bl	80007aa <SPI_ReceiveData>
	}
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000021 	.word	0x20000021
 8000b88:	40013000 	.word	0x40013000
 8000b8c:	20000020 	.word	0x20000020
 8000b90:	20000000 	.word	0x20000000
 8000b94:	20000022 	.word	0x20000022
 8000b98:	20000024 	.word	0x20000024

08000b9c <command_read_led>:

void command_read_led()
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
	//3.  CMD_LED_READ 	needs pin no(1)
	commandcode = COMMAND_LED_READ;
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <command_read_led+0x84>)
 8000ba4:	2252      	movs	r2, #82	; 0x52
 8000ba6:	701a      	strb	r2, [r3, #0]

	//send command
	SPI_SendData(SPI1,&commandcode,1);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	491d      	ldr	r1, [pc, #116]	; (8000c20 <command_read_led+0x84>)
 8000bac:	481d      	ldr	r0, [pc, #116]	; (8000c24 <command_read_led+0x88>)
 8000bae:	f7ff fdc5 	bl	800073c <SPI_SendData>

	//do dummy read to clear off the RXNE
	SPI_ReceiveData(SPI1,&empty_read,1);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	491c      	ldr	r1, [pc, #112]	; (8000c28 <command_read_led+0x8c>)
 8000bb6:	481b      	ldr	r0, [pc, #108]	; (8000c24 <command_read_led+0x88>)
 8000bb8:	f7ff fdf7 	bl	80007aa <SPI_ReceiveData>

	//Send some dummy byte to fetch the response from the slave
	SPI_SendData(SPI1,&empty_write,1);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	491b      	ldr	r1, [pc, #108]	; (8000c2c <command_read_led+0x90>)
 8000bc0:	4818      	ldr	r0, [pc, #96]	; (8000c24 <command_read_led+0x88>)
 8000bc2:	f7ff fdbb 	bl	800073c <SPI_SendData>

	//read the ack byte received
	SPI_ReceiveData(SPI1,&ackbyte,1);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4919      	ldr	r1, [pc, #100]	; (8000c30 <command_read_led+0x94>)
 8000bca:	4816      	ldr	r0, [pc, #88]	; (8000c24 <command_read_led+0x88>)
 8000bcc:	f7ff fded 	bl	80007aa <SPI_ReceiveData>

	if( SPI_ResponseCheck(ackbyte))
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <command_read_led+0x94>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff43 	bl	8000a60 <SPI_ResponseCheck>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d01b      	beq.n	8000c18 <command_read_led+0x7c>
	{
		args[0] = LED_PIN;
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <command_read_led+0x98>)
 8000be2:	2209      	movs	r2, #9
 8000be4:	701a      	strb	r2, [r3, #0]

		//send arguments
		SPI_SendData(SPI1,args,1); //sending one byte of
 8000be6:	2201      	movs	r2, #1
 8000be8:	4912      	ldr	r1, [pc, #72]	; (8000c34 <command_read_led+0x98>)
 8000bea:	480e      	ldr	r0, [pc, #56]	; (8000c24 <command_read_led+0x88>)
 8000bec:	f7ff fda6 	bl	800073c <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI1,&empty_read,1);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	490d      	ldr	r1, [pc, #52]	; (8000c28 <command_read_led+0x8c>)
 8000bf4:	480b      	ldr	r0, [pc, #44]	; (8000c24 <command_read_led+0x88>)
 8000bf6:	f7ff fdd8 	bl	80007aa <SPI_ReceiveData>

		//insert some delay so that slave can ready with the data
		delay(50000);
 8000bfa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bfe:	f7ff fea3 	bl	8000948 <delay>

		//Send some dummy bits (1 byte) fetch the response from the slave
		SPI_SendData(SPI1,&empty_write,1);
 8000c02:	2201      	movs	r2, #1
 8000c04:	4909      	ldr	r1, [pc, #36]	; (8000c2c <command_read_led+0x90>)
 8000c06:	4807      	ldr	r0, [pc, #28]	; (8000c24 <command_read_led+0x88>)
 8000c08:	f7ff fd98 	bl	800073c <SPI_SendData>

		uint8_t led_status;
		SPI_ReceiveData(SPI1,&led_status,1);
 8000c0c:	1dfb      	adds	r3, r7, #7
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4619      	mov	r1, r3
 8000c12:	4804      	ldr	r0, [pc, #16]	; (8000c24 <command_read_led+0x88>)
 8000c14:	f7ff fdc9 	bl	80007aa <SPI_ReceiveData>

	}
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000021 	.word	0x20000021
 8000c24:	40013000 	.word	0x40013000
 8000c28:	20000020 	.word	0x20000020
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	20000022 	.word	0x20000022
 8000c34:	20000024 	.word	0x20000024

08000c38 <command_what_yo_want_to_print>:

void command_what_yo_want_to_print()
{
 8000c38:	b5b0      	push	{r4, r5, r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
	//4. CMD_PRINT needs len(2) &  message(len)
	commandcode = COMMAND_PRINT;
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <command_what_yo_want_to_print+0xbc>)
 8000c40:	2253      	movs	r2, #83	; 0x53
 8000c42:	701a      	strb	r2, [r3, #0]

	//send command
	SPI_SendData(SPI1,&commandcode,1);
 8000c44:	2201      	movs	r2, #1
 8000c46:	492b      	ldr	r1, [pc, #172]	; (8000cf4 <command_what_yo_want_to_print+0xbc>)
 8000c48:	482b      	ldr	r0, [pc, #172]	; (8000cf8 <command_what_yo_want_to_print+0xc0>)
 8000c4a:	f7ff fd77 	bl	800073c <SPI_SendData>

	//do dummy read to clear off the RXNE
	SPI_ReceiveData(SPI1,&empty_read,1);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	492a      	ldr	r1, [pc, #168]	; (8000cfc <command_what_yo_want_to_print+0xc4>)
 8000c52:	4829      	ldr	r0, [pc, #164]	; (8000cf8 <command_what_yo_want_to_print+0xc0>)
 8000c54:	f7ff fda9 	bl	80007aa <SPI_ReceiveData>

	//Send some dummy byte to fetch the response from the slave
	SPI_SendData(SPI1,&empty_write,1);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	4929      	ldr	r1, [pc, #164]	; (8000d00 <command_what_yo_want_to_print+0xc8>)
 8000c5c:	4826      	ldr	r0, [pc, #152]	; (8000cf8 <command_what_yo_want_to_print+0xc0>)
 8000c5e:	f7ff fd6d 	bl	800073c <SPI_SendData>

	//read the ack byte received
	SPI_ReceiveData(SPI1,&ackbyte,1);
 8000c62:	2201      	movs	r2, #1
 8000c64:	4927      	ldr	r1, [pc, #156]	; (8000d04 <command_what_yo_want_to_print+0xcc>)
 8000c66:	4824      	ldr	r0, [pc, #144]	; (8000cf8 <command_what_yo_want_to_print+0xc0>)
 8000c68:	f7ff fd9f 	bl	80007aa <SPI_ReceiveData>

	uint8_t message[] = "Hello ! It's Lutfullah ??";
 8000c6c:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <command_what_yo_want_to_print+0xd0>)
 8000c6e:	463c      	mov	r4, r7
 8000c70:	461d      	mov	r5, r3
 8000c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c7a:	c403      	stmia	r4!, {r0, r1}
 8000c7c:	8022      	strh	r2, [r4, #0]
	if( SPI_ResponseCheck(ackbyte))
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <command_what_yo_want_to_print+0xcc>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff feec 	bl	8000a60 <SPI_ResponseCheck>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d02e      	beq.n	8000cec <command_what_yo_want_to_print+0xb4>
	{
		args[0] = strlen((char*)message);
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fa6d 	bl	8000170 <strlen>
 8000c96:	4603      	mov	r3, r0
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <command_what_yo_want_to_print+0xd4>)
 8000c9c:	701a      	strb	r2, [r3, #0]

		//send arguments
		SPI_SendData(SPI1,args,1); //sending length
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	491a      	ldr	r1, [pc, #104]	; (8000d0c <command_what_yo_want_to_print+0xd4>)
 8000ca2:	4815      	ldr	r0, [pc, #84]	; (8000cf8 <command_what_yo_want_to_print+0xc0>)
 8000ca4:	f7ff fd4a 	bl	800073c <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI1,&empty_read,1);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4914      	ldr	r1, [pc, #80]	; (8000cfc <command_what_yo_want_to_print+0xc4>)
 8000cac:	4812      	ldr	r0, [pc, #72]	; (8000cf8 <command_what_yo_want_to_print+0xc0>)
 8000cae:	f7ff fd7c 	bl	80007aa <SPI_ReceiveData>

		delay(50000);
 8000cb2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000cb6:	f7ff fe47 	bl	8000948 <delay>

		//send message
		for(int i = 0 ; i < args[0] ; i++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
 8000cbe:	e00f      	b.n	8000ce0 <command_what_yo_want_to_print+0xa8>
		{
			SPI_SendData(SPI1,&message[i],1);
 8000cc0:	463a      	mov	r2, r7
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480b      	ldr	r0, [pc, #44]	; (8000cf8 <command_what_yo_want_to_print+0xc0>)
 8000ccc:	f7ff fd36 	bl	800073c <SPI_SendData>
			SPI_ReceiveData(SPI1,&empty_read,1);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	490a      	ldr	r1, [pc, #40]	; (8000cfc <command_what_yo_want_to_print+0xc4>)
 8000cd4:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <command_what_yo_want_to_print+0xc0>)
 8000cd6:	f7ff fd68 	bl	80007aa <SPI_ReceiveData>
		for(int i = 0 ; i < args[0] ; i++)
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	61fb      	str	r3, [r7, #28]
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <command_what_yo_want_to_print+0xd4>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	dbe9      	blt.n	8000cc0 <command_what_yo_want_to_print+0x88>
		}

	}
}
 8000cec:	bf00      	nop
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8000cf4:	20000021 	.word	0x20000021
 8000cf8:	40013000 	.word	0x40013000
 8000cfc:	20000020 	.word	0x20000020
 8000d00:	20000000 	.word	0x20000000
 8000d04:	20000022 	.word	0x20000022
 8000d08:	08000e58 	.word	0x08000e58
 8000d0c:	20000024 	.word	0x20000024

08000d10 <command_check_id>:

void command_check_id()
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
	//5. CMD_ID_READ
	commandcode = COMMAND_ID_READ;
 8000d16:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <command_check_id+0x80>)
 8000d18:	2254      	movs	r2, #84	; 0x54
 8000d1a:	701a      	strb	r2, [r3, #0]

	//send command
	SPI_SendData(SPI1,&commandcode,1);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	491c      	ldr	r1, [pc, #112]	; (8000d90 <command_check_id+0x80>)
 8000d20:	481c      	ldr	r0, [pc, #112]	; (8000d94 <command_check_id+0x84>)
 8000d22:	f7ff fd0b 	bl	800073c <SPI_SendData>

	//do dummy read to clear off the RXNE
	SPI_ReceiveData(SPI1,&empty_read,1);
 8000d26:	2201      	movs	r2, #1
 8000d28:	491b      	ldr	r1, [pc, #108]	; (8000d98 <command_check_id+0x88>)
 8000d2a:	481a      	ldr	r0, [pc, #104]	; (8000d94 <command_check_id+0x84>)
 8000d2c:	f7ff fd3d 	bl	80007aa <SPI_ReceiveData>

	//Send some dummy byte to fetch the response from the slave
	SPI_SendData(SPI1,&empty_write,1);
 8000d30:	2201      	movs	r2, #1
 8000d32:	491a      	ldr	r1, [pc, #104]	; (8000d9c <command_check_id+0x8c>)
 8000d34:	4817      	ldr	r0, [pc, #92]	; (8000d94 <command_check_id+0x84>)
 8000d36:	f7ff fd01 	bl	800073c <SPI_SendData>

	//read the ack byte received
	SPI_ReceiveData(SPI1,&ackbyte,1);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4918      	ldr	r1, [pc, #96]	; (8000da0 <command_check_id+0x90>)
 8000d3e:	4815      	ldr	r0, [pc, #84]	; (8000d94 <command_check_id+0x84>)
 8000d40:	f7ff fd33 	bl	80007aa <SPI_ReceiveData>

	uint8_t id[11];
	uint32_t i=0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
	if( SPI_ResponseCheck(ackbyte))
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <command_check_id+0x90>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fe87 	bl	8000a60 <SPI_ResponseCheck>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d017      	beq.n	8000d88 <command_check_id+0x78>
	{
		//read 10 bytes id from the slave
		for(  i = 0 ; i < 10 ; i++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	e00f      	b.n	8000d7e <command_check_id+0x6e>
		{
			//send dummy byte to fetch data from slave
			SPI_SendData(SPI1,&empty_write,1);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	490e      	ldr	r1, [pc, #56]	; (8000d9c <command_check_id+0x8c>)
 8000d62:	480c      	ldr	r0, [pc, #48]	; (8000d94 <command_check_id+0x84>)
 8000d64:	f7ff fcea 	bl	800073c <SPI_SendData>
			SPI_ReceiveData(SPI1,&id[i],1);
 8000d68:	463a      	mov	r2, r7
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	2201      	movs	r2, #1
 8000d70:	4619      	mov	r1, r3
 8000d72:	4808      	ldr	r0, [pc, #32]	; (8000d94 <command_check_id+0x84>)
 8000d74:	f7ff fd19 	bl	80007aa <SPI_ReceiveData>
		for(  i = 0 ; i < 10 ; i++)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2b09      	cmp	r3, #9
 8000d82:	d9ec      	bls.n	8000d5e <command_check_id+0x4e>
		}

		id[10] = '\0';
 8000d84:	2300      	movs	r3, #0
 8000d86:	72bb      	strb	r3, [r7, #10]

	}
}
 8000d88:	bf00      	nop
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000021 	.word	0x20000021
 8000d94:	40013000 	.word	0x40013000
 8000d98:	20000020 	.word	0x20000020
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	20000022 	.word	0x20000022

08000da4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000da6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000da8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dae:	490d      	ldr	r1, [pc, #52]	; (8000de4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <LoopForever+0xe>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc4:	4c0a      	ldr	r4, [pc, #40]	; (8000df0 <LoopForever+0x16>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dd2:	f000 f811 	bl	8000df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dd6:	f7ff fdc7 	bl	8000968 <main>

08000dda <LoopForever>:

LoopForever:
    b LoopForever
 8000dda:	e7fe      	b.n	8000dda <LoopForever>
  ldr   r0, =_estack
 8000ddc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000de8:	08000e7c 	.word	0x08000e7c
  ldr r2, =_sbss
 8000dec:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000df0:	20000028 	.word	0x20000028

08000df4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC_IRQHandler>
	...

08000df8 <__libc_init_array>:
 8000df8:	b570      	push	{r4, r5, r6, lr}
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4d0c      	ldr	r5, [pc, #48]	; (8000e30 <__libc_init_array+0x38>)
 8000dfe:	4c0d      	ldr	r4, [pc, #52]	; (8000e34 <__libc_init_array+0x3c>)
 8000e00:	1b64      	subs	r4, r4, r5
 8000e02:	10a4      	asrs	r4, r4, #2
 8000e04:	42a6      	cmp	r6, r4
 8000e06:	d109      	bne.n	8000e1c <__libc_init_array+0x24>
 8000e08:	f000 f81a 	bl	8000e40 <_init>
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	4d0a      	ldr	r5, [pc, #40]	; (8000e38 <__libc_init_array+0x40>)
 8000e10:	4c0a      	ldr	r4, [pc, #40]	; (8000e3c <__libc_init_array+0x44>)
 8000e12:	1b64      	subs	r4, r4, r5
 8000e14:	10a4      	asrs	r4, r4, #2
 8000e16:	42a6      	cmp	r6, r4
 8000e18:	d105      	bne.n	8000e26 <__libc_init_array+0x2e>
 8000e1a:	bd70      	pop	{r4, r5, r6, pc}
 8000e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e20:	4798      	blx	r3
 8000e22:	3601      	adds	r6, #1
 8000e24:	e7ee      	b.n	8000e04 <__libc_init_array+0xc>
 8000e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e2a:	4798      	blx	r3
 8000e2c:	3601      	adds	r6, #1
 8000e2e:	e7f2      	b.n	8000e16 <__libc_init_array+0x1e>
 8000e30:	08000e74 	.word	0x08000e74
 8000e34:	08000e74 	.word	0x08000e74
 8000e38:	08000e74 	.word	0x08000e74
 8000e3c:	08000e78 	.word	0x08000e78

08000e40 <_init>:
 8000e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e42:	bf00      	nop
 8000e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e46:	bc08      	pop	{r3}
 8000e48:	469e      	mov	lr, r3
 8000e4a:	4770      	bx	lr

08000e4c <_fini>:
 8000e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4e:	bf00      	nop
 8000e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e52:	bc08      	pop	{r3}
 8000e54:	469e      	mov	lr, r3
 8000e56:	4770      	bx	lr
