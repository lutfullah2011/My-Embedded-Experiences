
Stm32f1xx_Drivers_Examples.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b60  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c90  08000c90  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c90  08000c90  00020418  2**0
                  CONTENTS
  4 .ARM          00000000  08000c90  08000c90  00020418  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c90  08000c90  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c90  08000c90  00010c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c94  08000c94  00010c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000418  20000000  08000c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000418  080010b0  00020418  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  080010b0  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020418  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000147e  00000000  00000000  00020441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005bf  00000000  00000000  000218bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000190  00000000  00000000  00021e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000148  00000000  00000000  00022010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00001833  00000000  00000000  00022158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000007c1  00000000  00000000  0002398b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0002414c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000055c  00000000  00000000  0002419c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000418 	.word	0x20000418
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c78 	.word	0x08000c78

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000041c 	.word	0x2000041c
 800016c:	08000c78 	.word	0x08000c78

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <GPIO_PCLK>:
#include "stm32f100xx_gpio.h"


/*Peripheral Clock Setup(Enable or Disable)*/
void GPIO_PCLK(GPIO_RegDef_t *pGPIOx, uint8_t EnorDis)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
 8000188:	460b      	mov	r3, r1
 800018a:	70fb      	strb	r3, [r7, #3]
	  if (EnorDis != DISABLE)
 800018c:	78fb      	ldrb	r3, [r7, #3]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d036      	beq.n	8000200 <GPIO_PCLK+0x80>
	  {
	      if(pGPIOx == GPIOA)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4a38      	ldr	r2, [pc, #224]	; (8000278 <GPIO_PCLK+0xf8>)
 8000196:	4293      	cmp	r3, r2
 8000198:	d106      	bne.n	80001a8 <GPIO_PCLK+0x28>
	      {
	    	  GPIOA_PCLK_EN();
 800019a:	4b38      	ldr	r3, [pc, #224]	; (800027c <GPIO_PCLK+0xfc>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	4a37      	ldr	r2, [pc, #220]	; (800027c <GPIO_PCLK+0xfc>)
 80001a0:	f043 0304 	orr.w	r3, r3, #4
 80001a4:	6193      	str	r3, [r2, #24]
	      }else if(pGPIOx == GPIOE)
	      {
	    	  GPIOE_PCLK_DIS();
	      }
	  }
}
 80001a6:	e061      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOB)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	4a35      	ldr	r2, [pc, #212]	; (8000280 <GPIO_PCLK+0x100>)
 80001ac:	4293      	cmp	r3, r2
 80001ae:	d106      	bne.n	80001be <GPIO_PCLK+0x3e>
	    	  GPIOB_PCLK_EN();
 80001b0:	4b32      	ldr	r3, [pc, #200]	; (800027c <GPIO_PCLK+0xfc>)
 80001b2:	699b      	ldr	r3, [r3, #24]
 80001b4:	4a31      	ldr	r2, [pc, #196]	; (800027c <GPIO_PCLK+0xfc>)
 80001b6:	f043 0308 	orr.w	r3, r3, #8
 80001ba:	6193      	str	r3, [r2, #24]
}
 80001bc:	e056      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOC)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	4a30      	ldr	r2, [pc, #192]	; (8000284 <GPIO_PCLK+0x104>)
 80001c2:	4293      	cmp	r3, r2
 80001c4:	d106      	bne.n	80001d4 <GPIO_PCLK+0x54>
	    	  GPIOC_PCLK_EN();
 80001c6:	4b2d      	ldr	r3, [pc, #180]	; (800027c <GPIO_PCLK+0xfc>)
 80001c8:	699b      	ldr	r3, [r3, #24]
 80001ca:	4a2c      	ldr	r2, [pc, #176]	; (800027c <GPIO_PCLK+0xfc>)
 80001cc:	f043 0310 	orr.w	r3, r3, #16
 80001d0:	6193      	str	r3, [r2, #24]
}
 80001d2:	e04b      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOD)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	4a2c      	ldr	r2, [pc, #176]	; (8000288 <GPIO_PCLK+0x108>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d106      	bne.n	80001ea <GPIO_PCLK+0x6a>
	    	  GPIOD_PCLK_EN();
 80001dc:	4b27      	ldr	r3, [pc, #156]	; (800027c <GPIO_PCLK+0xfc>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	4a26      	ldr	r2, [pc, #152]	; (800027c <GPIO_PCLK+0xfc>)
 80001e2:	f043 0320 	orr.w	r3, r3, #32
 80001e6:	6193      	str	r3, [r2, #24]
}
 80001e8:	e040      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOE)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a27      	ldr	r2, [pc, #156]	; (800028c <GPIO_PCLK+0x10c>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d13c      	bne.n	800026c <GPIO_PCLK+0xec>
	    	  GPIOE_PCLK_EN();
 80001f2:	4b22      	ldr	r3, [pc, #136]	; (800027c <GPIO_PCLK+0xfc>)
 80001f4:	699b      	ldr	r3, [r3, #24]
 80001f6:	4a21      	ldr	r2, [pc, #132]	; (800027c <GPIO_PCLK+0xfc>)
 80001f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001fc:	6193      	str	r3, [r2, #24]
}
 80001fe:	e035      	b.n	800026c <GPIO_PCLK+0xec>
	      if(pGPIOx == GPIOA)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4a1d      	ldr	r2, [pc, #116]	; (8000278 <GPIO_PCLK+0xf8>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d106      	bne.n	8000216 <GPIO_PCLK+0x96>
	    	  GPIOA_PCLK_DIS();
 8000208:	4b1c      	ldr	r3, [pc, #112]	; (800027c <GPIO_PCLK+0xfc>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a1b      	ldr	r2, [pc, #108]	; (800027c <GPIO_PCLK+0xfc>)
 800020e:	f023 0304 	bic.w	r3, r3, #4
 8000212:	6193      	str	r3, [r2, #24]
}
 8000214:	e02a      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOB)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a19      	ldr	r2, [pc, #100]	; (8000280 <GPIO_PCLK+0x100>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIO_PCLK+0xac>
	    	  GPIOB_PCLK_DIS();
 800021e:	4b17      	ldr	r3, [pc, #92]	; (800027c <GPIO_PCLK+0xfc>)
 8000220:	699b      	ldr	r3, [r3, #24]
 8000222:	4a16      	ldr	r2, [pc, #88]	; (800027c <GPIO_PCLK+0xfc>)
 8000224:	f023 0308 	bic.w	r3, r3, #8
 8000228:	6193      	str	r3, [r2, #24]
}
 800022a:	e01f      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOC)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a15      	ldr	r2, [pc, #84]	; (8000284 <GPIO_PCLK+0x104>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <GPIO_PCLK+0xc2>
	    	  GPIOC_PCLK_DIS();
 8000234:	4b11      	ldr	r3, [pc, #68]	; (800027c <GPIO_PCLK+0xfc>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	4a10      	ldr	r2, [pc, #64]	; (800027c <GPIO_PCLK+0xfc>)
 800023a:	f023 0310 	bic.w	r3, r3, #16
 800023e:	6193      	str	r3, [r2, #24]
}
 8000240:	e014      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOD)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a10      	ldr	r2, [pc, #64]	; (8000288 <GPIO_PCLK+0x108>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <GPIO_PCLK+0xd8>
	    	  GPIOD_PCLK_DIS();
 800024a:	4b0c      	ldr	r3, [pc, #48]	; (800027c <GPIO_PCLK+0xfc>)
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	4a0b      	ldr	r2, [pc, #44]	; (800027c <GPIO_PCLK+0xfc>)
 8000250:	f023 0320 	bic.w	r3, r3, #32
 8000254:	6193      	str	r3, [r2, #24]
}
 8000256:	e009      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOE)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a0c      	ldr	r2, [pc, #48]	; (800028c <GPIO_PCLK+0x10c>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d105      	bne.n	800026c <GPIO_PCLK+0xec>
	    	  GPIOE_PCLK_DIS();
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <GPIO_PCLK+0xfc>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a05      	ldr	r2, [pc, #20]	; (800027c <GPIO_PCLK+0xfc>)
 8000266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800026a:	6193      	str	r3, [r2, #24]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40010800 	.word	0x40010800
 800027c:	40021000 	.word	0x40021000
 8000280:	40010c00 	.word	0x40010c00
 8000284:	40011000 	.word	0x40011000
 8000288:	40011400 	.word	0x40011400
 800028c:	40011800 	.word	0x40011800

08000290 <GPIO_Init>:

/*
 * Initializes the GPIOx with the pGPIOHandle.
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

	//Enable the Clock first .  //I configured this setting inside the Init function because user could forget to enable the clock:)
	GPIO_PCLK(pGPIOHandle->pGPIOx, ENABLE);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2101      	movs	r1, #1
 800029e:	4618      	mov	r0, r3
 80002a0:	f7ff ff6e 	bl	8000180 <GPIO_PCLK>

	//currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);

	/**************************************************************************************************************/
	//INTERRUPT MODE CONFIG // CHECK FIRST BELOW CONDITION FOR INTERRUPT MODES
	if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode > GPIO_MODE_AF_OD)// It means that if one of the mode is in interrupt modes or not.
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	2b1c      	cmp	r3, #28
 80002aa:	f240 809c 	bls.w	80003e6 <GPIO_Init+0x156>
	{
		/*1. Configure the triggering selection*/
		if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_IT_RT) {
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	2b24      	cmp	r3, #36	; 0x24
 80002b4:	d117      	bne.n	80002e6 <GPIO_Init+0x56>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Set the RTRS reg
 80002b6:	4b99      	ldr	r3, [pc, #612]	; (800051c <GPIO_Init+0x28c>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	6852      	ldr	r2, [r2, #4]
 80002be:	2101      	movs	r1, #1
 80002c0:	fa01 f202 	lsl.w	r2, r1, r2
 80002c4:	4611      	mov	r1, r2
 80002c6:	4a95      	ldr	r2, [pc, #596]	; (800051c <GPIO_Init+0x28c>)
 80002c8:	430b      	orrs	r3, r1
 80002ca:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clear the FTRS reg
 80002cc:	4b93      	ldr	r3, [pc, #588]	; (800051c <GPIO_Init+0x28c>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	6852      	ldr	r2, [r2, #4]
 80002d4:	2101      	movs	r1, #1
 80002d6:	fa01 f202 	lsl.w	r2, r1, r2
 80002da:	43d2      	mvns	r2, r2
 80002dc:	4611      	mov	r1, r2
 80002de:	4a8f      	ldr	r2, [pc, #572]	; (800051c <GPIO_Init+0x28c>)
 80002e0:	400b      	ands	r3, r1
 80002e2:	60d3      	str	r3, [r2, #12]
 80002e4:	e035      	b.n	8000352 <GPIO_Init+0xc2>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_IT_FT) {
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	2b44      	cmp	r3, #68	; 0x44
 80002ec:	d117      	bne.n	800031e <GPIO_Init+0x8e>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Set the FTRS reg
 80002ee:	4b8b      	ldr	r3, [pc, #556]	; (800051c <GPIO_Init+0x28c>)
 80002f0:	68db      	ldr	r3, [r3, #12]
 80002f2:	687a      	ldr	r2, [r7, #4]
 80002f4:	6852      	ldr	r2, [r2, #4]
 80002f6:	2101      	movs	r1, #1
 80002f8:	fa01 f202 	lsl.w	r2, r1, r2
 80002fc:	4611      	mov	r1, r2
 80002fe:	4a87      	ldr	r2, [pc, #540]	; (800051c <GPIO_Init+0x28c>)
 8000300:	430b      	orrs	r3, r1
 8000302:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clear the RTRS reg
 8000304:	4b85      	ldr	r3, [pc, #532]	; (800051c <GPIO_Init+0x28c>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	6852      	ldr	r2, [r2, #4]
 800030c:	2101      	movs	r1, #1
 800030e:	fa01 f202 	lsl.w	r2, r1, r2
 8000312:	43d2      	mvns	r2, r2
 8000314:	4611      	mov	r1, r2
 8000316:	4a81      	ldr	r2, [pc, #516]	; (800051c <GPIO_Init+0x28c>)
 8000318:	400b      	ands	r3, r1
 800031a:	6093      	str	r3, [r2, #8]
 800031c:	e019      	b.n	8000352 <GPIO_Init+0xc2>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_IT_RFT) {
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	2b84      	cmp	r3, #132	; 0x84
 8000324:	d115      	bne.n	8000352 <GPIO_Init+0xc2>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Set the RTRS reg
 8000326:	4b7d      	ldr	r3, [pc, #500]	; (800051c <GPIO_Init+0x28c>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	6852      	ldr	r2, [r2, #4]
 800032e:	2101      	movs	r1, #1
 8000330:	fa01 f202 	lsl.w	r2, r1, r2
 8000334:	4611      	mov	r1, r2
 8000336:	4a79      	ldr	r2, [pc, #484]	; (800051c <GPIO_Init+0x28c>)
 8000338:	430b      	orrs	r3, r1
 800033a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Set the FTRS reg
 800033c:	4b77      	ldr	r3, [pc, #476]	; (800051c <GPIO_Init+0x28c>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	6852      	ldr	r2, [r2, #4]
 8000344:	2101      	movs	r1, #1
 8000346:	fa01 f202 	lsl.w	r2, r1, r2
 800034a:	4611      	mov	r1, r2
 800034c:	4a73      	ldr	r2, [pc, #460]	; (800051c <GPIO_Init+0x28c>)
 800034e:	430b      	orrs	r3, r1
 8000350:	60d3      	str	r3, [r2, #12]

		}

		/*2. Configuration of the GPIO Port Selection in AFIO->EXTICR*/
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_Pin / 4; //Created for deciding which EXTICR register
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	089b      	lsrs	r3, r3, #2
 8000358:	73fb      	strb	r3, [r7, #15]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_Pin % 4; //Created for deciding which pins(4 pin) inside the selected EXTICR register
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	b2db      	uxtb	r3, r3
 8000360:	f003 0303 	and.w	r3, r3, #3
 8000364:	73bb      	strb	r3, [r7, #14]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a6d      	ldr	r2, [pc, #436]	; (8000520 <GPIO_Init+0x290>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d01d      	beq.n	80003ac <GPIO_Init+0x11c>
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a6b      	ldr	r2, [pc, #428]	; (8000524 <GPIO_Init+0x294>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d016      	beq.n	80003a8 <GPIO_Init+0x118>
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a6a      	ldr	r2, [pc, #424]	; (8000528 <GPIO_Init+0x298>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d00f      	beq.n	80003a4 <GPIO_Init+0x114>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a68      	ldr	r2, [pc, #416]	; (800052c <GPIO_Init+0x29c>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d008      	beq.n	80003a0 <GPIO_Init+0x110>
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4a67      	ldr	r2, [pc, #412]	; (8000530 <GPIO_Init+0x2a0>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d101      	bne.n	800039c <GPIO_Init+0x10c>
 8000398:	2304      	movs	r3, #4
 800039a:	e008      	b.n	80003ae <GPIO_Init+0x11e>
 800039c:	2300      	movs	r3, #0
 800039e:	e006      	b.n	80003ae <GPIO_Init+0x11e>
 80003a0:	2303      	movs	r3, #3
 80003a2:	e004      	b.n	80003ae <GPIO_Init+0x11e>
 80003a4:	2302      	movs	r3, #2
 80003a6:	e002      	b.n	80003ae <GPIO_Init+0x11e>
 80003a8:	2301      	movs	r3, #1
 80003aa:	e000      	b.n	80003ae <GPIO_Init+0x11e>
 80003ac:	2300      	movs	r3, #0
 80003ae:	737b      	strb	r3, [r7, #13]
		AFIO_PCLK_EN(); //Clock enabled first.
 80003b0:	4b60      	ldr	r3, [pc, #384]	; (8000534 <GPIO_Init+0x2a4>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a5f      	ldr	r2, [pc, #380]	; (8000534 <GPIO_Init+0x2a4>)
 80003b6:	f043 0301 	orr.w	r3, r3, #1
 80003ba:	6193      	str	r3, [r2, #24]
		AFIO->EXTICR[temp1] = portcode << (temp2 * 4);
 80003bc:	7b7a      	ldrb	r2, [r7, #13]
 80003be:	7bbb      	ldrb	r3, [r7, #14]
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	fa02 f103 	lsl.w	r1, r2, r3
 80003c6:	4a5c      	ldr	r2, [pc, #368]	; (8000538 <GPIO_Init+0x2a8>)
 80003c8:	7bfb      	ldrb	r3, [r7, #15]
 80003ca:	3302      	adds	r3, #2
 80003cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		/*3. Enable the EXTI from interrupt mask register (EXTI->IMR)*/
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin);
 80003d0:	4b52      	ldr	r3, [pc, #328]	; (800051c <GPIO_Init+0x28c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	6852      	ldr	r2, [r2, #4]
 80003d8:	2101      	movs	r1, #1
 80003da:	fa01 f202 	lsl.w	r2, r1, r2
 80003de:	4611      	mov	r1, r2
 80003e0:	4a4e      	ldr	r2, [pc, #312]	; (800051c <GPIO_Init+0x28c>)
 80003e2:	430b      	orrs	r3, r1
 80003e4:	6013      	str	r3, [r2, #0]

	}
	/**************************************************************************************************************/


	uint32_t tempmode=0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	60bb      	str	r3, [r7, #8]

	// 1. Configure the mode, first define whether the mode is output or not.
	if((pGPIOHandle->GPIO_PinConfig.GPIO_Mode) & (0x10))//All output mode's 5th bit is 1 (ex: 0001 0100)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	f003 0310 	and.w	r3, r3, #16
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d006      	beq.n	8000404 <GPIO_Init+0x174>
	{
		pGPIOHandle->GPIO_PinConfig.GPIO_Mode |= pGPIOHandle->GPIO_PinConfig.GPIO_Speed; //Entegrating Output mode with speed
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	689a      	ldr	r2, [r3, #8]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	68db      	ldr	r3, [r3, #12]
 80003fe:	431a      	orrs	r2, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	609a      	str	r2, [r3, #8]
	}

	//2. Configure the mode for CRL
	if(pGPIOHandle->GPIO_PinConfig.GPIO_Pin <=7) //Below the pin number 7 is in CRL register
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	2b07      	cmp	r3, #7
 800040a:	d861      	bhi.n	80004d0 <GPIO_Init+0x240>
	{

	    /* Reset the corresponding ODR bit to configure pull-down activation */
	    if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INPUT_PD)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	2b28      	cmp	r3, #40	; 0x28
 8000412:	d11b      	bne.n	800044c <GPIO_Init+0x1bc>
	    {
	    	pGPIOHandle->pGPIOx->BRR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	695a      	ldr	r2, [r3, #20]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	2101      	movs	r1, #1
 8000420:	fa01 f303 	lsl.w	r3, r1, r3
 8000424:	43db      	mvns	r3, r3
 8000426:	4619      	mov	r1, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	400a      	ands	r2, r1
 800042e:	615a      	str	r2, [r3, #20]
	    	pGPIOHandle->pGPIOx->BRR |= ( 1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	695a      	ldr	r2, [r3, #20]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	2101      	movs	r1, #1
 800043c:	fa01 f303 	lsl.w	r3, r1, r3
 8000440:	4619      	mov	r1, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	430a      	orrs	r2, r1
 8000448:	615a      	str	r2, [r3, #20]
 800044a:	e01e      	b.n	800048a <GPIO_Init+0x1fa>
	    }
	    else
	    {
	      /* Set the corresponding ODR bit to configure pull-up activation */
	      if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INPUT_PU)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	2b48      	cmp	r3, #72	; 0x48
 8000452:	d11a      	bne.n	800048a <GPIO_Init+0x1fa>
	      {
	  		  pGPIOHandle->pGPIOx->BSRR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clearing the corresponding bits.
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	691a      	ldr	r2, [r3, #16]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	2101      	movs	r1, #1
 8000460:	fa01 f303 	lsl.w	r3, r1, r3
 8000464:	43db      	mvns	r3, r3
 8000466:	4619      	mov	r1, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	400a      	ands	r2, r1
 800046e:	611a      	str	r2, [r3, #16]
	    	  pGPIOHandle->pGPIOx->BSRR |= ( 1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	691a      	ldr	r2, [r3, #16]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	2101      	movs	r1, #1
 800047c:	fa01 f303 	lsl.w	r3, r1, r3
 8000480:	4619      	mov	r1, r3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	430a      	orrs	r2, r1
 8000488:	611a      	str	r2, [r3, #16]
	      }
	    }

		tempmode |= (((pGPIOHandle->GPIO_PinConfig.GPIO_Mode) & (0x0F)) <<  (4 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin) ); // Getting the last 4 bits of GPIO_Mode to shift them 4 times left properly
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	f003 020f 	and.w	r2, r3, #15
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	fa02 f303 	lsl.w	r3, r2, r3
 800049c:	68ba      	ldr	r2, [r7, #8]
 800049e:	4313      	orrs	r3, r2
 80004a0:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->CRL &= ~( 0xF << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin) ); // Clearing the corresponding bits first.
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	210f      	movs	r1, #15
 80004b0:	fa01 f303 	lsl.w	r3, r1, r3
 80004b4:	43db      	mvns	r3, r3
 80004b6:	4619      	mov	r1, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	400a      	ands	r2, r1
 80004be:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= tempmode;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	6819      	ldr	r1, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	68ba      	ldr	r2, [r7, #8]
 80004cc:	430a      	orrs	r2, r1
 80004ce:	601a      	str	r2, [r3, #0]
	}


	//3. Configure the mode for CRH
	if(pGPIOHandle->GPIO_PinConfig.GPIO_Pin >7) //Above the pin number 7 is in CRH register
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	2b07      	cmp	r3, #7
 80004d6:	d975      	bls.n	80005c4 <GPIO_Init+0x334>
	{
		tempmode=0;
 80004d8:	2300      	movs	r3, #0
 80004da:	60bb      	str	r3, [r7, #8]

	    /* Reset the corresponding ODR bit to configure pull-down activation(Told in Reference Manual) */
	    if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INPUT_PD)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	2b28      	cmp	r3, #40	; 0x28
 80004e2:	d12b      	bne.n	800053c <GPIO_Init+0x2ac>
	    {
	    	pGPIOHandle->pGPIOx->BRR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clearing the corresponding bits.
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	695a      	ldr	r2, [r3, #20]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	2101      	movs	r1, #1
 80004f0:	fa01 f303 	lsl.w	r3, r1, r3
 80004f4:	43db      	mvns	r3, r3
 80004f6:	4619      	mov	r1, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	400a      	ands	r2, r1
 80004fe:	615a      	str	r2, [r3, #20]
	    	pGPIOHandle->pGPIOx->BRR |= ( 1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	695a      	ldr	r2, [r3, #20]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	2101      	movs	r1, #1
 800050c:	fa01 f303 	lsl.w	r3, r1, r3
 8000510:	4619      	mov	r1, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	430a      	orrs	r2, r1
 8000518:	615a      	str	r2, [r3, #20]
 800051a:	e02e      	b.n	800057a <GPIO_Init+0x2ea>
 800051c:	40010400 	.word	0x40010400
 8000520:	40010800 	.word	0x40010800
 8000524:	40010c00 	.word	0x40010c00
 8000528:	40011000 	.word	0x40011000
 800052c:	40011400 	.word	0x40011400
 8000530:	40011800 	.word	0x40011800
 8000534:	40021000 	.word	0x40021000
 8000538:	40010000 	.word	0x40010000
	    }
	    else
	    {
	      /* Set the corresponding ODR bit to configure pull-up activation(Told in Reference Manual) */
	      if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INPUT_PU)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	2b48      	cmp	r3, #72	; 0x48
 8000542:	d11a      	bne.n	800057a <GPIO_Init+0x2ea>
	      {
	    	  pGPIOHandle->pGPIOx->BSRR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clearing the corresponding bits.
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	691a      	ldr	r2, [r3, #16]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	2101      	movs	r1, #1
 8000550:	fa01 f303 	lsl.w	r3, r1, r3
 8000554:	43db      	mvns	r3, r3
 8000556:	4619      	mov	r1, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	400a      	ands	r2, r1
 800055e:	611a      	str	r2, [r3, #16]
	    	  pGPIOHandle->pGPIOx->BSRR |= ( 1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	691a      	ldr	r2, [r3, #16]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	2101      	movs	r1, #1
 800056c:	fa01 f303 	lsl.w	r3, r1, r3
 8000570:	4619      	mov	r1, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	430a      	orrs	r2, r1
 8000578:	611a      	str	r2, [r3, #16]
	      }
	    }

		tempmode |= (((pGPIOHandle->GPIO_PinConfig.GPIO_Mode) & (0x0F)) <<  (4 * ((pGPIOHandle->GPIO_PinConfig.GPIO_Pin) - 8)) ); // Getting the last 4 bits of GPIO_Mode to shift them 4 times left properly. Between 8-16 pin number
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	f003 020f 	and.w	r2, r3, #15
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	3b08      	subs	r3, #8
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	fa02 f303 	lsl.w	r3, r2, r3
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	4313      	orrs	r3, r2
 8000592:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->CRH &= ~( 0xF << (4 * ((pGPIOHandle->GPIO_PinConfig.GPIO_Pin) - 8)) ); // Clearing the corresponding bits first.
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	685a      	ldr	r2, [r3, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	3b08      	subs	r3, #8
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	210f      	movs	r1, #15
 80005a4:	fa01 f303 	lsl.w	r3, r1, r3
 80005a8:	43db      	mvns	r3, r3
 80005aa:	4619      	mov	r1, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	400a      	ands	r2, r1
 80005b2:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= tempmode ;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	6859      	ldr	r1, [r3, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	430a      	orrs	r2, r1
 80005c2:	605a      	str	r2, [r3, #4]

	}

}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <GPIO_ReadFromInputPin>:
}



uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	70fb      	strb	r3, [r7, #3]
	uint8_t value=0;
 80005d8:	2300      	movs	r3, #0
 80005da:	73fb      	strb	r3, [r7, #15]
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);// Shift the corresponding reg value amount of pin number
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	689a      	ldr	r2, [r3, #8]
 80005e0:	78fb      	ldrb	r3, [r7, #3]
 80005e2:	fa22 f303 	lsr.w	r3, r2, r3
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	f003 0301 	and.w	r3, r3, #1
 80005ec:	73fb      	strb	r3, [r7, #15]
													  //and take the last bit with AND operator(masking)
	return value;
 80005ee:	7bfb      	ldrb	r3, [r7, #15]

}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr

080005fa <GPIO_ToggleOutputPin>:
	pGPIOx->ODR = Value;

}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b083      	sub	sp, #12
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
 8000602:	460b      	mov	r3, r1
 8000604:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1<<PinNumber);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	78fa      	ldrb	r2, [r7, #3]
 800060c:	2101      	movs	r1, #1
 800060e:	fa01 f202 	lsl.w	r2, r1, r2
 8000612:	405a      	eors	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	60da      	str	r2, [r3, #12]

}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
	...

08000624 <RCC_GetPCLK1Value>:

/*
 * Generating PERIPH CLOCK value for APB1 Bus
 */
uint32_t RCC_GetPCLK1Value(void) // Verify this function from Datasheet & Reference Man
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
	00: HSI oscillator used as system clock
	01: HSE oscillator used as system clock
	10: PLL used as system clock
	11: not applicable
	*/
	clksrc = ((RCC->CFGR >> 2) & 0x3); // Bringing those 2 bits to lsb position and mask
 800062a:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <RCC_GetPCLK1Value+0x9c>)
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	089b      	lsrs	r3, r3, #2
 8000630:	b2db      	uxtb	r3, r3
 8000632:	f003 0303 	and.w	r3, r3, #3
 8000636:	723b      	strb	r3, [r7, #8]
	if(clksrc == 0) // Look at the reference manual
 8000638:	7a3b      	ldrb	r3, [r7, #8]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d102      	bne.n	8000644 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 800063e:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <RCC_GetPCLK1Value+0xa0>)
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	e00b      	b.n	800065c <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000644:	7a3b      	ldrb	r3, [r7, #8]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d102      	bne.n	8000650 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <RCC_GetPCLK1Value+0xa4>)
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	e005      	b.n	800065c <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8000650:	7a3b      	ldrb	r3, [r7, #8]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d102      	bne.n	800065c <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock(); // PLL used as system clock
 8000656:	f000 f88d 	bl	8000774 <RCC_GetPLLOutputClock>
 800065a:	60f8      	str	r0, [r7, #12]
	}

	//for AHB
	temp = ((RCC->CFGR >> 4 ) & 0xF); // Bringing those 4 bits to lsb position and mask
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <RCC_GetPCLK1Value+0x9c>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	091b      	lsrs	r3, r3, #4
 8000662:	b2db      	uxtb	r3, r3
 8000664:	f003 030f 	and.w	r3, r3, #15
 8000668:	71fb      	strb	r3, [r7, #7]
	if(temp < 8)// Look at the reference manual
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b07      	cmp	r3, #7
 800066e:	d802      	bhi.n	8000676 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	817b      	strh	r3, [r7, #10]
 8000674:	e005      	b.n	8000682 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	3b08      	subs	r3, #8
 800067a:	4a14      	ldr	r2, [pc, #80]	; (80006cc <RCC_GetPCLK1Value+0xa8>)
 800067c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000680:	817b      	strh	r3, [r7, #10]
	}



	//APB1
	temp = ((RCC->CFGR >> 10 ) & 0x7);// Bringing those 3 bits to lsb position and mask
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <RCC_GetPCLK1Value+0x9c>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	0a9b      	lsrs	r3, r3, #10
 8000688:	b2db      	uxtb	r3, r3
 800068a:	f003 0307 	and.w	r3, r3, #7
 800068e:	71fb      	strb	r3, [r7, #7]
	if(temp < 4)// Look at the reference manual
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	2b03      	cmp	r3, #3
 8000694:	d802      	bhi.n	800069c <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000696:	2301      	movs	r3, #1
 8000698:	727b      	strb	r3, [r7, #9]
 800069a:	e004      	b.n	80006a6 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	3b04      	subs	r3, #4
 80006a0:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <RCC_GetPCLK1Value+0xac>)
 80006a2:	5cd3      	ldrb	r3, [r2, r3]
 80006a4:	727b      	strb	r3, [r7, #9]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 80006a6:	897b      	ldrh	r3, [r7, #10]
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80006ae:	7a7b      	ldrb	r3, [r7, #9]
 80006b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b4:	603b      	str	r3, [r7, #0]

	return pclk1;
 80006b6:	683b      	ldr	r3, [r7, #0]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000
 80006c4:	00f42400 	.word	0x00f42400
 80006c8:	007a1200 	.word	0x007a1200
 80006cc:	20000000 	.word	0x20000000
 80006d0:	20000014 	.word	0x20000014

080006d4 <RCC_GetPCLK2Value>:

/*
 * Generating PERIPH CLOCK value for APB1 Bus
 */
uint32_t RCC_GetPCLK2Value(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 80006de:	4b20      	ldr	r3, [pc, #128]	; (8000760 <RCC_GetPCLK2Value+0x8c>)
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	089b      	lsrs	r3, r3, #2
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	f003 0303 	and.w	r3, r3, #3
 80006ea:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 80006ec:	7a7b      	ldrb	r3, [r7, #9]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d102      	bne.n	80006f8 <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <RCC_GetPCLK2Value+0x90>)
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	e001      	b.n	80006fc <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <RCC_GetPCLK2Value+0x94>)
 80006fa:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <RCC_GetPCLK2Value+0x8c>)
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	091b      	lsrs	r3, r3, #4
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b07      	cmp	r3, #7
 800070c:	d802      	bhi.n	8000714 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 800070e:	2301      	movs	r3, #1
 8000710:	72fb      	strb	r3, [r7, #11]
 8000712:	e005      	b.n	8000720 <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3b08      	subs	r3, #8
 8000718:	4a14      	ldr	r2, [pc, #80]	; (800076c <RCC_GetPCLK2Value+0x98>)
 800071a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800071e:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <RCC_GetPCLK2Value+0x8c>)
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	0b5b      	lsrs	r3, r3, #13
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d802      	bhi.n	8000738 <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 8000732:	2301      	movs	r3, #1
 8000734:	72bb      	strb	r3, [r7, #10]
 8000736:	e004      	b.n	8000742 <RCC_GetPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b04      	subs	r3, #4
 800073c:	4a0c      	ldr	r2, [pc, #48]	; (8000770 <RCC_GetPCLK2Value+0x9c>)
 800073e:	5cd3      	ldrb	r3, [r2, r3]
 8000740:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	fbb2 f2f3 	udiv	r2, r2, r3
 800074a:	7abb      	ldrb	r3, [r7, #10]
 800074c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000750:	603b      	str	r3, [r7, #0]

	return pclk2;
 8000752:	683b      	ldr	r3, [r7, #0]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000
 8000764:	00f42400 	.word	0x00f42400
 8000768:	007a1200 	.word	0x007a1200
 800076c:	20000000 	.word	0x20000000
 8000770:	20000014 	.word	0x20000014

08000774 <RCC_GetPLLOutputClock>:

/*
 * We are not going to use PLL for system clock. This is only a demonstration.
 */
uint32_t  RCC_GetPLLOutputClock()
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
	return 0;
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
	...

08000784 <USART_SetBaudRate>:
/*
 * We need to implement this API first in order to use some other APIs below.
 * RCC_GetPCLK1Value() and RCC_GetPCLK2Value() APIs implemented in "rcc driver".
 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values, from Reference Manual
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a2f      	ldr	r2, [pc, #188]	; (8000854 <USART_SetBaudRate+0xd0>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d103      	bne.n	80007a2 <USART_SetBaudRate+0x1e>
  {
	   //USART1 is hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 800079a:	f7ff ff9b 	bl	80006d4 <RCC_GetPCLK2Value>
 800079e:	61f8      	str	r0, [r7, #28]
 80007a0:	e002      	b.n	80007a8 <USART_SetBaudRate+0x24>
  }else
  {
	  //Other USARTs are hanging on APB1 bus, we are not going to use actually.
	   PCLKx = RCC_GetPCLK1Value();
 80007a2:	f7ff ff3f 	bl	8000624 <RCC_GetPCLK1Value>
 80007a6:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d00b      	beq.n	80007cc <USART_SetBaudRate+0x48>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate)); // This formula derived from the course. 100/8 becomes 25/2 . We expand with 100 only to make whole number, I mean to get rid of the fraction part
 80007b4:	69fa      	ldr	r2, [r7, #28]
 80007b6:	4613      	mov	r3, r2
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	4413      	add	r3, r2
 80007bc:	009a      	lsls	r2, r3, #2
 80007be:	441a      	add	r2, r3
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	e00a      	b.n	80007e2 <USART_SetBaudRate+0x5e>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 80007cc:	69fa      	ldr	r2, [r7, #28]
 80007ce:	4613      	mov	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	4413      	add	r3, r2
 80007d4:	009a      	lsls	r2, r3, #2
 80007d6:	441a      	add	r2, r3
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e0:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part, it is going to be in HEX format. Diveded by 100 cause we expanded it above
  M_part = usartdiv/100;
 80007e2:	69bb      	ldr	r3, [r7, #24]
 80007e4:	4a1c      	ldr	r2, [pc, #112]	; (8000858 <USART_SetBaudRate+0xd4>)
 80007e6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ea:	095b      	lsrs	r3, r3, #5
 80007ec:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	011b      	lsls	r3, r3, #4
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2264      	movs	r2, #100	; 0x64
 80007fc:	fb02 f303 	mul.w	r3, r2, r3
 8000800:	69ba      	ldr	r2, [r7, #24]
 8000802:	1ad3      	subs	r3, r2, r3
 8000804:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	68db      	ldr	r3, [r3, #12]
 800080a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d00a      	beq.n	8000828 <USART_SetBaudRate+0xa4>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07); //adding 50 explained in 256. video of the course
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	3332      	adds	r3, #50	; 0x32
 8000818:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <USART_SetBaudRate+0xd4>)
 800081a:	fba2 2303 	umull	r2, r3, r2, r3
 800081e:	095b      	lsrs	r3, r3, #5
 8000820:	f003 0307 	and.w	r3, r3, #7
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	e009      	b.n	800083c <USART_SetBaudRate+0xb8>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	011b      	lsls	r3, r3, #4
 800082c:	3332      	adds	r3, #50	; 0x32
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <USART_SetBaudRate+0xd4>)
 8000830:	fba2 2303 	umull	r2, r3, r2, r3
 8000834:	095b      	lsrs	r3, r3, #5
 8000836:	f003 030f 	and.w	r3, r3, #15
 800083a:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	4313      	orrs	r3, r2
 8000842:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	693a      	ldr	r2, [r7, #16]
 8000848:	609a      	str	r2, [r3, #8]
}
 800084a:	bf00      	nop
 800084c:	3720      	adds	r7, #32
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40013800 	.word	0x40013800
 8000858:	51eb851f 	.word	0x51eb851f

0800085c <USART_PCLK>:
/*
 * Peripheral Clock Setup
 * I used only USART1, So it is simple.
 */
void USART_PCLK(USART_RegDef_t *pUSARTx, uint8_t EnorDis)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	70fb      	strb	r3, [r7, #3]

	  if (EnorDis != DISABLE)
 8000868:	78fb      	ldrb	r3, [r7, #3]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d006      	beq.n	800087c <USART_PCLK+0x20>
	  {
		  USART1_PCLK_EN();
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <USART_PCLK+0x38>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <USART_PCLK+0x38>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000878:	6193      	str	r3, [r2, #24]
	  }else
	  {
		  USART1_PCLK_DIS();
	  }
}
 800087a:	e005      	b.n	8000888 <USART_PCLK+0x2c>
		  USART1_PCLK_DIS();
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <USART_PCLK+0x38>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <USART_PCLK+0x38>)
 8000882:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000886:	6193      	str	r3, [r2, #24]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000

08000898 <USART_Init>:

/*
 * Initializes the USARTx with the pUSARTHandle.
 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Enable the Clock first .  //I configured this setting inside the Init function because user could forget to enable the clock:)
	 USART_PCLK(pUSARTHandle->pUSARTx, ENABLE);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2101      	movs	r1, #1
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ffd6 	bl	800085c <USART_PCLK>


	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USARTConfig.USART_Mode == USART_MODE_RX)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	791b      	ldrb	r3, [r3, #4]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d104      	bne.n	80008c2 <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f043 0304 	orr.w	r3, r3, #4
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	e010      	b.n	80008e4 <USART_Init+0x4c>
	}else if (pUSARTHandle->USARTConfig.USART_Mode == USART_MODE_TX)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	791b      	ldrb	r3, [r3, #4]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d104      	bne.n	80008d4 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	f043 0308 	orr.w	r3, r3, #8
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	e007      	b.n	80008e4 <USART_Init+0x4c>

	}else if (pUSARTHandle->USARTConfig.USART_Mode == USART_MODE_TXRX)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	791b      	ldrb	r3, [r3, #4]
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d103      	bne.n	80008e4 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f043 030c 	orr.w	r3, r3, #12
 80008e2:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USARTConfig.USART_WordLength << USART_CR1_M ;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	7b5b      	ldrb	r3, [r3, #13]
 80008e8:	031b      	lsls	r3, r3, #12
 80008ea:	461a      	mov	r2, r3
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USARTConfig.USART_ParityControl == USART_PARITY_EN_EVEN)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	7b9b      	ldrb	r3, [r3, #14]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d104      	bne.n	8000904 <USART_Init+0x6c>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	e00b      	b.n	800091c <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USARTConfig.USART_ParityControl == USART_PARITY_EN_ODD )
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	7b9b      	ldrb	r3, [r3, #14]
 8000908:	2b02      	cmp	r3, #2
 800090a:	d107      	bne.n	800091c <USART_Init+0x84>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000912:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800091a:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	68fa      	ldr	r2, [r7, #12]
 8000922:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USARTConfig.USART_StopBits << USART_CR2_STOP;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	7b1b      	ldrb	r3, [r3, #12]
 800092c:	031b      	lsls	r3, r3, #12
 800092e:	461a      	mov	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4313      	orrs	r3, r2
 8000934:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USARTConfig.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	7bdb      	ldrb	r3, [r3, #15]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d104      	bne.n	8000954 <USART_Init+0xbc>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	e014      	b.n	800097e <USART_Init+0xe6>


	}else if (pUSARTHandle->USARTConfig.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	7bdb      	ldrb	r3, [r3, #15]
 8000958:	2b02      	cmp	r3, #2
 800095a:	d104      	bne.n	8000966 <USART_Init+0xce>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	e00b      	b.n	800097e <USART_Init+0xe6>

	}else if (pUSARTHandle->USARTConfig.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7bdb      	ldrb	r3, [r3, #15]
 800096a:	2b03      	cmp	r3, #3
 800096c:	d107      	bne.n	800097e <USART_Init+0xe6>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000974:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800097c:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USARTConfig.USART_Baud);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	4619      	mov	r1, r3
 8000990:	4610      	mov	r0, r2
 8000992:	f7ff fef7 	bl	8000784 <USART_SetBaudRate>

}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <USART_PeriphControl>:

/*
 * USART Peripheral Enable or Disable Configuration API
 */
void USART_PeriphControl(USART_RegDef_t *pUSARTx, uint8_t EnorDis)
{
 800099e:	b480      	push	{r7}
 80009a0:	b083      	sub	sp, #12
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
 80009a6:	460b      	mov	r3, r1
 80009a8:	70fb      	strb	r3, [r7, #3]
	if(EnorDis == ENABLE)
 80009aa:	78fb      	ldrb	r3, [r7, #3]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d106      	bne.n	80009be <USART_PeriphControl+0x20>
	{
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	60da      	str	r2, [r3, #12]
	}else
	{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}

}
 80009bc:	e005      	b.n	80009ca <USART_PeriphControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	60da      	str	r2, [r3, #12]
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <USART_GetFlagStatus>:

/*
 * USART Peripheral returns the Flag status in SR
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t FlagName)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & FlagName)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	4013      	ands	r3, r2
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <USART_GetFlagStatus+0x1c>
    {
    	return FLAG_SET;
 80009ec:	2301      	movs	r3, #1
 80009ee:	e000      	b.n	80009f2 <USART_GetFlagStatus+0x1e>
    }

   return FLAG_RESET;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <USART_SendData>:

/*
 * Data Send with blocking(polling) Method
 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

   // For loop until no data remain
	for(uint32_t i = 0 ; i < Len; i++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	e031      	b.n	8000a72 <USART_SendData+0x76>
	{

		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE)); //Check transmit buffer empty or not! Wait until TXE is set!!
 8000a0e:	bf00      	nop
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2180      	movs	r1, #128	; 0x80
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ffdc 	bl	80009d4 <USART_GetFlagStatus>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d0f6      	beq.n	8000a10 <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USARTConfig.USART_WordLength == USART_WORDLEN_9BITS)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	7b5b      	ldrb	r3, [r3, #13]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d118      	bne.n	8000a5c <USART_SendData+0x60>
		{
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF); // Masking the last 9 bits
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a3c:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USARTConfig.USART_ParityControl == USART_PARITY_DISABLE)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	7b9b      	ldrb	r3, [r3, #14]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d106      	bne.n	8000a54 <USART_SendData+0x58>
			{
				//No parity is used in this transfer , so 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	e00b      	b.n	8000a6c <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	3301      	adds	r3, #1
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	e007      	b.n	8000a6c <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	781a      	ldrb	r2, [r3, #0]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d3c9      	bcc.n	8000a0e <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000a7a:	bf00      	nop
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2140      	movs	r1, #64	; 0x40
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ffa6 	bl	80009d4 <USART_GetFlagStatus>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0f6      	beq.n	8000a7c <USART_SendData+0x80>
}
 8000a8e:	bf00      	nop
 8000a90:	bf00      	nop
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <gpioConfig>:
USART_Handle_t USART1Handle; // Define this handle as Global variable because we will use it:)

//some random data
char msg[1024] = "USART Tx testing...\n\r";

void gpioConfig(){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	; 0x30
 8000a9c:	af00      	add	r7, sp, #0

	GPIO_Handle_t  pGPIOusart, GPIOLed, GPIOButton;


	// USART
	pGPIOusart.pGPIOx = GPIOA;
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <gpioConfig+0x74>)
 8000aa0:	623b      	str	r3, [r7, #32]
	pGPIOusart.GPIO_PinConfig.GPIO_Mode = GPIO_MODE_AF_PP; //Push pull configuration for usart bus
 8000aa2:	2318      	movs	r3, #24
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
	pGPIOusart.GPIO_PinConfig.GPIO_Speed = GPIO_SPEED_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c

	//For TX
	pGPIOusart.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_9;
 8000aaa:	2309      	movs	r3, #9
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_Init(&pGPIOusart);
 8000aae:	f107 0320 	add.w	r3, r7, #32
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fbec 	bl	8000290 <GPIO_Init>

	//For RX
	pGPIOusart.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_10;
 8000ab8:	230a      	movs	r3, #10
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_Init(&pGPIOusart);
 8000abc:	f107 0320 	add.w	r3, r7, #32
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fbe5 	bl	8000290 <GPIO_Init>


	//For LED
	GPIOLed.pGPIOx = GPIOB;
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <gpioConfig+0x78>)
 8000ac8:	613b      	str	r3, [r7, #16]
	GPIOLed.GPIO_PinConfig.GPIO_Mode = GPIO_MODE_OUT_PP;
 8000aca:	2310      	movs	r3, #16
 8000acc:	61bb      	str	r3, [r7, #24]
	GPIOLed.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_1;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	617b      	str	r3, [r7, #20]
	GPIOLed.GPIO_PinConfig.GPIO_Speed = GPIO_SPEED_MEDIUM;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	61fb      	str	r3, [r7, #28]
	GPIO_Init(&GPIOLed);
 8000ad6:	f107 0310 	add.w	r3, r7, #16
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fbd8 	bl	8000290 <GPIO_Init>

	GPIOLed.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	617b      	str	r3, [r7, #20]
	GPIO_Init(&GPIOLed);
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fbd1 	bl	8000290 <GPIO_Init>

	//For button
	GPIOButton.pGPIOx = GPIOA;
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <gpioConfig+0x74>)
 8000af0:	603b      	str	r3, [r7, #0]
	GPIOButton.GPIO_PinConfig.GPIO_Mode = GPIO_MODE_INPUT_PD;
 8000af2:	2328      	movs	r3, #40	; 0x28
 8000af4:	60bb      	str	r3, [r7, #8]
	GPIOButton.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
	GPIO_Init(&GPIOButton);
 8000afa:	463b      	mov	r3, r7
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fbc7 	bl	8000290 <GPIO_Init>

}
 8000b02:	bf00      	nop
 8000b04:	3730      	adds	r7, #48	; 0x30
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40010800 	.word	0x40010800
 8000b10:	40010c00 	.word	0x40010c00

08000b14 <usartConfig>:

/*
 * PA9 -->  USART1_TX
 * PA10 --> USART1_RX
 */
void usartConfig(){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0

	//Handle function created as global variable.

	USART1Handle.pUSARTx = USART1 ;
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <usartConfig+0x3c>)
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <usartConfig+0x40>)
 8000b1c:	601a      	str	r2, [r3, #0]
	USART1Handle.USARTConfig.USART_Mode = USART_MODE_TX;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <usartConfig+0x3c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	711a      	strb	r2, [r3, #4]
	USART1Handle.USARTConfig.USART_Baud = USART_STD_BAUD_115200;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <usartConfig+0x3c>)
 8000b26:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b2a:	609a      	str	r2, [r3, #8]
	USART1Handle.USARTConfig.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <usartConfig+0x3c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	73da      	strb	r2, [r3, #15]
	USART1Handle.USARTConfig.USART_ParityControl = USART_PARITY_DISABLE;
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <usartConfig+0x3c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	739a      	strb	r2, [r3, #14]
	USART1Handle.USARTConfig.USART_StopBits = USART_STOPBITS_1;
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <usartConfig+0x3c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	731a      	strb	r2, [r3, #12]
	USART1Handle.USARTConfig.USART_WordLength = USART_WORDLEN_8BITS;
 8000b3e:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <usartConfig+0x3c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	735a      	strb	r2, [r3, #13]

	USART_Init(&USART1Handle);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <usartConfig+0x3c>)
 8000b46:	f7ff fea7 	bl	8000898 <USART_Init>
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000434 	.word	0x20000434
 8000b54:	40013800 	.word	0x40013800

08000b58 <delay>:



void delay(uint32_t time){
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

	while(time--);
 8000b60:	bf00      	nop
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	1e5a      	subs	r2, r3, #1
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d1fa      	bne.n	8000b62 <delay+0xa>

}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <main>:


int main(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0

	gpioConfig();  // GPIO INIT
 8000b7c:	f7ff ff8c 	bl	8000a98 <gpioConfig>
	usartConfig(); // USART INIT
 8000b80:	f7ff ffc8 	bl	8000b14 <usartConfig>

	//Enable the usart peripheral
	USART_PeriphControl(USART1,ENABLE);
 8000b84:	2101      	movs	r1, #1
 8000b86:	480f      	ldr	r0, [pc, #60]	; (8000bc4 <main+0x4c>)
 8000b88:	f7ff ff09 	bl	800099e <USART_PeriphControl>

	while(1)
	{
		delay(500000);
 8000b8c:	480e      	ldr	r0, [pc, #56]	; (8000bc8 <main+0x50>)
 8000b8e:	f7ff ffe3 	bl	8000b58 <delay>
		GPIO_ToggleOutputPin(GPIOB, GPIO_Pin_1);
 8000b92:	2101      	movs	r1, #1
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <main+0x54>)
 8000b96:	f7ff fd30 	bl	80005fa <GPIO_ToggleOutputPin>

		while ( ! (GPIO_ReadFromInputPin(GPIOA, GPIO_Pin_0)) ); // Data will send only if I press the button. Because code will not hanging in "here (while)" when I press the button
 8000b9a:	bf00      	nop
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <main+0x58>)
 8000ba0:	f7ff fd14 	bl	80005cc <GPIO_ReadFromInputPin>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d0f8      	beq.n	8000b9c <main+0x24>

		delay(500000); //small delay for button debouncing issues.
 8000baa:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <main+0x50>)
 8000bac:	f7ff ffd4 	bl	8000b58 <delay>


		//sending message
		USART_SendData(&USART1Handle, (uint8_t*)msg,strlen(msg));
 8000bb0:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <main+0x5c>)
 8000bb2:	f7ff fadd 	bl	8000170 <strlen>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4906      	ldr	r1, [pc, #24]	; (8000bd4 <main+0x5c>)
 8000bbc:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <main+0x60>)
 8000bbe:	f7ff ff1d 	bl	80009fc <USART_SendData>
		delay(500000);
 8000bc2:	e7e3      	b.n	8000b8c <main+0x14>
 8000bc4:	40013800 	.word	0x40013800
 8000bc8:	0007a120 	.word	0x0007a120
 8000bcc:	40010c00 	.word	0x40010c00
 8000bd0:	40010800 	.word	0x40010800
 8000bd4:	20000018 	.word	0x20000018
 8000bd8:	20000434 	.word	0x20000434

08000bdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bde:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000be0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	; (8000c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <LoopForever+0xe>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	; (8000c28 <LoopForever+0x16>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c0a:	f000 f811 	bl	8000c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c0e:	f7ff ffb3 	bl	8000b78 <main>

08000c12 <LoopForever>:

LoopForever:
    b LoopForever
 8000c12:	e7fe      	b.n	8000c12 <LoopForever>
  ldr   r0, =_estack
 8000c14:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 8000c20:	08000c98 	.word	0x08000c98
  ldr r2, =_sbss
 8000c24:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 8000c28:	20000458 	.word	0x20000458

08000c2c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC_IRQHandler>
	...

08000c30 <__libc_init_array>:
 8000c30:	b570      	push	{r4, r5, r6, lr}
 8000c32:	2600      	movs	r6, #0
 8000c34:	4d0c      	ldr	r5, [pc, #48]	; (8000c68 <__libc_init_array+0x38>)
 8000c36:	4c0d      	ldr	r4, [pc, #52]	; (8000c6c <__libc_init_array+0x3c>)
 8000c38:	1b64      	subs	r4, r4, r5
 8000c3a:	10a4      	asrs	r4, r4, #2
 8000c3c:	42a6      	cmp	r6, r4
 8000c3e:	d109      	bne.n	8000c54 <__libc_init_array+0x24>
 8000c40:	f000 f81a 	bl	8000c78 <_init>
 8000c44:	2600      	movs	r6, #0
 8000c46:	4d0a      	ldr	r5, [pc, #40]	; (8000c70 <__libc_init_array+0x40>)
 8000c48:	4c0a      	ldr	r4, [pc, #40]	; (8000c74 <__libc_init_array+0x44>)
 8000c4a:	1b64      	subs	r4, r4, r5
 8000c4c:	10a4      	asrs	r4, r4, #2
 8000c4e:	42a6      	cmp	r6, r4
 8000c50:	d105      	bne.n	8000c5e <__libc_init_array+0x2e>
 8000c52:	bd70      	pop	{r4, r5, r6, pc}
 8000c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c58:	4798      	blx	r3
 8000c5a:	3601      	adds	r6, #1
 8000c5c:	e7ee      	b.n	8000c3c <__libc_init_array+0xc>
 8000c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c62:	4798      	blx	r3
 8000c64:	3601      	adds	r6, #1
 8000c66:	e7f2      	b.n	8000c4e <__libc_init_array+0x1e>
 8000c68:	08000c90 	.word	0x08000c90
 8000c6c:	08000c90 	.word	0x08000c90
 8000c70:	08000c90 	.word	0x08000c90
 8000c74:	08000c94 	.word	0x08000c94

08000c78 <_init>:
 8000c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c7a:	bf00      	nop
 8000c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c7e:	bc08      	pop	{r3}
 8000c80:	469e      	mov	lr, r3
 8000c82:	4770      	bx	lr

08000c84 <_fini>:
 8000c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c86:	bf00      	nop
 8000c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c8a:	bc08      	pop	{r3}
 8000c8c:	469e      	mov	lr, r3
 8000c8e:	4770      	bx	lr
