
Stm32f1xx_Drivers_Examples.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001070  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080011a0  080011a0  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080011a0  080011a0  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  080011a0  080011a0  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011a0  080011a0  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011a0  080011a0  000111a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011a4  080011a4  000111a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  080011a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000038  080011e0  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080011e0  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   000015b9  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000582  00000000  00000000  0002161a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  00021ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b0  00000000  00000000  00021d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000184d  00000000  00000000  00021f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000089e  00000000  00000000  00023785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00024023  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000750  00000000  00000000  00024074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000038 	.word	0x20000038
 800014c:	00000000 	.word	0x00000000
 8000150:	08001188 	.word	0x08001188

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000003c 	.word	0x2000003c
 800016c:	08001188 	.word	0x08001188

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <GPIO_PCLK>:
#include "stm32f100xx_gpio.h"


/*Peripheral Clock Setup(Enable or Disable)*/
void GPIO_PCLK(GPIO_RegDef_t *pGPIOx, uint8_t EnorDis)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
 8000188:	460b      	mov	r3, r1
 800018a:	70fb      	strb	r3, [r7, #3]
	  if (EnorDis != DISABLE)
 800018c:	78fb      	ldrb	r3, [r7, #3]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d036      	beq.n	8000200 <GPIO_PCLK+0x80>
	  {
	      if(pGPIOx == GPIOA)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4a38      	ldr	r2, [pc, #224]	; (8000278 <GPIO_PCLK+0xf8>)
 8000196:	4293      	cmp	r3, r2
 8000198:	d106      	bne.n	80001a8 <GPIO_PCLK+0x28>
	      {
	    	  GPIOA_PCLK_EN();
 800019a:	4b38      	ldr	r3, [pc, #224]	; (800027c <GPIO_PCLK+0xfc>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	4a37      	ldr	r2, [pc, #220]	; (800027c <GPIO_PCLK+0xfc>)
 80001a0:	f043 0304 	orr.w	r3, r3, #4
 80001a4:	6193      	str	r3, [r2, #24]
	      }else if(pGPIOx == GPIOE)
	      {
	    	  GPIOE_PCLK_DIS();
	      }
	  }
}
 80001a6:	e061      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOB)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	4a35      	ldr	r2, [pc, #212]	; (8000280 <GPIO_PCLK+0x100>)
 80001ac:	4293      	cmp	r3, r2
 80001ae:	d106      	bne.n	80001be <GPIO_PCLK+0x3e>
	    	  GPIOB_PCLK_EN();
 80001b0:	4b32      	ldr	r3, [pc, #200]	; (800027c <GPIO_PCLK+0xfc>)
 80001b2:	699b      	ldr	r3, [r3, #24]
 80001b4:	4a31      	ldr	r2, [pc, #196]	; (800027c <GPIO_PCLK+0xfc>)
 80001b6:	f043 0308 	orr.w	r3, r3, #8
 80001ba:	6193      	str	r3, [r2, #24]
}
 80001bc:	e056      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOC)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	4a30      	ldr	r2, [pc, #192]	; (8000284 <GPIO_PCLK+0x104>)
 80001c2:	4293      	cmp	r3, r2
 80001c4:	d106      	bne.n	80001d4 <GPIO_PCLK+0x54>
	    	  GPIOC_PCLK_EN();
 80001c6:	4b2d      	ldr	r3, [pc, #180]	; (800027c <GPIO_PCLK+0xfc>)
 80001c8:	699b      	ldr	r3, [r3, #24]
 80001ca:	4a2c      	ldr	r2, [pc, #176]	; (800027c <GPIO_PCLK+0xfc>)
 80001cc:	f043 0310 	orr.w	r3, r3, #16
 80001d0:	6193      	str	r3, [r2, #24]
}
 80001d2:	e04b      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOD)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	4a2c      	ldr	r2, [pc, #176]	; (8000288 <GPIO_PCLK+0x108>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d106      	bne.n	80001ea <GPIO_PCLK+0x6a>
	    	  GPIOD_PCLK_EN();
 80001dc:	4b27      	ldr	r3, [pc, #156]	; (800027c <GPIO_PCLK+0xfc>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	4a26      	ldr	r2, [pc, #152]	; (800027c <GPIO_PCLK+0xfc>)
 80001e2:	f043 0320 	orr.w	r3, r3, #32
 80001e6:	6193      	str	r3, [r2, #24]
}
 80001e8:	e040      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOE)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a27      	ldr	r2, [pc, #156]	; (800028c <GPIO_PCLK+0x10c>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d13c      	bne.n	800026c <GPIO_PCLK+0xec>
	    	  GPIOE_PCLK_EN();
 80001f2:	4b22      	ldr	r3, [pc, #136]	; (800027c <GPIO_PCLK+0xfc>)
 80001f4:	699b      	ldr	r3, [r3, #24]
 80001f6:	4a21      	ldr	r2, [pc, #132]	; (800027c <GPIO_PCLK+0xfc>)
 80001f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001fc:	6193      	str	r3, [r2, #24]
}
 80001fe:	e035      	b.n	800026c <GPIO_PCLK+0xec>
	      if(pGPIOx == GPIOA)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4a1d      	ldr	r2, [pc, #116]	; (8000278 <GPIO_PCLK+0xf8>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d106      	bne.n	8000216 <GPIO_PCLK+0x96>
	    	  GPIOA_PCLK_DIS();
 8000208:	4b1c      	ldr	r3, [pc, #112]	; (800027c <GPIO_PCLK+0xfc>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a1b      	ldr	r2, [pc, #108]	; (800027c <GPIO_PCLK+0xfc>)
 800020e:	f023 0304 	bic.w	r3, r3, #4
 8000212:	6193      	str	r3, [r2, #24]
}
 8000214:	e02a      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOB)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a19      	ldr	r2, [pc, #100]	; (8000280 <GPIO_PCLK+0x100>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIO_PCLK+0xac>
	    	  GPIOB_PCLK_DIS();
 800021e:	4b17      	ldr	r3, [pc, #92]	; (800027c <GPIO_PCLK+0xfc>)
 8000220:	699b      	ldr	r3, [r3, #24]
 8000222:	4a16      	ldr	r2, [pc, #88]	; (800027c <GPIO_PCLK+0xfc>)
 8000224:	f023 0308 	bic.w	r3, r3, #8
 8000228:	6193      	str	r3, [r2, #24]
}
 800022a:	e01f      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOC)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a15      	ldr	r2, [pc, #84]	; (8000284 <GPIO_PCLK+0x104>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <GPIO_PCLK+0xc2>
	    	  GPIOC_PCLK_DIS();
 8000234:	4b11      	ldr	r3, [pc, #68]	; (800027c <GPIO_PCLK+0xfc>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	4a10      	ldr	r2, [pc, #64]	; (800027c <GPIO_PCLK+0xfc>)
 800023a:	f023 0310 	bic.w	r3, r3, #16
 800023e:	6193      	str	r3, [r2, #24]
}
 8000240:	e014      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOD)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a10      	ldr	r2, [pc, #64]	; (8000288 <GPIO_PCLK+0x108>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <GPIO_PCLK+0xd8>
	    	  GPIOD_PCLK_DIS();
 800024a:	4b0c      	ldr	r3, [pc, #48]	; (800027c <GPIO_PCLK+0xfc>)
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	4a0b      	ldr	r2, [pc, #44]	; (800027c <GPIO_PCLK+0xfc>)
 8000250:	f023 0320 	bic.w	r3, r3, #32
 8000254:	6193      	str	r3, [r2, #24]
}
 8000256:	e009      	b.n	800026c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOE)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a0c      	ldr	r2, [pc, #48]	; (800028c <GPIO_PCLK+0x10c>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d105      	bne.n	800026c <GPIO_PCLK+0xec>
	    	  GPIOE_PCLK_DIS();
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <GPIO_PCLK+0xfc>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a05      	ldr	r2, [pc, #20]	; (800027c <GPIO_PCLK+0xfc>)
 8000266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800026a:	6193      	str	r3, [r2, #24]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40010800 	.word	0x40010800
 800027c:	40021000 	.word	0x40021000
 8000280:	40010c00 	.word	0x40010c00
 8000284:	40011000 	.word	0x40011000
 8000288:	40011400 	.word	0x40011400
 800028c:	40011800 	.word	0x40011800

08000290 <GPIO_Init>:

/*
 * Initializes the GPIOx with the pGPIOHandle.
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

	//Enable the Clock first .  //I configured this setting inside the Init function because user could forget to enable the clock:)
	GPIO_PCLK(pGPIOHandle->pGPIOx, ENABLE);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2101      	movs	r1, #1
 800029e:	4618      	mov	r0, r3
 80002a0:	f7ff ff6e 	bl	8000180 <GPIO_PCLK>

	//currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);

	/**************************************************************************************************************/
	//INTERRUPT MODE CONFIG // CHECK FIRST BELOW CONDITION FOR INTERRUPT MODES
	if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode > GPIO_MODE_AF_OD)// It means that if one of the mode is in interrupt modes or not.
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	2b1c      	cmp	r3, #28
 80002aa:	f240 809c 	bls.w	80003e6 <GPIO_Init+0x156>
	{
		/*1. Configure the triggering selection*/
		if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_IT_RT) {
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	2b24      	cmp	r3, #36	; 0x24
 80002b4:	d117      	bne.n	80002e6 <GPIO_Init+0x56>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Set the RTRS reg
 80002b6:	4b99      	ldr	r3, [pc, #612]	; (800051c <GPIO_Init+0x28c>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	6852      	ldr	r2, [r2, #4]
 80002be:	2101      	movs	r1, #1
 80002c0:	fa01 f202 	lsl.w	r2, r1, r2
 80002c4:	4611      	mov	r1, r2
 80002c6:	4a95      	ldr	r2, [pc, #596]	; (800051c <GPIO_Init+0x28c>)
 80002c8:	430b      	orrs	r3, r1
 80002ca:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clear the FTRS reg
 80002cc:	4b93      	ldr	r3, [pc, #588]	; (800051c <GPIO_Init+0x28c>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	6852      	ldr	r2, [r2, #4]
 80002d4:	2101      	movs	r1, #1
 80002d6:	fa01 f202 	lsl.w	r2, r1, r2
 80002da:	43d2      	mvns	r2, r2
 80002dc:	4611      	mov	r1, r2
 80002de:	4a8f      	ldr	r2, [pc, #572]	; (800051c <GPIO_Init+0x28c>)
 80002e0:	400b      	ands	r3, r1
 80002e2:	60d3      	str	r3, [r2, #12]
 80002e4:	e035      	b.n	8000352 <GPIO_Init+0xc2>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_IT_FT) {
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	2b44      	cmp	r3, #68	; 0x44
 80002ec:	d117      	bne.n	800031e <GPIO_Init+0x8e>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Set the FTRS reg
 80002ee:	4b8b      	ldr	r3, [pc, #556]	; (800051c <GPIO_Init+0x28c>)
 80002f0:	68db      	ldr	r3, [r3, #12]
 80002f2:	687a      	ldr	r2, [r7, #4]
 80002f4:	6852      	ldr	r2, [r2, #4]
 80002f6:	2101      	movs	r1, #1
 80002f8:	fa01 f202 	lsl.w	r2, r1, r2
 80002fc:	4611      	mov	r1, r2
 80002fe:	4a87      	ldr	r2, [pc, #540]	; (800051c <GPIO_Init+0x28c>)
 8000300:	430b      	orrs	r3, r1
 8000302:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clear the RTRS reg
 8000304:	4b85      	ldr	r3, [pc, #532]	; (800051c <GPIO_Init+0x28c>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	6852      	ldr	r2, [r2, #4]
 800030c:	2101      	movs	r1, #1
 800030e:	fa01 f202 	lsl.w	r2, r1, r2
 8000312:	43d2      	mvns	r2, r2
 8000314:	4611      	mov	r1, r2
 8000316:	4a81      	ldr	r2, [pc, #516]	; (800051c <GPIO_Init+0x28c>)
 8000318:	400b      	ands	r3, r1
 800031a:	6093      	str	r3, [r2, #8]
 800031c:	e019      	b.n	8000352 <GPIO_Init+0xc2>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_IT_RFT) {
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	2b84      	cmp	r3, #132	; 0x84
 8000324:	d115      	bne.n	8000352 <GPIO_Init+0xc2>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Set the RTRS reg
 8000326:	4b7d      	ldr	r3, [pc, #500]	; (800051c <GPIO_Init+0x28c>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	6852      	ldr	r2, [r2, #4]
 800032e:	2101      	movs	r1, #1
 8000330:	fa01 f202 	lsl.w	r2, r1, r2
 8000334:	4611      	mov	r1, r2
 8000336:	4a79      	ldr	r2, [pc, #484]	; (800051c <GPIO_Init+0x28c>)
 8000338:	430b      	orrs	r3, r1
 800033a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Set the FTRS reg
 800033c:	4b77      	ldr	r3, [pc, #476]	; (800051c <GPIO_Init+0x28c>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	6852      	ldr	r2, [r2, #4]
 8000344:	2101      	movs	r1, #1
 8000346:	fa01 f202 	lsl.w	r2, r1, r2
 800034a:	4611      	mov	r1, r2
 800034c:	4a73      	ldr	r2, [pc, #460]	; (800051c <GPIO_Init+0x28c>)
 800034e:	430b      	orrs	r3, r1
 8000350:	60d3      	str	r3, [r2, #12]

		}

		/*2. Configuration of the GPIO Port Selection in AFIO->EXTICR*/
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_Pin / 4; //Created for deciding which EXTICR register
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	089b      	lsrs	r3, r3, #2
 8000358:	73fb      	strb	r3, [r7, #15]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_Pin % 4; //Created for deciding which pins(4 pin) inside the selected EXTICR register
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	b2db      	uxtb	r3, r3
 8000360:	f003 0303 	and.w	r3, r3, #3
 8000364:	73bb      	strb	r3, [r7, #14]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a6d      	ldr	r2, [pc, #436]	; (8000520 <GPIO_Init+0x290>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d01d      	beq.n	80003ac <GPIO_Init+0x11c>
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a6b      	ldr	r2, [pc, #428]	; (8000524 <GPIO_Init+0x294>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d016      	beq.n	80003a8 <GPIO_Init+0x118>
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a6a      	ldr	r2, [pc, #424]	; (8000528 <GPIO_Init+0x298>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d00f      	beq.n	80003a4 <GPIO_Init+0x114>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a68      	ldr	r2, [pc, #416]	; (800052c <GPIO_Init+0x29c>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d008      	beq.n	80003a0 <GPIO_Init+0x110>
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4a67      	ldr	r2, [pc, #412]	; (8000530 <GPIO_Init+0x2a0>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d101      	bne.n	800039c <GPIO_Init+0x10c>
 8000398:	2304      	movs	r3, #4
 800039a:	e008      	b.n	80003ae <GPIO_Init+0x11e>
 800039c:	2300      	movs	r3, #0
 800039e:	e006      	b.n	80003ae <GPIO_Init+0x11e>
 80003a0:	2303      	movs	r3, #3
 80003a2:	e004      	b.n	80003ae <GPIO_Init+0x11e>
 80003a4:	2302      	movs	r3, #2
 80003a6:	e002      	b.n	80003ae <GPIO_Init+0x11e>
 80003a8:	2301      	movs	r3, #1
 80003aa:	e000      	b.n	80003ae <GPIO_Init+0x11e>
 80003ac:	2300      	movs	r3, #0
 80003ae:	737b      	strb	r3, [r7, #13]
		AFIO_PCLK_EN(); //Clock enabled first.
 80003b0:	4b60      	ldr	r3, [pc, #384]	; (8000534 <GPIO_Init+0x2a4>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a5f      	ldr	r2, [pc, #380]	; (8000534 <GPIO_Init+0x2a4>)
 80003b6:	f043 0301 	orr.w	r3, r3, #1
 80003ba:	6193      	str	r3, [r2, #24]
		AFIO->EXTICR[temp1] = portcode << (temp2 * 4);
 80003bc:	7b7a      	ldrb	r2, [r7, #13]
 80003be:	7bbb      	ldrb	r3, [r7, #14]
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	fa02 f103 	lsl.w	r1, r2, r3
 80003c6:	4a5c      	ldr	r2, [pc, #368]	; (8000538 <GPIO_Init+0x2a8>)
 80003c8:	7bfb      	ldrb	r3, [r7, #15]
 80003ca:	3302      	adds	r3, #2
 80003cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		/*3. Enable the EXTI from interrupt mask register (EXTI->IMR)*/
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin);
 80003d0:	4b52      	ldr	r3, [pc, #328]	; (800051c <GPIO_Init+0x28c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	6852      	ldr	r2, [r2, #4]
 80003d8:	2101      	movs	r1, #1
 80003da:	fa01 f202 	lsl.w	r2, r1, r2
 80003de:	4611      	mov	r1, r2
 80003e0:	4a4e      	ldr	r2, [pc, #312]	; (800051c <GPIO_Init+0x28c>)
 80003e2:	430b      	orrs	r3, r1
 80003e4:	6013      	str	r3, [r2, #0]

	}
	/**************************************************************************************************************/


	uint32_t tempmode=0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	60bb      	str	r3, [r7, #8]

	// 1. Configure the mode, first define whether the mode is output or not.
	if((pGPIOHandle->GPIO_PinConfig.GPIO_Mode) & (0x10))//All output mode's 5th bit is 1 (ex: 0001 0100)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	f003 0310 	and.w	r3, r3, #16
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d006      	beq.n	8000404 <GPIO_Init+0x174>
	{
		pGPIOHandle->GPIO_PinConfig.GPIO_Mode |= pGPIOHandle->GPIO_PinConfig.GPIO_Speed; //Entegrating Output mode with speed
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	689a      	ldr	r2, [r3, #8]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	68db      	ldr	r3, [r3, #12]
 80003fe:	431a      	orrs	r2, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	609a      	str	r2, [r3, #8]
	}

	//2. Configure the mode for CRL
	if(pGPIOHandle->GPIO_PinConfig.GPIO_Pin <=7) //Below the pin number 7 is in CRL register
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	2b07      	cmp	r3, #7
 800040a:	d861      	bhi.n	80004d0 <GPIO_Init+0x240>
	{

	    /* Reset the corresponding ODR bit to configure pull-down activation */
	    if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INPUT_PD)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	2b28      	cmp	r3, #40	; 0x28
 8000412:	d11b      	bne.n	800044c <GPIO_Init+0x1bc>
	    {
	    	pGPIOHandle->pGPIOx->BRR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	695a      	ldr	r2, [r3, #20]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	2101      	movs	r1, #1
 8000420:	fa01 f303 	lsl.w	r3, r1, r3
 8000424:	43db      	mvns	r3, r3
 8000426:	4619      	mov	r1, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	400a      	ands	r2, r1
 800042e:	615a      	str	r2, [r3, #20]
	    	pGPIOHandle->pGPIOx->BRR |= ( 1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	695a      	ldr	r2, [r3, #20]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	2101      	movs	r1, #1
 800043c:	fa01 f303 	lsl.w	r3, r1, r3
 8000440:	4619      	mov	r1, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	430a      	orrs	r2, r1
 8000448:	615a      	str	r2, [r3, #20]
 800044a:	e01e      	b.n	800048a <GPIO_Init+0x1fa>
	    }
	    else
	    {
	      /* Set the corresponding ODR bit to configure pull-up activation */
	      if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INPUT_PU)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	2b48      	cmp	r3, #72	; 0x48
 8000452:	d11a      	bne.n	800048a <GPIO_Init+0x1fa>
	      {
	  		  pGPIOHandle->pGPIOx->BSRR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clearing the corresponding bits.
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	691a      	ldr	r2, [r3, #16]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	2101      	movs	r1, #1
 8000460:	fa01 f303 	lsl.w	r3, r1, r3
 8000464:	43db      	mvns	r3, r3
 8000466:	4619      	mov	r1, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	400a      	ands	r2, r1
 800046e:	611a      	str	r2, [r3, #16]
	    	  pGPIOHandle->pGPIOx->BSRR |= ( 1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	691a      	ldr	r2, [r3, #16]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	2101      	movs	r1, #1
 800047c:	fa01 f303 	lsl.w	r3, r1, r3
 8000480:	4619      	mov	r1, r3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	430a      	orrs	r2, r1
 8000488:	611a      	str	r2, [r3, #16]
	      }
	    }

		tempmode |= (((pGPIOHandle->GPIO_PinConfig.GPIO_Mode) & (0x0F)) <<  (4 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin) ); // Getting the last 4 bits of GPIO_Mode to shift them 4 times left properly
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	f003 020f 	and.w	r2, r3, #15
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	fa02 f303 	lsl.w	r3, r2, r3
 800049c:	68ba      	ldr	r2, [r7, #8]
 800049e:	4313      	orrs	r3, r2
 80004a0:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->CRL &= ~( 0xF << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin) ); // Clearing the corresponding bits first.
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	210f      	movs	r1, #15
 80004b0:	fa01 f303 	lsl.w	r3, r1, r3
 80004b4:	43db      	mvns	r3, r3
 80004b6:	4619      	mov	r1, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	400a      	ands	r2, r1
 80004be:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= tempmode;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	6819      	ldr	r1, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	68ba      	ldr	r2, [r7, #8]
 80004cc:	430a      	orrs	r2, r1
 80004ce:	601a      	str	r2, [r3, #0]
	}


	//3. Configure the mode for CRH
	if(pGPIOHandle->GPIO_PinConfig.GPIO_Pin >7) //Above the pin number 7 is in CRH register
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	2b07      	cmp	r3, #7
 80004d6:	d975      	bls.n	80005c4 <GPIO_Init+0x334>
	{
		tempmode=0;
 80004d8:	2300      	movs	r3, #0
 80004da:	60bb      	str	r3, [r7, #8]

	    /* Reset the corresponding ODR bit to configure pull-down activation(Told in Reference Manual) */
	    if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INPUT_PD)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	2b28      	cmp	r3, #40	; 0x28
 80004e2:	d12b      	bne.n	800053c <GPIO_Init+0x2ac>
	    {
	    	pGPIOHandle->pGPIOx->BRR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clearing the corresponding bits.
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	695a      	ldr	r2, [r3, #20]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	2101      	movs	r1, #1
 80004f0:	fa01 f303 	lsl.w	r3, r1, r3
 80004f4:	43db      	mvns	r3, r3
 80004f6:	4619      	mov	r1, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	400a      	ands	r2, r1
 80004fe:	615a      	str	r2, [r3, #20]
	    	pGPIOHandle->pGPIOx->BRR |= ( 1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	695a      	ldr	r2, [r3, #20]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	2101      	movs	r1, #1
 800050c:	fa01 f303 	lsl.w	r3, r1, r3
 8000510:	4619      	mov	r1, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	430a      	orrs	r2, r1
 8000518:	615a      	str	r2, [r3, #20]
 800051a:	e02e      	b.n	800057a <GPIO_Init+0x2ea>
 800051c:	40010400 	.word	0x40010400
 8000520:	40010800 	.word	0x40010800
 8000524:	40010c00 	.word	0x40010c00
 8000528:	40011000 	.word	0x40011000
 800052c:	40011400 	.word	0x40011400
 8000530:	40011800 	.word	0x40011800
 8000534:	40021000 	.word	0x40021000
 8000538:	40010000 	.word	0x40010000
	    }
	    else
	    {
	      /* Set the corresponding ODR bit to configure pull-up activation(Told in Reference Manual) */
	      if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INPUT_PU)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	2b48      	cmp	r3, #72	; 0x48
 8000542:	d11a      	bne.n	800057a <GPIO_Init+0x2ea>
	      {
	    	  pGPIOHandle->pGPIOx->BSRR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clearing the corresponding bits.
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	691a      	ldr	r2, [r3, #16]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	2101      	movs	r1, #1
 8000550:	fa01 f303 	lsl.w	r3, r1, r3
 8000554:	43db      	mvns	r3, r3
 8000556:	4619      	mov	r1, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	400a      	ands	r2, r1
 800055e:	611a      	str	r2, [r3, #16]
	    	  pGPIOHandle->pGPIOx->BSRR |= ( 1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	691a      	ldr	r2, [r3, #16]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	2101      	movs	r1, #1
 800056c:	fa01 f303 	lsl.w	r3, r1, r3
 8000570:	4619      	mov	r1, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	430a      	orrs	r2, r1
 8000578:	611a      	str	r2, [r3, #16]
	      }
	    }

		tempmode |= (((pGPIOHandle->GPIO_PinConfig.GPIO_Mode) & (0x0F)) <<  (4 * ((pGPIOHandle->GPIO_PinConfig.GPIO_Pin) - 8)) ); // Getting the last 4 bits of GPIO_Mode to shift them 4 times left properly. Between 8-16 pin number
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	f003 020f 	and.w	r2, r3, #15
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	3b08      	subs	r3, #8
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	fa02 f303 	lsl.w	r3, r2, r3
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	4313      	orrs	r3, r2
 8000592:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->CRH &= ~( 0xF << (4 * ((pGPIOHandle->GPIO_PinConfig.GPIO_Pin) - 8)) ); // Clearing the corresponding bits first.
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	685a      	ldr	r2, [r3, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	3b08      	subs	r3, #8
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	210f      	movs	r1, #15
 80005a4:	fa01 f303 	lsl.w	r3, r1, r3
 80005a8:	43db      	mvns	r3, r3
 80005aa:	4619      	mov	r1, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	400a      	ands	r2, r1
 80005b2:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= tempmode ;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	6859      	ldr	r1, [r3, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	430a      	orrs	r2, r1
 80005c2:	605a      	str	r2, [r3, #4]

	}

}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <I2C_AddressWrite>:
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
}


static void I2C_AddressWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80005d8:	78fb      	ldrb	r3, [r7, #3]
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 80005de:	78fb      	ldrb	r3, [r7, #3]
 80005e0:	f023 0301 	bic.w	r3, r3, #1
 80005e4:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80005e6:	78fa      	ldrb	r2, [r7, #3]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	611a      	str	r2, [r3, #16]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr

080005f6 <I2C_AddressRead>:


static void I2C_AddressRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80005f6:	b480      	push	{r7}
 80005f8:	b083      	sub	sp, #12
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
 80005fe:	460b      	mov	r3, r1
 8000600:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000602:	78fb      	ldrb	r3, [r7, #3]
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000610:	78fa      	ldrb	r2, [r7, #3]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	611a      	str	r2, [r3, #16]
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL)) //MSL: Slave mode:0, Master Mode:1
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	2b00      	cmp	r3, #0
 8000634:	d01f      	beq.n	8000676 <I2C_ClearADDRFlag+0x56>
	{
		//Master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_RX)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	7f1b      	ldrb	r3, [r3, #28]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d112      	bne.n	8000664 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6a1b      	ldr	r3, [r3, #32]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d11f      	bne.n	8000686 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f000 f96b 	bl	8000928 <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 first then read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 8000662:	e010      	b.n	8000686 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	60fb      	str	r3, [r7, #12]
}
 8000674:	e007      	b.n	8000686 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	60fb      	str	r3, [r7, #12]
}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <I2C_GenerateStopCondition>:
 * In Slave mode:
 * 	   0: No Stop generation.
 * 	   1: Release the SCL and SDA lines after the current byte transfer.
 */
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	601a      	str	r2, [r3, #0]
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <I2C_PCLK>:
/*
 * Peripheral Clock Setup
 * I used only I2C1, So it is simple.
 */
void I2C_PCLK(I2C_RegDef_t *pI2Cx, uint8_t EnorDis)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	70fb      	strb	r3, [r7, #3]

	  if (EnorDis != DISABLE)
 80006b8:	78fb      	ldrb	r3, [r7, #3]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d006      	beq.n	80006cc <I2C_PCLK+0x20>
	  {
		  I2C1_PCLK_EN();
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <I2C_PCLK+0x38>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <I2C_PCLK+0x38>)
 80006c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006c8:	61d3      	str	r3, [r2, #28]
	  }else
	  {
		  I2C1_PCLK_DIS();
	  }
}
 80006ca:	e005      	b.n	80006d8 <I2C_PCLK+0x2c>
		  I2C1_PCLK_DIS();
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <I2C_PCLK+0x38>)
 80006ce:	69db      	ldr	r3, [r3, #28]
 80006d0:	4a04      	ldr	r2, [pc, #16]	; (80006e4 <I2C_PCLK+0x38>)
 80006d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80006d6:	61d3      	str	r3, [r2, #28]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000

080006e8 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = {2,4,8,16,};
/*
 * Generating PERIPH CLOCK value
 */
uint32_t RCC_GetPCLK1Value(void) // Verify this function from Datasheet & Reference Man
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint16_t ahbp;//AHB Prescaler
	uint8_t clksrc, temp, apb1p; //AHB Prescaler, APB1 Prescaler

	clksrc = ((RCC->CFGR >> 2) & 0x3); // Bringing those 2 bits to lsb position and mask
 80006ee:	4b22      	ldr	r3, [pc, #136]	; (8000778 <RCC_GetPCLK1Value+0x90>)
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	089b      	lsrs	r3, r3, #2
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	f003 0303 	and.w	r3, r3, #3
 80006fa:	723b      	strb	r3, [r7, #8]
	if(clksrc == 0) // Look at the reference manual
 80006fc:	7a3b      	ldrb	r3, [r7, #8]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d102      	bne.n	8000708 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 8000000;
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <RCC_GetPCLK1Value+0x94>)
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	e004      	b.n	8000712 <RCC_GetPCLK1Value+0x2a>
	}else if(clksrc == 1)
 8000708:	7a3b      	ldrb	r3, [r7, #8]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d101      	bne.n	8000712 <RCC_GetPCLK1Value+0x2a>
	{
		SystemClk = 4000000;
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <RCC_GetPCLK1Value+0x98>)
 8000710:	60fb      	str	r3, [r7, #12]
		//SystemClk = RCCPLLOutputClock();
	}


	//For AHB
	temp = ((RCC->CFGR >> 4) & 0xF); // Bringing those 4 bits to lsb position and mask
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <RCC_GetPCLK1Value+0x90>)
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	091b      	lsrs	r3, r3, #4
 8000718:	b2db      	uxtb	r3, r3
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	71fb      	strb	r3, [r7, #7]
	if(temp < 8) // Look at the reference manual
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	2b07      	cmp	r3, #7
 8000724:	d802      	bhi.n	800072c <RCC_GetPCLK1Value+0x44>
	{
		ahbp = 1;
 8000726:	2301      	movs	r3, #1
 8000728:	817b      	strh	r3, [r7, #10]
 800072a:	e005      	b.n	8000738 <RCC_GetPCLK1Value+0x50>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	3b08      	subs	r3, #8
 8000730:	4a14      	ldr	r2, [pc, #80]	; (8000784 <RCC_GetPCLK1Value+0x9c>)
 8000732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000736:	817b      	strh	r3, [r7, #10]
	}

	//For APB1
	temp = ((RCC->CFGR >> 8) & 0x7); // Bringing those 3 bits to lsb position and mask
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <RCC_GetPCLK1Value+0x90>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	0a1b      	lsrs	r3, r3, #8
 800073e:	b2db      	uxtb	r3, r3
 8000740:	f003 0307 	and.w	r3, r3, #7
 8000744:	71fb      	strb	r3, [r7, #7]
	if(temp < 4) // Look at the reference manual
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b03      	cmp	r3, #3
 800074a:	d802      	bhi.n	8000752 <RCC_GetPCLK1Value+0x6a>
	{
		apb1p = 1;
 800074c:	2301      	movs	r3, #1
 800074e:	727b      	strb	r3, [r7, #9]
 8000750:	e004      	b.n	800075c <RCC_GetPCLK1Value+0x74>
	}else
	{
		ahbp = APB1_PreScaler[temp-4];
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	3b04      	subs	r3, #4
 8000756:	4a0c      	ldr	r2, [pc, #48]	; (8000788 <RCC_GetPCLK1Value+0xa0>)
 8000758:	5cd3      	ldrb	r3, [r2, r3]
 800075a:	817b      	strh	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 800075c:	897b      	ldrh	r3, [r7, #10]
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	fbb2 f2f3 	udiv	r2, r2, r3
 8000764:	7a7b      	ldrb	r3, [r7, #9]
 8000766:	fbb2 f3f3 	udiv	r3, r2, r3
 800076a:	603b      	str	r3, [r7, #0]


	return pclk1;
 800076c:	683b      	ldr	r3, [r7, #0]
}
 800076e:	4618      	mov	r0, r3
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	40021000 	.word	0x40021000
 800077c:	007a1200 	.word	0x007a1200
 8000780:	003d0900 	.word	0x003d0900
 8000784:	20000000 	.word	0x20000000
 8000788:	20000014 	.word	0x20000014

0800078c <I2C_PeriphControl>:

/*
 * I2C Peripheral Enable or Disable Configuration API
 */
void I2C_PeriphControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDis)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	70fb      	strb	r3, [r7, #3]
	  if (EnorDis != DISABLE)
 8000798:	78fb      	ldrb	r3, [r7, #3]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d006      	beq.n	80007ac <I2C_PeriphControl+0x20>
	  {
		  pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f043 0201 	orr.w	r2, r3, #1
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	601a      	str	r2, [r3, #0]

	  }else
	  {
		  pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	  }
}
 80007aa:	e005      	b.n	80007b8 <I2C_PeriphControl+0x2c>
		  pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f023 0201 	bic.w	r2, r3, #1
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	601a      	str	r2, [r3, #0]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
	...

080007c4 <I2C_Init>:
 * 5. Configure the rise time for I2C pin(Time required for signal from GND to Vcc)
 *
 * All the above Configurations must be done When I2C Peripheral Disable in CR1
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]

	//Enable the Clock first .  //I configured this setting inside the Init function because user could forget to enable the clock:)
	I2C_PCLK(pI2CHandle->pI2Cx, ENABLE);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2101      	movs	r1, #1
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ff6a 	bl	80006ac <I2C_PCLK>
	uint32_t tempreg;

	/**************************	I2C_CR1 Configuration *******************************/

	//Ack bit, Ack bit can be set only after I2C PE is 1.
	tempreg = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2CConfig.I2C_ACK << I2C_CR1_ACK;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	7a5b      	ldrb	r3, [r3, #9]
 80007e0:	029b      	lsls	r3, r3, #10
 80007e2:	461a      	mov	r2, r3
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	601a      	str	r2, [r3, #0]

	/**************************	I2C_CR2 Configuration *******************************/

	//FREQ Bit of Config
	tempreg = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U; // 8 MHz diveded by , we only want 8 here.
 80007f6:	f7ff ff77 	bl	80006e8 <RCC_GetPCLK1Value>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4a47      	ldr	r2, [pc, #284]	; (800091c <I2C_Init+0x158>)
 80007fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000802:	0c9b      	lsrs	r3, r3, #18
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	4313      	orrs	r3, r2
 8000808:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F); // Masking last 5 bit
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000814:	605a      	str	r2, [r3, #4]

	/**************************	I2C_OAR1 Configuration *******************************/

	//Store the device own address (When it is slave)
	tempreg = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2CConfig.I2C_DeviceAddress << I2C_OAR1_ADD71;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	7a1b      	ldrb	r3, [r3, #8]
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	461a      	mov	r2, r3
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	4313      	orrs	r3, r2
 8000826:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << I2C_OAR1_BIT14); // In Reference Manual, 14th bit should always kept 1 by software.
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	609a      	str	r2, [r3, #8]

	/**************************	I2C_CCR Configuration *******************************/

	uint16_t ccr_value = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2CConfig.I2C_SCLSpeed <= I2C_SCL_SPEED_STD)//If it is Standard Mode
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	4a36      	ldr	r2, [pc, #216]	; (8000920 <I2C_Init+0x15c>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d80f      	bhi.n	800086a <I2C_Init+0xa6>
	{
		//Thigh = CCR * TPCLK1
		//Tlow = CCR * TPCLK1
		//This is the formula in Reference Man. More detail look at there
		//When Thigh = Tlow => Tscl = 2 * CCR * TPCLK1 => CCR is going to be like below.
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2CConfig.I2C_SCLSpeed ) );
 800084a:	f7ff ff4d 	bl	80006e8 <RCC_GetPCLK1Value>
 800084e:	4602      	mov	r2, r0
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	fbb2 f3f3 	udiv	r3, r2, r3
 800085a:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);// Masking last 12 bit by 0xFFF
 800085c:	897b      	ldrh	r3, [r7, #10]
 800085e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	4313      	orrs	r3, r2
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	e02d      	b.n	80008c6 <I2C_Init+0x102>
	}else
	{
		//Fast Mode
		tempreg |= ( 1 << I2C_CCR_FS ); //Set the corresponding bit for fast mode
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000870:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2CConfig.I2C_FastModeDutyCycle << I2C_CCR_DUTY);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	7a9b      	ldrb	r3, [r3, #10]
 8000876:	039b      	lsls	r3, r3, #14
 8000878:	461a      	mov	r2, r3
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	4313      	orrs	r3, r2
 800087e:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2CConfig.I2C_FastModeDutyCycle == I2C_Fast_Mode_DUTY_2) //When DUTY bit 0
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	7a9b      	ldrb	r3, [r3, #10]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d10b      	bne.n	80008a0 <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2CConfig.I2C_SCLSpeed ) );//Same derivation like STD mode above
 8000888:	f7ff ff2e 	bl	80006e8 <RCC_GetPCLK1Value>
 800088c:	4601      	mov	r1, r0
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	4613      	mov	r3, r2
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	4413      	add	r3, r2
 8000898:	fbb1 f3f3 	udiv	r3, r1, r3
 800089c:	817b      	strh	r3, [r7, #10]
 800089e:	e00c      	b.n	80008ba <I2C_Init+0xf6>
		}else//When DUTY bit 1
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2CConfig.I2C_SCLSpeed ) );
 80008a0:	f7ff ff22 	bl	80006e8 <RCC_GetPCLK1Value>
 80008a4:	4601      	mov	r1, r0
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	685a      	ldr	r2, [r3, #4]
 80008aa:	4613      	mov	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	4413      	add	r3, r2
 80008b0:	009a      	lsls	r2, r3, #2
 80008b2:	4413      	add	r3, r2
 80008b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80008b8:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF); // Masking last 12 bit by 0xFFF
 80008ba:	897b      	ldrh	r3, [r7, #10]
 80008bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	61da      	str	r2, [r3, #28]


	/**************************	I2C_TRISE Configuration *******************************/

	if(pI2CHandle->I2CConfig.I2C_SCLSpeed <= I2C_SCL_SPEED_STD)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	4a13      	ldr	r2, [pc, #76]	; (8000920 <I2C_Init+0x15c>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d809      	bhi.n	80008ec <I2C_Init+0x128>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 80008d8:	f7ff ff06 	bl	80006e8 <RCC_GetPCLK1Value>
 80008dc:	4603      	mov	r3, r0
 80008de:	4a0f      	ldr	r2, [pc, #60]	; (800091c <I2C_Init+0x158>)
 80008e0:	fba2 2303 	umull	r2, r3, r2, r3
 80008e4:	0c9b      	lsrs	r3, r3, #18
 80008e6:	3301      	adds	r3, #1
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	e00d      	b.n	8000908 <I2C_Init+0x144>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 80008ec:	f7ff fefc 	bl	80006e8 <RCC_GetPCLK1Value>
 80008f0:	4603      	mov	r3, r0
 80008f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80008f6:	fb02 f303 	mul.w	r3, r2, r3
 80008fa:	0a5b      	lsrs	r3, r3, #9
 80008fc:	4a09      	ldr	r2, [pc, #36]	; (8000924 <I2C_Init+0x160>)
 80008fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000902:	09db      	lsrs	r3, r3, #7
 8000904:	3301      	adds	r3, #1
 8000906:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000912:	621a      	str	r2, [r3, #32]


}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	431bde83 	.word	0x431bde83
 8000920:	000186a0 	.word	0x000186a0
 8000924:	00044b83 	.word	0x00044b83

08000928 <I2C_ManageAcking>:

/*
 * Acking Disable by default, this function helps to manage acking
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDis)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	460b      	mov	r3, r1
 8000932:	70fb      	strb	r3, [r7, #3]
	if(EnorDis == I2C_ACK_ENABLE)
 8000934:	78fb      	ldrb	r3, [r7, #3]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d106      	bne.n	8000948 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000946:	e005      	b.n	8000954 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	601a      	str	r2, [r3, #0]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
	...

08000960 <I2C_IRQInterruptConfig>:
 * NVIC register Configurations for Interrupts.
 * We have less than 96 IRQ numbers in this device header. First 3 register of below registers is enough for us.
 * IRQ(Interrupt Request) Number definitions are in stm32f1xx.h(device header file)
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDis)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	460a      	mov	r2, r1
 800096a:	71fb      	strb	r3, [r7, #7]
 800096c:	4613      	mov	r3, r2
 800096e:	71bb      	strb	r3, [r7, #6]

	if(EnorDis == ENABLE)
 8000970:	79bb      	ldrb	r3, [r7, #6]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d133      	bne.n	80009de <I2C_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31) // ISER0 register (Interrupt Set-Enable Register)
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b1f      	cmp	r3, #31
 800097a:	d80a      	bhi.n	8000992 <I2C_IRQInterruptConfig+0x32>
		{
			*NVIC_ISER0 |= (1 << IRQNumber);
 800097c:	4b34      	ldr	r3, [pc, #208]	; (8000a50 <I2C_IRQInterruptConfig+0xf0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	79fa      	ldrb	r2, [r7, #7]
 8000982:	2101      	movs	r1, #1
 8000984:	fa01 f202 	lsl.w	r2, r1, r2
 8000988:	4611      	mov	r1, r2
 800098a:	4a31      	ldr	r2, [pc, #196]	; (8000a50 <I2C_IRQInterruptConfig+0xf0>)
 800098c:	430b      	orrs	r3, r1
 800098e:	6013      	str	r3, [r2, #0]
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}

	}

}
 8000990:	e059      	b.n	8000a46 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64) // ISER1 register (Interrupt Set-Enable Register)
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b1f      	cmp	r3, #31
 8000996:	d90f      	bls.n	80009b8 <I2C_IRQInterruptConfig+0x58>
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	2b3f      	cmp	r3, #63	; 0x3f
 800099c:	d80c      	bhi.n	80009b8 <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
 800099e:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <I2C_IRQInterruptConfig+0xf4>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	79fa      	ldrb	r2, [r7, #7]
 80009a4:	f002 021f 	and.w	r2, r2, #31
 80009a8:	2101      	movs	r1, #1
 80009aa:	fa01 f202 	lsl.w	r2, r1, r2
 80009ae:	4611      	mov	r1, r2
 80009b0:	4a28      	ldr	r2, [pc, #160]	; (8000a54 <I2C_IRQInterruptConfig+0xf4>)
 80009b2:	430b      	orrs	r3, r1
 80009b4:	6013      	str	r3, [r2, #0]
 80009b6:	e046      	b.n	8000a46 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 64 && IRQNumber < 96) // ISER2 register (Interrupt Set-Enable Register)
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	2b40      	cmp	r3, #64	; 0x40
 80009bc:	d943      	bls.n	8000a46 <I2C_IRQInterruptConfig+0xe6>
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	2b5f      	cmp	r3, #95	; 0x5f
 80009c2:	d840      	bhi.n	8000a46 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << IRQNumber % 64);
 80009c4:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <I2C_IRQInterruptConfig+0xf8>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	79fa      	ldrb	r2, [r7, #7]
 80009ca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009ce:	2101      	movs	r1, #1
 80009d0:	fa01 f202 	lsl.w	r2, r1, r2
 80009d4:	4611      	mov	r1, r2
 80009d6:	4a20      	ldr	r2, [pc, #128]	; (8000a58 <I2C_IRQInterruptConfig+0xf8>)
 80009d8:	430b      	orrs	r3, r1
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	e033      	b.n	8000a46 <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)// ICER0 register (Interrupt Clear-Enable Register)
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	2b1f      	cmp	r3, #31
 80009e2:	d80a      	bhi.n	80009fa <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80009e4:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <I2C_IRQInterruptConfig+0xfc>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	79fa      	ldrb	r2, [r7, #7]
 80009ea:	2101      	movs	r1, #1
 80009ec:	fa01 f202 	lsl.w	r2, r1, r2
 80009f0:	4611      	mov	r1, r2
 80009f2:	4a1a      	ldr	r2, [pc, #104]	; (8000a5c <I2C_IRQInterruptConfig+0xfc>)
 80009f4:	430b      	orrs	r3, r1
 80009f6:	6013      	str	r3, [r2, #0]
}
 80009f8:	e025      	b.n	8000a46 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64)// ICER1 register (Interrupt Clear-Enable Register)
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2b1f      	cmp	r3, #31
 80009fe:	d90f      	bls.n	8000a20 <I2C_IRQInterruptConfig+0xc0>
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2b3f      	cmp	r3, #63	; 0x3f
 8000a04:	d80c      	bhi.n	8000a20 <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <I2C_IRQInterruptConfig+0x100>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	79fa      	ldrb	r2, [r7, #7]
 8000a0c:	f002 021f 	and.w	r2, r2, #31
 8000a10:	2101      	movs	r1, #1
 8000a12:	fa01 f202 	lsl.w	r2, r1, r2
 8000a16:	4611      	mov	r1, r2
 8000a18:	4a11      	ldr	r2, [pc, #68]	; (8000a60 <I2C_IRQInterruptConfig+0x100>)
 8000a1a:	430b      	orrs	r3, r1
 8000a1c:	6013      	str	r3, [r2, #0]
 8000a1e:	e012      	b.n	8000a46 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 64 && IRQNumber < 96)// ICER2 register (Interrupt Clear-Enable Register)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	2b40      	cmp	r3, #64	; 0x40
 8000a24:	d90f      	bls.n	8000a46 <I2C_IRQInterruptConfig+0xe6>
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	2b5f      	cmp	r3, #95	; 0x5f
 8000a2a:	d80c      	bhi.n	8000a46 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <I2C_IRQInterruptConfig+0x104>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	79fa      	ldrb	r2, [r7, #7]
 8000a32:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a36:	2101      	movs	r1, #1
 8000a38:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4a09      	ldr	r2, [pc, #36]	; (8000a64 <I2C_IRQInterruptConfig+0x104>)
 8000a40:	430b      	orrs	r3, r1
 8000a42:	6013      	str	r3, [r2, #0]
}
 8000a44:	e7ff      	b.n	8000a46 <I2C_IRQInterruptConfig+0xe6>
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	e000e100 	.word	0xe000e100
 8000a54:	e000e104 	.word	0xe000e104
 8000a58:	e000e108 	.word	0xe000e108
 8000a5c:	e000e180 	.word	0xe000e180
 8000a60:	e000e184 	.word	0xe000e184
 8000a64:	e000e188 	.word	0xe000e188

08000a68 <I2C_MasterHandleTXEInterrupt>:




static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle )
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]

	if(pI2CHandle->TxLen > 0)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d00f      	beq.n	8000a98 <I2C_MasterHandleTXEInterrupt+0x30>
	{
		//1. load the data in to DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	781a      	ldrb	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	611a      	str	r2, [r3, #16]

		//2. decrement the TxLen
		pI2CHandle->TxLen--;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	1e5a      	subs	r2, r3, #1
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	615a      	str	r2, [r3, #20]

		//3. Increment the buffer address
		pI2CHandle->pTxBuffer++;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	1c5a      	adds	r2, r3, #1
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	60da      	str	r2, [r3, #12]

	}

}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr

08000aa2 <I2C_MasterHandleRXNEInterrupt>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle )
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
	//We have to do the data reception
	if(pI2CHandle->RxSize == 1)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6a1b      	ldr	r3, [r3, #32]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d10b      	bne.n	8000aca <I2C_MasterHandleRXNEInterrupt+0x28>
	{
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	691a      	ldr	r2, [r3, #16]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	701a      	strb	r2, [r3, #0]
		pI2CHandle->RxLen--;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	1e5a      	subs	r2, r3, #1
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	619a      	str	r2, [r3, #24]

	}


	if(pI2CHandle->RxSize > 1)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6a1b      	ldr	r3, [r3, #32]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d91a      	bls.n	8000b08 <I2C_MasterHandleRXNEInterrupt+0x66>
	{
		if(pI2CHandle->RxLen == 2)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d105      	bne.n	8000ae6 <I2C_MasterHandleRXNEInterrupt+0x44>
		{
			//clear the ack bit
			I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff21 	bl	8000928 <I2C_ManageAcking>
		}

			//read DR
			*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	691a      	ldr	r2, [r3, #16]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	691b      	ldr	r3, [r3, #16]
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	701a      	strb	r2, [r3, #0]
			pI2CHandle->pRxBuffer++;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	691b      	ldr	r3, [r3, #16]
 8000af8:	1c5a      	adds	r2, r3, #1
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	611a      	str	r2, [r3, #16]
			pI2CHandle->RxLen--;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	1e5a      	subs	r2, r3, #1
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxLen == 0 )
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d110      	bne.n	8000b32 <I2C_MasterHandleRXNEInterrupt+0x90>
	{
		//close the I2C data reception and notify the application

		//1. generate the stop condition
		if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d104      	bne.n	8000b24 <I2C_MasterHandleRXNEInterrupt+0x82>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fdb5 	bl	800068e <I2C_GenerateStopCondition>

		//2 . Close the I2C RX
		I2C_CloseReceiveData(pI2CHandle);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f000 f808 	bl	8000b3a <I2C_CloseReceiveData>

		//3. Notify the application
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_RX_CMPLT);
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f000 fa8f 	bl	8001050 <I2C_ApplicationEventCallback>
	}
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <I2C_CloseReceiveData>:
/*
 * Reset all the member elements of the handle structure. Application state, len info etc.
 * This function helps to close interrupt based communication of receiving data.
 */
void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	685a      	ldr	r2, [r3, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b50:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	685a      	ldr	r2, [r3, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b60:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->I2CConfig.I2C_ACK == I2C_ACK_ENABLE)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	7a5b      	ldrb	r3, [r3, #9]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d105      	bne.n	8000b8e <I2C_CloseReceiveData+0x54>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,ENABLE);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2101      	movs	r1, #1
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fecd 	bl	8000928 <I2C_ManageAcking>
	}

}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <I2C_CloseSendData>:
/*
 * Reset all the member elements of the handle structure. Application state, len info etc.
 * This function helps to close interrupt based communication of sending data.
 */
void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000bac:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000bbc:	605a      	str	r2, [r3, #4]


	pI2CHandle->TxRxState = I2C_READY;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	615a      	str	r2, [r3, #20]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <I2C_SlaveEnableDisableCallbackEvents>:

/*
 * Slave side enable and disable Interrupt based callbacks.
 */
void I2C_SlaveEnableDisableCallbackEvents(I2C_RegDef_t *pI2Cx,uint8_t EnorDis)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	460b      	mov	r3, r1
 8000be4:	70fb      	strb	r3, [r7, #3]
	 if(EnorDis == ENABLE)
 8000be6:	78fb      	ldrb	r3, [r7, #3]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d112      	bne.n	8000c12 <I2C_SlaveEnableDisableCallbackEvents+0x38>
	 {
			pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITERREN);
	 }

}
 8000c10:	e011      	b.n	8000c36 <I2C_SlaveEnableDisableCallbackEvents+0x5c>
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITERREN);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	605a      	str	r2, [r3, #4]
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <I2C_SlaveSendData>:
 * Used for Slave to request for data from Master device in communication
 * Slave send the datas byte by byte, so only "data" argument is enough
 * Slave applications always be in interrupt mode
 */
void I2C_SlaveSendData(I2C_RegDef_t *pI2C,uint8_t data)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	70fb      	strb	r3, [r7, #3]
	pI2C->DR = data;
 8000c4c:	78fa      	ldrb	r2, [r7, #3]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	611a      	str	r2, [r3, #16]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <I2C_SlaveReceiveData>:
 * Used for to Slave receive data from Master in communication
 * It returns the data in DR
 * Slave applications always be in interrupt mode
 */
uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2C)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
    return (uint8_t) pI2C->DR;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	b2db      	uxtb	r3, r3
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <I2C_EV_IRQHandling>:
 * There are so many EVENTS that may trigger Interrrupts, It is considered as well inside the function
 * Interrupt handling issued for both master and slave mode(TXE & RXNE part) of a device
 * STOPF event generated at the end of Rx in Slave device
 */
void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

	uint32_t temp1, temp2, temp3;

	temp1   = pI2CHandle->pI2Cx->CR2 & ( 1 << I2C_CR2_ITEVTEN) ;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c86:	617b      	str	r3, [r7, #20]
	temp2   = pI2CHandle->pI2Cx->CR2 & ( 1 << I2C_CR2_ITBUFEN) ;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c92:	613b      	str	r3, [r7, #16]

	//Setting temp3 variable to SB flag check
	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_SB);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
/*****************************************************************************************/
	//1. When interrupt generated by SB(Start Bit) event
	//SB flag in SR1 is only applicable in Master mode. For slave mode SB is always zero though.
	if(temp1 && temp3)
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d01b      	beq.n	8000cde <I2C_EV_IRQHandling+0x6a>
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d018      	beq.n	8000cde <I2C_EV_IRQHandling+0x6a>
	{
		//In this block, address phases(Read or Write) executed.
		if(pI2CHandle->TxRxState == I2C_BUSY_TX)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	7f1b      	ldrb	r3, [r3, #28]
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d108      	bne.n	8000cc6 <I2C_EV_IRQHandling+0x52>
		{
			I2C_AddressWrite(pI2CHandle->pI2Cx,pI2CHandle->DevAddr);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	7f5b      	ldrb	r3, [r3, #29]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4610      	mov	r0, r2
 8000cc0:	f7ff fc84 	bl	80005cc <I2C_AddressWrite>
 8000cc4:	e00b      	b.n	8000cde <I2C_EV_IRQHandling+0x6a>
		}else if (pI2CHandle->TxRxState == I2C_BUSY_RX )
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	7f1b      	ldrb	r3, [r3, #28]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d107      	bne.n	8000cde <I2C_EV_IRQHandling+0x6a>
		{
			I2C_AddressRead(pI2CHandle->pI2Cx,pI2CHandle->DevAddr);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	7f5b      	ldrb	r3, [r3, #29]
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4610      	mov	r0, r2
 8000cda:	f7ff fc8c 	bl	80005f6 <I2C_AddressRead>
/*****************************************************************************************/

/*****************************************************************************************/
	//2. When interrupt generated by ADDR event
	//Changing temp3 variable to ADDR flag check
	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_ADDR);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	60fb      	str	r3, [r7, #12]
	//   When master mode : Address is sent
	//	 When Slave mode  : Address matched with own address
	if(temp1 && temp3)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d005      	beq.n	8000cfc <I2C_EV_IRQHandling+0x88>
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <I2C_EV_IRQHandling+0x88>
	{
		// interrupt is generated because of ADDR event
		I2C_ClearADDRFlag(pI2CHandle);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff fc92 	bl	8000620 <I2C_ClearADDRFlag>
/*****************************************************************************************/

/*****************************************************************************************/
	//3. When interrupt generated by BTF(Byte Transfer Finished) event
	//Changing temp3 variable to BTF flag check
	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_BTF);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp3)
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d022      	beq.n	8000d54 <I2C_EV_IRQHandling+0xe0>
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d01f      	beq.n	8000d54 <I2C_EV_IRQHandling+0xe0>
	{
		//BTF flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_TX)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	7f1b      	ldrb	r3, [r3, #28]
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d11b      	bne.n	8000d54 <I2C_EV_IRQHandling+0xe0>
		{
			//make sure that TXE is also set .
			if(pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_TXE) )
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d014      	beq.n	8000d54 <I2C_EV_IRQHandling+0xe0>
			{
				//BTF, TXE = 1 ==> This is an indication of closing the communication.
			    //Both SR & DR is empty.
				//Close the communcation if only Txlen is 0
				if(pI2CHandle->TxLen == 0 )
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d110      	bne.n	8000d54 <I2C_EV_IRQHandling+0xe0>
				{
					//1. generate the STOP condition
					if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d104      	bne.n	8000d46 <I2C_EV_IRQHandling+0xd2>
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fca4 	bl	800068e <I2C_GenerateStopCondition>

					//2. reset all the member elements of the handle structure. Application state, len info etc.
					I2C_CloseSendData(pI2CHandle);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ff25 	bl	8000b96 <I2C_CloseSendData>

					//3. notify the application about transmission complete
					I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_TX_CMPLT);
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f000 f97e 	bl	8001050 <I2C_ApplicationEventCallback>
/*****************************************************************************************/

/*****************************************************************************************/
	//4. When interrupt generated by STOPF event
	//Changing temp3 variable to STOPF flag check
	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_STOPF);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	f003 0310 	and.w	r3, r3, #16
 8000d5e:	60fb      	str	r3, [r7, #12]
	//Stop detection(STOPF) flag is applicable only slave mode . For master this flag will never be set
	if(temp1 && temp3)
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d00c      	beq.n	8000d80 <I2C_EV_IRQHandling+0x10c>
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d009      	beq.n	8000d80 <I2C_EV_IRQHandling+0x10c>
	{
		//STOPF flag is set
		//We need to Clear the STOPF:
		// 1) Read SR1 == Already done by the code above
		// 2) Write to CR1
		pI2CHandle->pI2Cx->CR1 |= 0x0000; // Writing some unaffected data
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6812      	ldr	r2, [r2, #0]
 8000d76:	601a      	str	r2, [r3, #0]

		//Notify the application that STOPF is detected
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_STOPF);
 8000d78:	2102      	movs	r1, #2
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f000 f968 	bl	8001050 <I2C_ApplicationEventCallback>
/*****************************************************************************************/

/*****************************************************************************************/
	//5. When interrupt generated by TXE event
	//Changing temp3 variable to TXE flag check
	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_TXE);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d8a:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp2 && temp3)
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d01f      	beq.n	8000dd2 <I2C_EV_IRQHandling+0x15e>
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d01c      	beq.n	8000dd2 <I2C_EV_IRQHandling+0x15e>
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d019      	beq.n	8000dd2 <I2C_EV_IRQHandling+0x15e>
	{
		//Check for device mode
		if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d007      	beq.n	8000dbc <I2C_EV_IRQHandling+0x148>
		{
			//TXE flag is set, it is a indication of DR is empty.
			//We have to do the data transmission
			if(pI2CHandle->TxRxState == I2C_BUSY_TX)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	7f1b      	ldrb	r3, [r3, #28]
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d10e      	bne.n	8000dd2 <I2C_EV_IRQHandling+0x15e>
			{
				I2C_MasterHandleTXEInterrupt(pI2CHandle); //Helper function
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff fe57 	bl	8000a68 <I2C_MasterHandleTXEInterrupt>
 8000dba:	e00a      	b.n	8000dd2 <I2C_EV_IRQHandling+0x15e>
			}
		}else
		{
			//slave mode
			//make sure that the slave is really in transmitter mode
		    if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_TRA))
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <I2C_EV_IRQHandling+0x15e>
		    {
		    	I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_REQ);
 8000dca:	2108      	movs	r1, #8
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f000 f93f 	bl	8001050 <I2C_ApplicationEventCallback>
/*****************************************************************************************/

/*****************************************************************************************/
	//6. When interrupt generated by RXNE event
	//Changing temp3 variable to RXNE flag check
	temp3  = pI2CHandle->pI2Cx->SR1 & ( 1 << I2C_SR1_RXNE);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ddc:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp2 && temp3)
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d01f      	beq.n	8000e24 <I2C_EV_IRQHandling+0x1b0>
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d01c      	beq.n	8000e24 <I2C_EV_IRQHandling+0x1b0>
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d019      	beq.n	8000e24 <I2C_EV_IRQHandling+0x1b0>
	{
		//check device mode .
		if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d007      	beq.n	8000e0e <I2C_EV_IRQHandling+0x19a>
		{
			//The device is master

			//RXNE flag is set
			if(pI2CHandle->TxRxState == I2C_BUSY_RX)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	7f1b      	ldrb	r3, [r3, #28]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d10e      	bne.n	8000e24 <I2C_EV_IRQHandling+0x1b0>
			{
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff fe4b 	bl	8000aa2 <I2C_MasterHandleRXNEInterrupt>
		}
	}
/*****************************************************************************************/

/*****************************************************************************************/
}
 8000e0c:	e00a      	b.n	8000e24 <I2C_EV_IRQHandling+0x1b0>
			if(!(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_TRA)))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f003 0304 	and.w	r3, r3, #4
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d103      	bne.n	8000e24 <I2C_EV_IRQHandling+0x1b0>
				I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_RCV);
 8000e1c:	2109      	movs	r1, #9
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f000 f916 	bl	8001050 <I2C_ApplicationEventCallback>
}
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <I2C_ER_IRQHandling>:
/*
 * I2C Error IRQ handling function for implement to non-blocking communication(Interrupt)
 * ACK Failure error generated for Slave end of Tx.
 */
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e3e:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4a:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00e      	beq.n	8000e70 <I2C_ER_IRQHandling+0x44>
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d00b      	beq.n	8000e70 <I2C_ER_IRQHandling+0x44>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	695a      	ldr	r2, [r3, #20]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e66:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 8000e68:	2103      	movs	r1, #3
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f000 f8f0 	bl	8001050 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e7a:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00e      	beq.n	8000ea0 <I2C_ER_IRQHandling+0x74>
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d00b      	beq.n	8000ea0 <I2C_ER_IRQHandling+0x74>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	695a      	ldr	r2, [r3, #20]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e96:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 8000e98:	2104      	movs	r1, #4
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 f8d8 	bl	8001050 <I2C_ApplicationEventCallback>

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eaa:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00e      	beq.n	8000ed0 <I2C_ER_IRQHandling+0xa4>
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d00b      	beq.n	8000ed0 <I2C_ER_IRQHandling+0xa4>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	695a      	ldr	r2, [r3, #20]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ec6:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 8000ec8:	2105      	movs	r1, #5
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f000 f8c0 	bl	8001050 <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eda:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00e      	beq.n	8000f00 <I2C_ER_IRQHandling+0xd4>
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d00b      	beq.n	8000f00 <I2C_ER_IRQHandling+0xd4>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	695a      	ldr	r2, [r3, #20]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ef6:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 8000ef8:	2106      	movs	r1, #6
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 f8a8 	bl	8001050 <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0a:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d00e      	beq.n	8000f30 <I2C_ER_IRQHandling+0x104>
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d00b      	beq.n	8000f30 <I2C_ER_IRQHandling+0x104>
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	695a      	ldr	r2, [r3, #20]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f26:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 8000f28:	2107      	movs	r1, #7
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 f890 	bl	8001050 <I2C_ApplicationEventCallback>
	}

}
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <gpioConfig>:

//some random data for Tx operation
uint8_t random_data[32] = "Testing I2C slave mode Tx...\n";


void gpioConfig(){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08c      	sub	sp, #48	; 0x30
 8000f3c:	af00      	add	r7, sp, #0
	GPIO_Handle_t  pGPIOi2c, GPIOLed, GPIOButton;


	/* External 4.7k pull-up resistors are used */
	// I2C1
	pGPIOi2c.pGPIOx = GPIOB;
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <gpioConfig+0x74>)
 8000f40:	623b      	str	r3, [r7, #32]
	pGPIOi2c.GPIO_PinConfig.GPIO_Mode = GPIO_MODE_AF_OD; //Open drain configuration for I2C buses
 8000f42:	231c      	movs	r3, #28
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
	pGPIOi2c.GPIO_PinConfig.GPIO_Speed = GPIO_SPEED_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c

	//For SCL
	pGPIOi2c.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_6;
 8000f4a:	2306      	movs	r3, #6
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_Init(&pGPIOi2c);
 8000f4e:	f107 0320 	add.w	r3, r7, #32
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff f99c 	bl	8000290 <GPIO_Init>

	//For SDA
	pGPIOi2c.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_7;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_Init(&pGPIOi2c);
 8000f5c:	f107 0320 	add.w	r3, r7, #32
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff f995 	bl	8000290 <GPIO_Init>


	//For LED
	GPIOLed.pGPIOx = GPIOB;
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <gpioConfig+0x74>)
 8000f68:	613b      	str	r3, [r7, #16]
	GPIOLed.GPIO_PinConfig.GPIO_Mode = GPIO_MODE_OUT_PP;
 8000f6a:	2310      	movs	r3, #16
 8000f6c:	61bb      	str	r3, [r7, #24]
	GPIOLed.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_1;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
	GPIOLed.GPIO_PinConfig.GPIO_Speed = GPIO_SPEED_MEDIUM;
 8000f72:	2301      	movs	r3, #1
 8000f74:	61fb      	str	r3, [r7, #28]
	GPIO_Init(&GPIOLed);
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff f988 	bl	8000290 <GPIO_Init>

	GPIOLed.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_2;
 8000f80:	2302      	movs	r3, #2
 8000f82:	617b      	str	r3, [r7, #20]
	GPIO_Init(&GPIOLed);
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff f981 	bl	8000290 <GPIO_Init>

	//For button
	GPIOButton.pGPIOx = GPIOA;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <gpioConfig+0x78>)
 8000f90:	603b      	str	r3, [r7, #0]
	GPIOButton.GPIO_PinConfig.GPIO_Mode = GPIO_MODE_INPUT_PD;
 8000f92:	2328      	movs	r3, #40	; 0x28
 8000f94:	60bb      	str	r3, [r7, #8]
	GPIOButton.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
	GPIO_Init(&GPIOButton);
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff f977 	bl	8000290 <GPIO_Init>

}
 8000fa2:	bf00      	nop
 8000fa4:	3730      	adds	r7, #48	; 0x30
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40010c00 	.word	0x40010c00
 8000fb0:	40010800 	.word	0x40010800

08000fb4 <i2cConfig>:

/*
 * PA6 --> I2C1_SCL - Alternate Function Open Drain
 * PA7 --> I2C1_SDA - Alternate Function Open Drain
 */
void i2cConfig(){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0

	//Handle function created as global variable.

	I2C1Handle.pI2Cx = I2C1;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <i2cConfig+0x2c>)
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <i2cConfig+0x30>)
 8000fbc:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2CConfig.I2C_ACK = I2C_ACK_ENABLE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <i2cConfig+0x2c>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2CConfig.I2C_DeviceAddress = MY_ADDR;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <i2cConfig+0x2c>)
 8000fc6:	2269      	movs	r2, #105	; 0x69
 8000fc8:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2CConfig.I2C_FastModeDutyCycle = I2C_Fast_Mode_DUTY_2 ; // Since we are not using Fast mode, I will keep whatever I want, dont mind it:))
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <i2cConfig+0x2c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2CConfig.I2C_SCLSpeed = I2C_SCL_SPEED_STD;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <i2cConfig+0x2c>)
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <i2cConfig+0x34>)
 8000fd4:	605a      	str	r2, [r3, #4]


	I2C_Init(&I2C1Handle);
 8000fd6:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <i2cConfig+0x2c>)
 8000fd8:	f7ff fbf4 	bl	80007c4 <I2C_Init>
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000054 	.word	0x20000054
 8000fe4:	40005400 	.word	0x40005400
 8000fe8:	000186a0 	.word	0x000186a0

08000fec <main>:

}


int main(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0

	gpioConfig(); // GPIO INIT
 8000ff0:	f7ff ffa2 	bl	8000f38 <gpioConfig>
	i2cConfig(); // I2C INIT
 8000ff4:	f7ff ffde 	bl	8000fb4 <i2cConfig>

	//I2C IRQ configurations
	I2C_IRQInterruptConfig(IRQn_I2C1_EV,ENABLE);
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	201f      	movs	r0, #31
 8000ffc:	f7ff fcb0 	bl	8000960 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQn_I2C1_ER,ENABLE);
 8001000:	2101      	movs	r1, #1
 8001002:	2020      	movs	r0, #32
 8001004:	f7ff fcac 	bl	8000960 <I2C_IRQInterruptConfig>

	I2C_SlaveEnableDisableCallbackEvents(I2C1,ENABLE);
 8001008:	2101      	movs	r1, #1
 800100a:	4806      	ldr	r0, [pc, #24]	; (8001024 <main+0x38>)
 800100c:	f7ff fde5 	bl	8000bda <I2C_SlaveEnableDisableCallbackEvents>

	//Enable the i2c peripheral
	I2C_PeriphControl(I2C1,ENABLE);
 8001010:	2101      	movs	r1, #1
 8001012:	4804      	ldr	r0, [pc, #16]	; (8001024 <main+0x38>)
 8001014:	f7ff fbba 	bl	800078c <I2C_PeriphControl>

	//ack bit is made 1 after PE=1, this is actually handled in I2C_Init API but, we need to do it after Peripheral enable.
	I2C_ManageAcking(I2C1,I2C_ACK_ENABLE);
 8001018:	2101      	movs	r1, #1
 800101a:	4802      	ldr	r0, [pc, #8]	; (8001024 <main+0x38>)
 800101c:	f7ff fc84 	bl	8000928 <I2C_ManageAcking>

	while(1)
 8001020:	e7fe      	b.n	8001020 <main+0x34>
 8001022:	bf00      	nop
 8001024:	40005400 	.word	0x40005400

08001028 <I2C1_EV_IRQHandler>:



// Runs when an event occurs from the peripheral over I2C and fires to I2C_ApplicationEventCallback
void I2C1_EV_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <I2C1_EV_IRQHandler+0x10>)
 800102e:	f7ff fe21 	bl	8000c74 <I2C_EV_IRQHandling>
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000054 	.word	0x20000054

0800103c <I2C1_ER_IRQHandler>:

// Runs when an error occurs from the peripheral over I2C and fires to I2C_ApplicationEventCallback
void I2C1_ER_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <I2C1_ER_IRQHandler+0x10>)
 8001042:	f7ff fef3 	bl	8000e2c <I2C_ER_IRQHandling>
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000054 	.word	0x20000054

08001050 <I2C_ApplicationEventCallback>:


void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle,uint8_t AppEv)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	70fb      	strb	r3, [r7, #3]

	static uint8_t commandCode = 0; // These variables are static. So, the values of them will not change every iteration.
	static  uint8_t Counter = 0;    // Allocated in Global space, not in stacks. You can not access these variables outside this function scope.

	if(AppEv == I2C_EV_DATA_REQ) // Second, this code will be executed
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	2b08      	cmp	r3, #8
 8001060:	d123      	bne.n	80010aa <I2C_ApplicationEventCallback+0x5a>
	{
		//Master wants some data. slave has to send it
		if(commandCode == 0x51)
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <I2C_ApplicationEventCallback+0x90>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b51      	cmp	r3, #81	; 0x51
 8001068:	d10b      	bne.n	8001082 <I2C_ApplicationEventCallback+0x32>
		{
			//send the length information to the master
			I2C_SlaveSendData(pI2CHandle->pI2Cx,strlen((char*)random_data));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681c      	ldr	r4, [r3, #0]
 800106e:	481d      	ldr	r0, [pc, #116]	; (80010e4 <I2C_ApplicationEventCallback+0x94>)
 8001070:	f7ff f87e 	bl	8000170 <strlen>
 8001074:	4603      	mov	r3, r0
 8001076:	b2db      	uxtb	r3, r3
 8001078:	4619      	mov	r1, r3
 800107a:	4620      	mov	r0, r4
 800107c:	f7ff fde0 	bl	8000c40 <I2C_SlaveSendData>
	{
		//This happens only during slave reception.
		//Master has ended the I2C communication with the slave.
	}

}
 8001080:	e029      	b.n	80010d6 <I2C_ApplicationEventCallback+0x86>
		}else if (commandCode == 0x52)
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <I2C_ApplicationEventCallback+0x90>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b52      	cmp	r3, #82	; 0x52
 8001088:	d125      	bne.n	80010d6 <I2C_ApplicationEventCallback+0x86>
			I2C_SlaveSendData(pI2CHandle->pI2Cx,random_data[Counter++]);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <I2C_ApplicationEventCallback+0x98>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	1c59      	adds	r1, r3, #1
 8001094:	b2c8      	uxtb	r0, r1
 8001096:	4914      	ldr	r1, [pc, #80]	; (80010e8 <I2C_ApplicationEventCallback+0x98>)
 8001098:	7008      	strb	r0, [r1, #0]
 800109a:	4619      	mov	r1, r3
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <I2C_ApplicationEventCallback+0x94>)
 800109e:	5c5b      	ldrb	r3, [r3, r1]
 80010a0:	4619      	mov	r1, r3
 80010a2:	4610      	mov	r0, r2
 80010a4:	f7ff fdcc 	bl	8000c40 <I2C_SlaveSendData>
}
 80010a8:	e015      	b.n	80010d6 <I2C_ApplicationEventCallback+0x86>
	}else if (AppEv == I2C_EV_DATA_RCV) //First, this code will be executed
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	2b09      	cmp	r3, #9
 80010ae:	d109      	bne.n	80010c4 <I2C_ApplicationEventCallback+0x74>
		commandCode = I2C_SlaveReceiveData(pI2CHandle->pI2Cx);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fdd1 	bl	8000c5c <I2C_SlaveReceiveData>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <I2C_ApplicationEventCallback+0x90>)
 80010c0:	701a      	strb	r2, [r3, #0]
}
 80010c2:	e008      	b.n	80010d6 <I2C_ApplicationEventCallback+0x86>
	}else if (AppEv == I2C_ERROR_AF) // Third, this code will be executed
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	2b05      	cmp	r3, #5
 80010c8:	d105      	bne.n	80010d6 <I2C_ApplicationEventCallback+0x86>
		commandCode = 0xFF;
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <I2C_ApplicationEventCallback+0x90>)
 80010cc:	22ff      	movs	r2, #255	; 0xff
 80010ce:	701a      	strb	r2, [r3, #0]
		Counter = 0;
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <I2C_ApplicationEventCallback+0x98>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd90      	pop	{r4, r7, pc}
 80010de:	bf00      	nop
 80010e0:	2000007c 	.word	0x2000007c
 80010e4:	20000018 	.word	0x20000018
 80010e8:	2000007d 	.word	0x2000007d

080010ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f4:	480c      	ldr	r0, [pc, #48]	; (8001128 <LoopForever+0x6>)
  ldr r1, =_edata
 80010f6:	490d      	ldr	r1, [pc, #52]	; (800112c <LoopForever+0xa>)
  ldr r2, =_sidata
 80010f8:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <LoopForever+0xe>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <LoopForever+0x12>)
  ldr r4, =_ebss
 800110c:	4c0a      	ldr	r4, [pc, #40]	; (8001138 <LoopForever+0x16>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800111a:	f000 f811 	bl	8001140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800111e:	f7ff ff65 	bl	8000fec <main>

08001122 <LoopForever>:

LoopForever:
    b LoopForever
 8001122:	e7fe      	b.n	8001122 <LoopForever>
  ldr   r0, =_estack
 8001124:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800112c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8001130:	080011a8 	.word	0x080011a8
  ldr r2, =_sbss
 8001134:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8001138:	20000080 	.word	0x20000080

0800113c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800113c:	e7fe      	b.n	800113c <ADC_IRQHandler>
	...

08001140 <__libc_init_array>:
 8001140:	b570      	push	{r4, r5, r6, lr}
 8001142:	2600      	movs	r6, #0
 8001144:	4d0c      	ldr	r5, [pc, #48]	; (8001178 <__libc_init_array+0x38>)
 8001146:	4c0d      	ldr	r4, [pc, #52]	; (800117c <__libc_init_array+0x3c>)
 8001148:	1b64      	subs	r4, r4, r5
 800114a:	10a4      	asrs	r4, r4, #2
 800114c:	42a6      	cmp	r6, r4
 800114e:	d109      	bne.n	8001164 <__libc_init_array+0x24>
 8001150:	f000 f81a 	bl	8001188 <_init>
 8001154:	2600      	movs	r6, #0
 8001156:	4d0a      	ldr	r5, [pc, #40]	; (8001180 <__libc_init_array+0x40>)
 8001158:	4c0a      	ldr	r4, [pc, #40]	; (8001184 <__libc_init_array+0x44>)
 800115a:	1b64      	subs	r4, r4, r5
 800115c:	10a4      	asrs	r4, r4, #2
 800115e:	42a6      	cmp	r6, r4
 8001160:	d105      	bne.n	800116e <__libc_init_array+0x2e>
 8001162:	bd70      	pop	{r4, r5, r6, pc}
 8001164:	f855 3b04 	ldr.w	r3, [r5], #4
 8001168:	4798      	blx	r3
 800116a:	3601      	adds	r6, #1
 800116c:	e7ee      	b.n	800114c <__libc_init_array+0xc>
 800116e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001172:	4798      	blx	r3
 8001174:	3601      	adds	r6, #1
 8001176:	e7f2      	b.n	800115e <__libc_init_array+0x1e>
 8001178:	080011a0 	.word	0x080011a0
 800117c:	080011a0 	.word	0x080011a0
 8001180:	080011a0 	.word	0x080011a0
 8001184:	080011a4 	.word	0x080011a4

08001188 <_init>:
 8001188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118a:	bf00      	nop
 800118c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800118e:	bc08      	pop	{r3}
 8001190:	469e      	mov	lr, r3
 8001192:	4770      	bx	lr

08001194 <_fini>:
 8001194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001196:	bf00      	nop
 8001198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800119a:	bc08      	pop	{r3}
 800119c:	469e      	mov	lr, r3
 800119e:	4770      	bx	lr
