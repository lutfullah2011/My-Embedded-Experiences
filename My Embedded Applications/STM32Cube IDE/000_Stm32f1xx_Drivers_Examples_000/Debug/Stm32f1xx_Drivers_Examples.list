
Stm32f1xx_Drivers_Examples.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f00  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08001030  08001030  00011030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001038  08001038  00011040  2**0
                  CONTENTS
  4 .ARM          00000000  08001038  08001038  00011040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001038  08001040  00011040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001038  08001038  00011038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800103c  0800103c  0001103c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000000  08001040  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08001040  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011040  2**0
                  CONTENTS, READONLY
 12 .debug_info   000013bf  00000000  00000000  00011069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004d0  00000000  00000000  00012428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  000128f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000178  00000000  00000000  00012aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000014d4  00000000  00000000  00012c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000007a2  00000000  00000000  000140f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00014896  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000068c  00000000  00000000  000148e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001018 	.word	0x08001018

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001018 	.word	0x08001018

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <GPIO_PCLK>:
#include "stm32f100xx_gpio.h"


/*Peripheral Clock Setup(Enable or Disable)*/
void GPIO_PCLK(GPIO_RegDef_t *pGPIOx, uint8_t EnorDis)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	460b      	mov	r3, r1
 800018e:	70fb      	strb	r3, [r7, #3]
	  if (EnorDis != DISABLE)
 8000190:	78fb      	ldrb	r3, [r7, #3]
 8000192:	2b00      	cmp	r3, #0
 8000194:	d036      	beq.n	8000204 <GPIO_PCLK+0x80>
	  {
	      if(pGPIOx == GPIOA)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4a38      	ldr	r2, [pc, #224]	; (800027c <GPIO_PCLK+0xf8>)
 800019a:	4293      	cmp	r3, r2
 800019c:	d106      	bne.n	80001ac <GPIO_PCLK+0x28>
	      {
	    	  GPIOA_PCLK_EN();
 800019e:	4b38      	ldr	r3, [pc, #224]	; (8000280 <GPIO_PCLK+0xfc>)
 80001a0:	699b      	ldr	r3, [r3, #24]
 80001a2:	4a37      	ldr	r2, [pc, #220]	; (8000280 <GPIO_PCLK+0xfc>)
 80001a4:	f043 0304 	orr.w	r3, r3, #4
 80001a8:	6193      	str	r3, [r2, #24]
	      }else if(pGPIOx == GPIOE)
	      {
	    	  GPIOE_PCLK_DIS();
	      }
	  }
}
 80001aa:	e061      	b.n	8000270 <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOB)
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	4a35      	ldr	r2, [pc, #212]	; (8000284 <GPIO_PCLK+0x100>)
 80001b0:	4293      	cmp	r3, r2
 80001b2:	d106      	bne.n	80001c2 <GPIO_PCLK+0x3e>
	    	  GPIOB_PCLK_EN();
 80001b4:	4b32      	ldr	r3, [pc, #200]	; (8000280 <GPIO_PCLK+0xfc>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	4a31      	ldr	r2, [pc, #196]	; (8000280 <GPIO_PCLK+0xfc>)
 80001ba:	f043 0308 	orr.w	r3, r3, #8
 80001be:	6193      	str	r3, [r2, #24]
}
 80001c0:	e056      	b.n	8000270 <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOC)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	4a30      	ldr	r2, [pc, #192]	; (8000288 <GPIO_PCLK+0x104>)
 80001c6:	4293      	cmp	r3, r2
 80001c8:	d106      	bne.n	80001d8 <GPIO_PCLK+0x54>
	    	  GPIOC_PCLK_EN();
 80001ca:	4b2d      	ldr	r3, [pc, #180]	; (8000280 <GPIO_PCLK+0xfc>)
 80001cc:	699b      	ldr	r3, [r3, #24]
 80001ce:	4a2c      	ldr	r2, [pc, #176]	; (8000280 <GPIO_PCLK+0xfc>)
 80001d0:	f043 0310 	orr.w	r3, r3, #16
 80001d4:	6193      	str	r3, [r2, #24]
}
 80001d6:	e04b      	b.n	8000270 <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOD)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4a2c      	ldr	r2, [pc, #176]	; (800028c <GPIO_PCLK+0x108>)
 80001dc:	4293      	cmp	r3, r2
 80001de:	d106      	bne.n	80001ee <GPIO_PCLK+0x6a>
	    	  GPIOD_PCLK_EN();
 80001e0:	4b27      	ldr	r3, [pc, #156]	; (8000280 <GPIO_PCLK+0xfc>)
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	4a26      	ldr	r2, [pc, #152]	; (8000280 <GPIO_PCLK+0xfc>)
 80001e6:	f043 0320 	orr.w	r3, r3, #32
 80001ea:	6193      	str	r3, [r2, #24]
}
 80001ec:	e040      	b.n	8000270 <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOE)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	4a27      	ldr	r2, [pc, #156]	; (8000290 <GPIO_PCLK+0x10c>)
 80001f2:	4293      	cmp	r3, r2
 80001f4:	d13c      	bne.n	8000270 <GPIO_PCLK+0xec>
	    	  GPIOE_PCLK_EN();
 80001f6:	4b22      	ldr	r3, [pc, #136]	; (8000280 <GPIO_PCLK+0xfc>)
 80001f8:	699b      	ldr	r3, [r3, #24]
 80001fa:	4a21      	ldr	r2, [pc, #132]	; (8000280 <GPIO_PCLK+0xfc>)
 80001fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000200:	6193      	str	r3, [r2, #24]
}
 8000202:	e035      	b.n	8000270 <GPIO_PCLK+0xec>
	      if(pGPIOx == GPIOA)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4a1d      	ldr	r2, [pc, #116]	; (800027c <GPIO_PCLK+0xf8>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d106      	bne.n	800021a <GPIO_PCLK+0x96>
	    	  GPIOA_PCLK_DIS();
 800020c:	4b1c      	ldr	r3, [pc, #112]	; (8000280 <GPIO_PCLK+0xfc>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <GPIO_PCLK+0xfc>)
 8000212:	f023 0304 	bic.w	r3, r3, #4
 8000216:	6193      	str	r3, [r2, #24]
}
 8000218:	e02a      	b.n	8000270 <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOB)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4a19      	ldr	r2, [pc, #100]	; (8000284 <GPIO_PCLK+0x100>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d106      	bne.n	8000230 <GPIO_PCLK+0xac>
	    	  GPIOB_PCLK_DIS();
 8000222:	4b17      	ldr	r3, [pc, #92]	; (8000280 <GPIO_PCLK+0xfc>)
 8000224:	699b      	ldr	r3, [r3, #24]
 8000226:	4a16      	ldr	r2, [pc, #88]	; (8000280 <GPIO_PCLK+0xfc>)
 8000228:	f023 0308 	bic.w	r3, r3, #8
 800022c:	6193      	str	r3, [r2, #24]
}
 800022e:	e01f      	b.n	8000270 <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOC)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a15      	ldr	r2, [pc, #84]	; (8000288 <GPIO_PCLK+0x104>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d106      	bne.n	8000246 <GPIO_PCLK+0xc2>
	    	  GPIOC_PCLK_DIS();
 8000238:	4b11      	ldr	r3, [pc, #68]	; (8000280 <GPIO_PCLK+0xfc>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a10      	ldr	r2, [pc, #64]	; (8000280 <GPIO_PCLK+0xfc>)
 800023e:	f023 0310 	bic.w	r3, r3, #16
 8000242:	6193      	str	r3, [r2, #24]
}
 8000244:	e014      	b.n	8000270 <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOD)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4a10      	ldr	r2, [pc, #64]	; (800028c <GPIO_PCLK+0x108>)
 800024a:	4293      	cmp	r3, r2
 800024c:	d106      	bne.n	800025c <GPIO_PCLK+0xd8>
	    	  GPIOD_PCLK_DIS();
 800024e:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <GPIO_PCLK+0xfc>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <GPIO_PCLK+0xfc>)
 8000254:	f023 0320 	bic.w	r3, r3, #32
 8000258:	6193      	str	r3, [r2, #24]
}
 800025a:	e009      	b.n	8000270 <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOE)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	4a0c      	ldr	r2, [pc, #48]	; (8000290 <GPIO_PCLK+0x10c>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d105      	bne.n	8000270 <GPIO_PCLK+0xec>
	    	  GPIOE_PCLK_DIS();
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <GPIO_PCLK+0xfc>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a05      	ldr	r2, [pc, #20]	; (8000280 <GPIO_PCLK+0xfc>)
 800026a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800026e:	6193      	str	r3, [r2, #24]
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40010800 	.word	0x40010800
 8000280:	40021000 	.word	0x40021000
 8000284:	40010c00 	.word	0x40010c00
 8000288:	40011000 	.word	0x40011000
 800028c:	40011400 	.word	0x40011400
 8000290:	40011800 	.word	0x40011800

08000294 <GPIO_Init>:

/*
 * Initializes the GPIOx with the pGPIOHandle.
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]

	//Enable the Clock first .  //I configured this setting inside the Init function because user could forget to enable the clock:)
	GPIO_PCLK(pGPIOHandle->pGPIOx, ENABLE);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	2101      	movs	r1, #1
 80002a2:	4618      	mov	r0, r3
 80002a4:	f7ff ff6e 	bl	8000184 <GPIO_PCLK>

	//currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);

	/**************************************************************************************************************/
	//INTERRUPT MODE CONFIG // CHECK FIRST BELOW CONDITION FOR INTERRUPT MODES
	if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode > GPIO_MODE_AF_OD)// It means that if one of the mode is in interrupt modes or not.
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	689b      	ldr	r3, [r3, #8]
 80002ac:	2b1c      	cmp	r3, #28
 80002ae:	f240 809c 	bls.w	80003ea <GPIO_Init+0x156>
	{
		/*1. Configure the triggering selection*/
		if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_IT_RT) {
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	689b      	ldr	r3, [r3, #8]
 80002b6:	2b24      	cmp	r3, #36	; 0x24
 80002b8:	d117      	bne.n	80002ea <GPIO_Init+0x56>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Set the RTRS reg
 80002ba:	4b99      	ldr	r3, [pc, #612]	; (8000520 <GPIO_Init+0x28c>)
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	6852      	ldr	r2, [r2, #4]
 80002c2:	2101      	movs	r1, #1
 80002c4:	fa01 f202 	lsl.w	r2, r1, r2
 80002c8:	4611      	mov	r1, r2
 80002ca:	4a95      	ldr	r2, [pc, #596]	; (8000520 <GPIO_Init+0x28c>)
 80002cc:	430b      	orrs	r3, r1
 80002ce:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clear the FTRS reg
 80002d0:	4b93      	ldr	r3, [pc, #588]	; (8000520 <GPIO_Init+0x28c>)
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	687a      	ldr	r2, [r7, #4]
 80002d6:	6852      	ldr	r2, [r2, #4]
 80002d8:	2101      	movs	r1, #1
 80002da:	fa01 f202 	lsl.w	r2, r1, r2
 80002de:	43d2      	mvns	r2, r2
 80002e0:	4611      	mov	r1, r2
 80002e2:	4a8f      	ldr	r2, [pc, #572]	; (8000520 <GPIO_Init+0x28c>)
 80002e4:	400b      	ands	r3, r1
 80002e6:	60d3      	str	r3, [r2, #12]
 80002e8:	e035      	b.n	8000356 <GPIO_Init+0xc2>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_IT_FT) {
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	689b      	ldr	r3, [r3, #8]
 80002ee:	2b44      	cmp	r3, #68	; 0x44
 80002f0:	d117      	bne.n	8000322 <GPIO_Init+0x8e>
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Set the FTRS reg
 80002f2:	4b8b      	ldr	r3, [pc, #556]	; (8000520 <GPIO_Init+0x28c>)
 80002f4:	68db      	ldr	r3, [r3, #12]
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	6852      	ldr	r2, [r2, #4]
 80002fa:	2101      	movs	r1, #1
 80002fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000300:	4611      	mov	r1, r2
 8000302:	4a87      	ldr	r2, [pc, #540]	; (8000520 <GPIO_Init+0x28c>)
 8000304:	430b      	orrs	r3, r1
 8000306:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clear the RTRS reg
 8000308:	4b85      	ldr	r3, [pc, #532]	; (8000520 <GPIO_Init+0x28c>)
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	6852      	ldr	r2, [r2, #4]
 8000310:	2101      	movs	r1, #1
 8000312:	fa01 f202 	lsl.w	r2, r1, r2
 8000316:	43d2      	mvns	r2, r2
 8000318:	4611      	mov	r1, r2
 800031a:	4a81      	ldr	r2, [pc, #516]	; (8000520 <GPIO_Init+0x28c>)
 800031c:	400b      	ands	r3, r1
 800031e:	6093      	str	r3, [r2, #8]
 8000320:	e019      	b.n	8000356 <GPIO_Init+0xc2>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_IT_RFT) {
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	2b84      	cmp	r3, #132	; 0x84
 8000328:	d115      	bne.n	8000356 <GPIO_Init+0xc2>
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Set the RTRS reg
 800032a:	4b7d      	ldr	r3, [pc, #500]	; (8000520 <GPIO_Init+0x28c>)
 800032c:	689b      	ldr	r3, [r3, #8]
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	6852      	ldr	r2, [r2, #4]
 8000332:	2101      	movs	r1, #1
 8000334:	fa01 f202 	lsl.w	r2, r1, r2
 8000338:	4611      	mov	r1, r2
 800033a:	4a79      	ldr	r2, [pc, #484]	; (8000520 <GPIO_Init+0x28c>)
 800033c:	430b      	orrs	r3, r1
 800033e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Set the FTRS reg
 8000340:	4b77      	ldr	r3, [pc, #476]	; (8000520 <GPIO_Init+0x28c>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	6852      	ldr	r2, [r2, #4]
 8000348:	2101      	movs	r1, #1
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	4611      	mov	r1, r2
 8000350:	4a73      	ldr	r2, [pc, #460]	; (8000520 <GPIO_Init+0x28c>)
 8000352:	430b      	orrs	r3, r1
 8000354:	60d3      	str	r3, [r2, #12]

		}

		/*2. Configuration of the GPIO Port Selection in AFIO->EXTICR*/
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_Pin / 4; //Created for deciding which EXTICR register
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	685b      	ldr	r3, [r3, #4]
 800035a:	089b      	lsrs	r3, r3, #2
 800035c:	73fb      	strb	r3, [r7, #15]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_Pin % 4; //Created for deciding which pins(4 pin) inside the selected EXTICR register
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	b2db      	uxtb	r3, r3
 8000364:	f003 0303 	and.w	r3, r3, #3
 8000368:	73bb      	strb	r3, [r7, #14]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a6d      	ldr	r2, [pc, #436]	; (8000524 <GPIO_Init+0x290>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d01d      	beq.n	80003b0 <GPIO_Init+0x11c>
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a6b      	ldr	r2, [pc, #428]	; (8000528 <GPIO_Init+0x294>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d016      	beq.n	80003ac <GPIO_Init+0x118>
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a6a      	ldr	r2, [pc, #424]	; (800052c <GPIO_Init+0x298>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d00f      	beq.n	80003a8 <GPIO_Init+0x114>
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a68      	ldr	r2, [pc, #416]	; (8000530 <GPIO_Init+0x29c>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d008      	beq.n	80003a4 <GPIO_Init+0x110>
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a67      	ldr	r2, [pc, #412]	; (8000534 <GPIO_Init+0x2a0>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d101      	bne.n	80003a0 <GPIO_Init+0x10c>
 800039c:	2304      	movs	r3, #4
 800039e:	e008      	b.n	80003b2 <GPIO_Init+0x11e>
 80003a0:	2300      	movs	r3, #0
 80003a2:	e006      	b.n	80003b2 <GPIO_Init+0x11e>
 80003a4:	2303      	movs	r3, #3
 80003a6:	e004      	b.n	80003b2 <GPIO_Init+0x11e>
 80003a8:	2302      	movs	r3, #2
 80003aa:	e002      	b.n	80003b2 <GPIO_Init+0x11e>
 80003ac:	2301      	movs	r3, #1
 80003ae:	e000      	b.n	80003b2 <GPIO_Init+0x11e>
 80003b0:	2300      	movs	r3, #0
 80003b2:	737b      	strb	r3, [r7, #13]
		AFIO_PCLK_EN(); //Clock enabled first.
 80003b4:	4b60      	ldr	r3, [pc, #384]	; (8000538 <GPIO_Init+0x2a4>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a5f      	ldr	r2, [pc, #380]	; (8000538 <GPIO_Init+0x2a4>)
 80003ba:	f043 0301 	orr.w	r3, r3, #1
 80003be:	6193      	str	r3, [r2, #24]
		AFIO->EXTICR[temp1] = portcode << (temp2 * 4);
 80003c0:	7b7a      	ldrb	r2, [r7, #13]
 80003c2:	7bbb      	ldrb	r3, [r7, #14]
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	fa02 f103 	lsl.w	r1, r2, r3
 80003ca:	4a5c      	ldr	r2, [pc, #368]	; (800053c <GPIO_Init+0x2a8>)
 80003cc:	7bfb      	ldrb	r3, [r7, #15]
 80003ce:	3302      	adds	r3, #2
 80003d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		/*3. Enable the EXTI from interrupt mask register (EXTI->IMR)*/
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin);
 80003d4:	4b52      	ldr	r3, [pc, #328]	; (8000520 <GPIO_Init+0x28c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	6852      	ldr	r2, [r2, #4]
 80003dc:	2101      	movs	r1, #1
 80003de:	fa01 f202 	lsl.w	r2, r1, r2
 80003e2:	4611      	mov	r1, r2
 80003e4:	4a4e      	ldr	r2, [pc, #312]	; (8000520 <GPIO_Init+0x28c>)
 80003e6:	430b      	orrs	r3, r1
 80003e8:	6013      	str	r3, [r2, #0]

	}
	/**************************************************************************************************************/


	uint32_t tempmode=0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60bb      	str	r3, [r7, #8]

	// 1. Configure the mode, first define whether the mode is output or not.
	if((pGPIOHandle->GPIO_PinConfig.GPIO_Mode) & (0x10))//All output mode's 5th bit is 1 (ex: 0001 0100)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	689b      	ldr	r3, [r3, #8]
 80003f2:	f003 0310 	and.w	r3, r3, #16
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d006      	beq.n	8000408 <GPIO_Init+0x174>
	{
		pGPIOHandle->GPIO_PinConfig.GPIO_Mode |= pGPIOHandle->GPIO_PinConfig.GPIO_Speed; //Entegrating Output mode with speed
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	689a      	ldr	r2, [r3, #8]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	68db      	ldr	r3, [r3, #12]
 8000402:	431a      	orrs	r2, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	609a      	str	r2, [r3, #8]
	}

	//2. Configure the mode for CRL
	if(pGPIOHandle->GPIO_PinConfig.GPIO_Pin <=7) //Below the pin number 7 is in CRL register
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	2b07      	cmp	r3, #7
 800040e:	d861      	bhi.n	80004d4 <GPIO_Init+0x240>
	{

	    /* Reset the corresponding ODR bit to configure pull-down activation */
	    if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INPUT_PD)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	2b28      	cmp	r3, #40	; 0x28
 8000416:	d11b      	bne.n	8000450 <GPIO_Init+0x1bc>
	    {
	    	pGPIOHandle->pGPIOx->BRR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	695a      	ldr	r2, [r3, #20]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	2101      	movs	r1, #1
 8000424:	fa01 f303 	lsl.w	r3, r1, r3
 8000428:	43db      	mvns	r3, r3
 800042a:	4619      	mov	r1, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	400a      	ands	r2, r1
 8000432:	615a      	str	r2, [r3, #20]
	    	pGPIOHandle->pGPIOx->BRR |= ( 1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	695a      	ldr	r2, [r3, #20]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	2101      	movs	r1, #1
 8000440:	fa01 f303 	lsl.w	r3, r1, r3
 8000444:	4619      	mov	r1, r3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	430a      	orrs	r2, r1
 800044c:	615a      	str	r2, [r3, #20]
 800044e:	e01e      	b.n	800048e <GPIO_Init+0x1fa>
	    }
	    else
	    {
	      /* Set the corresponding ODR bit to configure pull-up activation */
	      if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	2b48      	cmp	r3, #72	; 0x48
 8000456:	d11a      	bne.n	800048e <GPIO_Init+0x1fa>
	      {
	  		  pGPIOHandle->pGPIOx->BSRR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clearing the corresponding bits.
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	691a      	ldr	r2, [r3, #16]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	2101      	movs	r1, #1
 8000464:	fa01 f303 	lsl.w	r3, r1, r3
 8000468:	43db      	mvns	r3, r3
 800046a:	4619      	mov	r1, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	400a      	ands	r2, r1
 8000472:	611a      	str	r2, [r3, #16]
	    	  pGPIOHandle->pGPIOx->BSRR |= ( 1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	691a      	ldr	r2, [r3, #16]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	2101      	movs	r1, #1
 8000480:	fa01 f303 	lsl.w	r3, r1, r3
 8000484:	4619      	mov	r1, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	430a      	orrs	r2, r1
 800048c:	611a      	str	r2, [r3, #16]
	      }
	    }

		tempmode |= (((pGPIOHandle->GPIO_PinConfig.GPIO_Mode) & (0x0F)) <<  (4 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin) ); // Getting the last 4 bits of GPIO_Mode to shift them 4 times left properly
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	689b      	ldr	r3, [r3, #8]
 8000492:	f003 020f 	and.w	r2, r3, #15
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	fa02 f303 	lsl.w	r3, r2, r3
 80004a0:	68ba      	ldr	r2, [r7, #8]
 80004a2:	4313      	orrs	r3, r2
 80004a4:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->CRL &= ~( 0xF << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin) ); // Clearing the corresponding bits first.
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	210f      	movs	r1, #15
 80004b4:	fa01 f303 	lsl.w	r3, r1, r3
 80004b8:	43db      	mvns	r3, r3
 80004ba:	4619      	mov	r1, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	400a      	ands	r2, r1
 80004c2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= tempmode;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	6819      	ldr	r1, [r3, #0]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	68ba      	ldr	r2, [r7, #8]
 80004d0:	430a      	orrs	r2, r1
 80004d2:	601a      	str	r2, [r3, #0]
	}


	//3. Configure the mode for CRH
	if(pGPIOHandle->GPIO_PinConfig.GPIO_Pin >7) //Above the pin number 7 is in CRH register
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	2b07      	cmp	r3, #7
 80004da:	d975      	bls.n	80005c8 <GPIO_Init+0x334>
	{
		tempmode=0;
 80004dc:	2300      	movs	r3, #0
 80004de:	60bb      	str	r3, [r7, #8]

	    /* Reset the corresponding ODR bit to configure pull-down activation(Told in Reference Manual) */
	    if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INPUT_PD)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	2b28      	cmp	r3, #40	; 0x28
 80004e6:	d12b      	bne.n	8000540 <GPIO_Init+0x2ac>
	    {
	    	pGPIOHandle->pGPIOx->BRR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clearing the corresponding bits.
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	695a      	ldr	r2, [r3, #20]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	2101      	movs	r1, #1
 80004f4:	fa01 f303 	lsl.w	r3, r1, r3
 80004f8:	43db      	mvns	r3, r3
 80004fa:	4619      	mov	r1, r3
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	400a      	ands	r2, r1
 8000502:	615a      	str	r2, [r3, #20]
	    	pGPIOHandle->pGPIOx->BRR |= ( 1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	695a      	ldr	r2, [r3, #20]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	2101      	movs	r1, #1
 8000510:	fa01 f303 	lsl.w	r3, r1, r3
 8000514:	4619      	mov	r1, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	430a      	orrs	r2, r1
 800051c:	615a      	str	r2, [r3, #20]
 800051e:	e02e      	b.n	800057e <GPIO_Init+0x2ea>
 8000520:	40010400 	.word	0x40010400
 8000524:	40010800 	.word	0x40010800
 8000528:	40010c00 	.word	0x40010c00
 800052c:	40011000 	.word	0x40011000
 8000530:	40011400 	.word	0x40011400
 8000534:	40011800 	.word	0x40011800
 8000538:	40021000 	.word	0x40021000
 800053c:	40010000 	.word	0x40010000
	    }
	    else
	    {
	      /* Set the corresponding ODR bit to configure pull-up activation(Told in Reference Manual) */
	      if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	2b48      	cmp	r3, #72	; 0x48
 8000546:	d11a      	bne.n	800057e <GPIO_Init+0x2ea>
	      {
	    	  pGPIOHandle->pGPIOx->BSRR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clearing the corresponding bits.
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	691a      	ldr	r2, [r3, #16]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	2101      	movs	r1, #1
 8000554:	fa01 f303 	lsl.w	r3, r1, r3
 8000558:	43db      	mvns	r3, r3
 800055a:	4619      	mov	r1, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	400a      	ands	r2, r1
 8000562:	611a      	str	r2, [r3, #16]
	    	  pGPIOHandle->pGPIOx->BSRR |= ( 1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	691a      	ldr	r2, [r3, #16]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	2101      	movs	r1, #1
 8000570:	fa01 f303 	lsl.w	r3, r1, r3
 8000574:	4619      	mov	r1, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	430a      	orrs	r2, r1
 800057c:	611a      	str	r2, [r3, #16]
	      }
	    }

		tempmode |= (((pGPIOHandle->GPIO_PinConfig.GPIO_Mode) & (0x0F)) <<  (4 * ((pGPIOHandle->GPIO_PinConfig.GPIO_Pin) - 8)) ); // Getting the last 4 bits of GPIO_Mode to shift them 4 times left properly. Between 8-16 pin number
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	f003 020f 	and.w	r2, r3, #15
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	3b08      	subs	r3, #8
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	68ba      	ldr	r2, [r7, #8]
 8000594:	4313      	orrs	r3, r2
 8000596:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->CRH &= ~( 0xF << (4 * ((pGPIOHandle->GPIO_PinConfig.GPIO_Pin) - 8)) ); // Clearing the corresponding bits first.
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	685a      	ldr	r2, [r3, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	3b08      	subs	r3, #8
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	210f      	movs	r1, #15
 80005a8:	fa01 f303 	lsl.w	r3, r1, r3
 80005ac:	43db      	mvns	r3, r3
 80005ae:	4619      	mov	r1, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	400a      	ands	r2, r1
 80005b6:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= tempmode ;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	6859      	ldr	r1, [r3, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	430a      	orrs	r2, r1
 80005c6:	605a      	str	r2, [r3, #4]

	}

}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <GPIO_ToggleOutputPin>:
	pGPIOx->ODR = Value;

}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1<<PinNumber);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	78fa      	ldrb	r2, [r7, #3]
 80005e2:	2101      	movs	r1, #1
 80005e4:	fa01 f202 	lsl.w	r2, r1, r2
 80005e8:	405a      	eors	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	60da      	str	r2, [r3, #12]

}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr

080005f8 <GPIO_IRQInterruptConfig>:
 * NVIC register Configurations for Interrupts.
 * We have less than 96 IRQ numbers in this device header. First 3 register of below registers is enough for us.
 * IRQ(Interrupt Request) Number definitions are in stm32f1xx.h(device header file)
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDis)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	460a      	mov	r2, r1
 8000602:	71fb      	strb	r3, [r7, #7]
 8000604:	4613      	mov	r3, r2
 8000606:	71bb      	strb	r3, [r7, #6]

	if(EnorDis == ENABLE)
 8000608:	79bb      	ldrb	r3, [r7, #6]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d133      	bne.n	8000676 <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31) // ISER0 register (Interrupt Set-Enable Register)
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2b1f      	cmp	r3, #31
 8000612:	d80a      	bhi.n	800062a <GPIO_IRQInterruptConfig+0x32>
		{
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000614:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <GPIO_IRQInterruptConfig+0xf0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	79fa      	ldrb	r2, [r7, #7]
 800061a:	2101      	movs	r1, #1
 800061c:	fa01 f202 	lsl.w	r2, r1, r2
 8000620:	4611      	mov	r1, r2
 8000622:	4a31      	ldr	r2, [pc, #196]	; (80006e8 <GPIO_IRQInterruptConfig+0xf0>)
 8000624:	430b      	orrs	r3, r1
 8000626:	6013      	str	r3, [r2, #0]
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}

	}

}
 8000628:	e059      	b.n	80006de <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64) // ISER1 register (Interrupt Set-Enable Register)
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2b1f      	cmp	r3, #31
 800062e:	d90f      	bls.n	8000650 <GPIO_IRQInterruptConfig+0x58>
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2b3f      	cmp	r3, #63	; 0x3f
 8000634:	d80c      	bhi.n	8000650 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
 8000636:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <GPIO_IRQInterruptConfig+0xf4>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	79fa      	ldrb	r2, [r7, #7]
 800063c:	f002 021f 	and.w	r2, r2, #31
 8000640:	2101      	movs	r1, #1
 8000642:	fa01 f202 	lsl.w	r2, r1, r2
 8000646:	4611      	mov	r1, r2
 8000648:	4a28      	ldr	r2, [pc, #160]	; (80006ec <GPIO_IRQInterruptConfig+0xf4>)
 800064a:	430b      	orrs	r3, r1
 800064c:	6013      	str	r3, [r2, #0]
 800064e:	e046      	b.n	80006de <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 64 && IRQNumber < 96) // ISER2 register (Interrupt Set-Enable Register)
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	2b40      	cmp	r3, #64	; 0x40
 8000654:	d943      	bls.n	80006de <GPIO_IRQInterruptConfig+0xe6>
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b5f      	cmp	r3, #95	; 0x5f
 800065a:	d840      	bhi.n	80006de <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << IRQNumber % 64);
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <GPIO_IRQInterruptConfig+0xf8>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	79fa      	ldrb	r2, [r7, #7]
 8000662:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000666:	2101      	movs	r1, #1
 8000668:	fa01 f202 	lsl.w	r2, r1, r2
 800066c:	4611      	mov	r1, r2
 800066e:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <GPIO_IRQInterruptConfig+0xf8>)
 8000670:	430b      	orrs	r3, r1
 8000672:	6013      	str	r3, [r2, #0]
}
 8000674:	e033      	b.n	80006de <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)// ICER0 register (Interrupt Clear-Enable Register)
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2b1f      	cmp	r3, #31
 800067a:	d80a      	bhi.n	8000692 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <GPIO_IRQInterruptConfig+0xfc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	79fa      	ldrb	r2, [r7, #7]
 8000682:	2101      	movs	r1, #1
 8000684:	fa01 f202 	lsl.w	r2, r1, r2
 8000688:	4611      	mov	r1, r2
 800068a:	4a1a      	ldr	r2, [pc, #104]	; (80006f4 <GPIO_IRQInterruptConfig+0xfc>)
 800068c:	430b      	orrs	r3, r1
 800068e:	6013      	str	r3, [r2, #0]
}
 8000690:	e025      	b.n	80006de <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64)// ICER1 register (Interrupt Clear-Enable Register)
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2b1f      	cmp	r3, #31
 8000696:	d90f      	bls.n	80006b8 <GPIO_IRQInterruptConfig+0xc0>
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	2b3f      	cmp	r3, #63	; 0x3f
 800069c:	d80c      	bhi.n	80006b8 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <GPIO_IRQInterruptConfig+0x100>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	79fa      	ldrb	r2, [r7, #7]
 80006a4:	f002 021f 	and.w	r2, r2, #31
 80006a8:	2101      	movs	r1, #1
 80006aa:	fa01 f202 	lsl.w	r2, r1, r2
 80006ae:	4611      	mov	r1, r2
 80006b0:	4a11      	ldr	r2, [pc, #68]	; (80006f8 <GPIO_IRQInterruptConfig+0x100>)
 80006b2:	430b      	orrs	r3, r1
 80006b4:	6013      	str	r3, [r2, #0]
 80006b6:	e012      	b.n	80006de <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 64 && IRQNumber < 96)// ICER2 register (Interrupt Clear-Enable Register)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	2b40      	cmp	r3, #64	; 0x40
 80006bc:	d90f      	bls.n	80006de <GPIO_IRQInterruptConfig+0xe6>
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b5f      	cmp	r3, #95	; 0x5f
 80006c2:	d80c      	bhi.n	80006de <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <GPIO_IRQInterruptConfig+0x104>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	79fa      	ldrb	r2, [r7, #7]
 80006ca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80006ce:	2101      	movs	r1, #1
 80006d0:	fa01 f202 	lsl.w	r2, r1, r2
 80006d4:	4611      	mov	r1, r2
 80006d6:	4a09      	ldr	r2, [pc, #36]	; (80006fc <GPIO_IRQInterruptConfig+0x104>)
 80006d8:	430b      	orrs	r3, r1
 80006da:	6013      	str	r3, [r2, #0]
}
 80006dc:	e7ff      	b.n	80006de <GPIO_IRQInterruptConfig+0xe6>
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	e000e100 	.word	0xe000e100
 80006ec:	e000e104 	.word	0xe000e104
 80006f0:	e000e108 	.word	0xe000e108
 80006f4:	e000e180 	.word	0xe000e180
 80006f8:	e000e184 	.word	0xe000e184
 80006fc:	e000e188 	.word	0xe000e188

08000700 <GPIO_IRQPriorityConfig>:


void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	71fb      	strb	r3, [r7, #7]
	// Find out the IPR(Interrupt Priority Register)
	uint8_t iprx = IRQNumber / 4; //each iprx is 8 bit, 32 bit is divided by 4
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	089b      	lsrs	r3, r3, #2
 8000710:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f003 0303 	and.w	r3, r3, #3
 8000718:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = (8 * iprx_section) + (8- NO_PR_BITS_IMPLEMENTED); //PR=Priority & NO_PR_BITS_IMPLEMENTED=4 // Every 8 bits of iprx's first 4 bit is not used. So, we just left shifted 4 times. Thats it
 800071a:	7bbb      	ldrb	r3, [r7, #14]
 800071c:	00db      	lsls	r3, r3, #3
 800071e:	b2db      	uxtb	r3, r3
 8000720:	3304      	adds	r3, #4
 8000722:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR +  iprx ) |= ( IRQPriority << shift_amount ) ;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800072c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000730:	6819      	ldr	r1, [r3, #0]
 8000732:	7b7b      	ldrb	r3, [r7, #13]
 8000734:	683a      	ldr	r2, [r7, #0]
 8000736:	409a      	lsls	r2, r3
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000740:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000744:	430a      	orrs	r2, r1
 8000746:	601a      	str	r2, [r3, #0]

}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
	...

08000754 <GPIO_IRQHandling>:
/*
 * IRQ Handling function will use inside the actual IRQ_Handling
 * function implemented as weak in startup file.
 */
void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	//Clear the EXTI PR Register corresponding to the pin number. So that interrrupt could occurs again
	if(EXTI->PR & (1 << PinNumber))
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <GPIO_IRQHandling+0x3c>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	79fa      	ldrb	r2, [r7, #7]
 8000764:	2101      	movs	r1, #1
 8000766:	fa01 f202 	lsl.w	r2, r1, r2
 800076a:	4013      	ands	r3, r2
 800076c:	2b00      	cmp	r3, #0
 800076e:	d009      	beq.n	8000784 <GPIO_IRQHandling+0x30>
	{
		EXTI->PR |=  (1 << PinNumber);
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <GPIO_IRQHandling+0x3c>)
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	79fa      	ldrb	r2, [r7, #7]
 8000776:	2101      	movs	r1, #1
 8000778:	fa01 f202 	lsl.w	r2, r1, r2
 800077c:	4611      	mov	r1, r2
 800077e:	4a04      	ldr	r2, [pc, #16]	; (8000790 <GPIO_IRQHandling+0x3c>)
 8000780:	430b      	orrs	r3, r1
 8000782:	6153      	str	r3, [r2, #20]
	}


}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40010400 	.word	0x40010400

08000794 <SPI_PCLK>:
/*
 * Peripheral Clock Setup
 * I used only SPI1, So it is simple.
 */
void SPI_PCLK(SPI_RegDef_t *pSPIx, uint8_t EnorDis)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	70fb      	strb	r3, [r7, #3]

	  if (EnorDis != DISABLE)
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d006      	beq.n	80007b4 <SPI_PCLK+0x20>
	  {
		  SPI1_PCLK_EN();
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <SPI_PCLK+0x38>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <SPI_PCLK+0x38>)
 80007ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007b0:	6193      	str	r3, [r2, #24]
	  }else
	  {
		  SPI1_PCLK_DIS();
	  }
}
 80007b2:	e005      	b.n	80007c0 <SPI_PCLK+0x2c>
		  SPI1_PCLK_DIS();
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <SPI_PCLK+0x38>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <SPI_PCLK+0x38>)
 80007ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007be:	6193      	str	r3, [r2, #24]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000

080007d0 <SPI_Init>:

/*
 * Initializes the SPIx with the pSPIHandle.
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]

	//Enable the Clock first .  //I configured this setting inside the Init function because user could forget to enable the clock:)
	SPI_PCLK(pSPIHandle->pSPIx, ENABLE);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2101      	movs	r1, #1
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ffd8 	bl	8000794 <SPI_PCLK>


	/**************************	SPI_CR1 Configuration *******************************/
	uint32_t tempreg = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]

	//1. Device mode configuration
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	791b      	ldrb	r3, [r3, #4]
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	461a      	mov	r2, r3
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	60fb      	str	r3, [r7, #12]


	//2. Bus configuration(Direction)
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) //Full dublex
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	795b      	ldrb	r3, [r3, #5]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d104      	bne.n	8000808 <SPI_Init+0x38>
	{
		tempreg &= ~(1<<SPI_CR1_BIDIMODE); //Clear BIDIMODE bit in CR1 Reg
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	e014      	b.n	8000832 <SPI_Init+0x62>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) //Half dublex
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	795b      	ldrb	r3, [r3, #5]
 800080c:	2b02      	cmp	r3, #2
 800080e:	d104      	bne.n	800081a <SPI_Init+0x4a>
	{
		tempreg |= (1<<SPI_CR1_BIDIMODE); //Set BIDIMODE bit in CR1 Reg
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	e00b      	b.n	8000832 <SPI_Init+0x62>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_S_RXONLY) //Simplex Receive Only
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	795b      	ldrb	r3, [r3, #5]
 800081e:	2b03      	cmp	r3, #3
 8000820:	d107      	bne.n	8000832 <SPI_Init+0x62>
	{
		tempreg &= ~(1<<SPI_CR1_BIDIMODE); //Clear BIDIMODE bit in CR1 Reg
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000828:	60fb      	str	r3, [r7, #12]
		tempreg |= (1<<SPI_CR1_RXONLY); //Set RXONLY bit in CR1 Reg (output disabled)
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000830:	60fb      	str	r3, [r7, #12]
	}

	//3. (Speed)Baud rate control Configuration
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	799b      	ldrb	r3, [r3, #6]
 8000836:	00db      	lsls	r3, r3, #3
 8000838:	461a      	mov	r2, r3
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	4313      	orrs	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]

	//4. DFF(Data Frame Format) Configuration
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF ;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	79db      	ldrb	r3, [r3, #7]
 8000844:	02db      	lsls	r3, r3, #11
 8000846:	461a      	mov	r2, r3
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	4313      	orrs	r3, r2
 800084c:	60fb      	str	r3, [r7, #12]

	//5. CPOL Configuration
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL <<SPI_CR1_CPOL;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	7a1b      	ldrb	r3, [r3, #8]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	461a      	mov	r2, r3
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	4313      	orrs	r3, r2
 800085a:	60fb      	str	r3, [r7, #12]

	//6. CPHA Configuration
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	7a5b      	ldrb	r3, [r3, #9]
 8000860:	461a      	mov	r2, r3
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	4313      	orrs	r3, r2
 8000866:	60fb      	str	r3, [r7, #12]

	//7. SSM Configuration
	tempreg |= pSPIHandle->SPIConfig.SPI_SPI_SSM << SPI_CR1_SSM;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	7a9b      	ldrb	r3, [r3, #10]
 800086c:	025b      	lsls	r3, r3, #9
 800086e:	461a      	mov	r2, r3
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	4313      	orrs	r3, r2
 8000874:	60fb      	str	r3, [r7, #12]


	pSPIHandle->pSPIx->CR1 = tempreg; //putting all settings into actual place which is CR1 reg.
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	601a      	str	r2, [r3, #0]
}
 800087e:	bf00      	nop
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <SPI_GetFlagStatus>:
//	}
}


uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000886:	b480      	push	{r7}
 8000888:	b083      	sub	sp, #12
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
 800088e:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	689a      	ldr	r2, [r3, #8]
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	4013      	ands	r3, r2
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800089c:	2301      	movs	r3, #1
 800089e:	e000      	b.n	80008a2 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <SPI_PeriphControl>:

/*
 * SPI Peripheral Enable or Disable Configuration API
 */
void SPI_PeriphControl(SPI_RegDef_t *pSPIx, uint8_t EnorDis)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	70fb      	strb	r3, [r7, #3]
	  if (EnorDis != DISABLE)
 80008b8:	78fb      	ldrb	r3, [r7, #3]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d006      	beq.n	80008cc <SPI_PeriphControl+0x20>
	  {
		  pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	601a      	str	r2, [r3, #0]

	  }else
	  {
		  pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	  }
}
 80008ca:	e005      	b.n	80008d8 <SPI_PeriphControl+0x2c>
		  pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	601a      	str	r2, [r3, #0]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr

080008e2 <SPI_SSOEConfig>:

/*
 * SPI SSOE bit Enable or Disable Configuration API
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDis)
{
 80008e2:	b480      	push	{r7}
 80008e4:	b083      	sub	sp, #12
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
 80008ea:	460b      	mov	r3, r1
 80008ec:	70fb      	strb	r3, [r7, #3]
	  if (EnorDis != DISABLE)
 80008ee:	78fb      	ldrb	r3, [r7, #3]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d006      	beq.n	8000902 <SPI_SSOEConfig+0x20>
	  {
		  pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	f043 0204 	orr.w	r2, r3, #4
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	605a      	str	r2, [r3, #4]

	  }else
	  {
		  pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	  }
}
 8000900:	e005      	b.n	800090e <SPI_SSOEConfig+0x2c>
		  pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f023 0204 	bic.w	r2, r3, #4
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	605a      	str	r2, [r3, #4]
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <SPI_IRQInterruptConfig>:
 * NVIC register Configurations for Interrupts.
 * We have less than 96 IRQ numbers in this device header. First 3 register of below registers is enough for us.
 * IRQ(Interrupt Request) Number definitions are in stm32f1xx.h(device header file)
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDis)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	460a      	mov	r2, r1
 8000922:	71fb      	strb	r3, [r7, #7]
 8000924:	4613      	mov	r3, r2
 8000926:	71bb      	strb	r3, [r7, #6]

	if(EnorDis == ENABLE)
 8000928:	79bb      	ldrb	r3, [r7, #6]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d133      	bne.n	8000996 <SPI_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31) // ISER0 register (Interrupt Set-Enable Register)
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	2b1f      	cmp	r3, #31
 8000932:	d80a      	bhi.n	800094a <SPI_IRQInterruptConfig+0x32>
		{
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000934:	4b34      	ldr	r3, [pc, #208]	; (8000a08 <SPI_IRQInterruptConfig+0xf0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	79fa      	ldrb	r2, [r7, #7]
 800093a:	2101      	movs	r1, #1
 800093c:	fa01 f202 	lsl.w	r2, r1, r2
 8000940:	4611      	mov	r1, r2
 8000942:	4a31      	ldr	r2, [pc, #196]	; (8000a08 <SPI_IRQInterruptConfig+0xf0>)
 8000944:	430b      	orrs	r3, r1
 8000946:	6013      	str	r3, [r2, #0]
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}

	}

}
 8000948:	e059      	b.n	80009fe <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64) // ISER1 register (Interrupt Set-Enable Register)
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	2b1f      	cmp	r3, #31
 800094e:	d90f      	bls.n	8000970 <SPI_IRQInterruptConfig+0x58>
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	2b3f      	cmp	r3, #63	; 0x3f
 8000954:	d80c      	bhi.n	8000970 <SPI_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
 8000956:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <SPI_IRQInterruptConfig+0xf4>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	79fa      	ldrb	r2, [r7, #7]
 800095c:	f002 021f 	and.w	r2, r2, #31
 8000960:	2101      	movs	r1, #1
 8000962:	fa01 f202 	lsl.w	r2, r1, r2
 8000966:	4611      	mov	r1, r2
 8000968:	4a28      	ldr	r2, [pc, #160]	; (8000a0c <SPI_IRQInterruptConfig+0xf4>)
 800096a:	430b      	orrs	r3, r1
 800096c:	6013      	str	r3, [r2, #0]
 800096e:	e046      	b.n	80009fe <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 64 && IRQNumber < 96) // ISER2 register (Interrupt Set-Enable Register)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	2b40      	cmp	r3, #64	; 0x40
 8000974:	d943      	bls.n	80009fe <SPI_IRQInterruptConfig+0xe6>
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b5f      	cmp	r3, #95	; 0x5f
 800097a:	d840      	bhi.n	80009fe <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << IRQNumber % 64);
 800097c:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <SPI_IRQInterruptConfig+0xf8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	79fa      	ldrb	r2, [r7, #7]
 8000982:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000986:	2101      	movs	r1, #1
 8000988:	fa01 f202 	lsl.w	r2, r1, r2
 800098c:	4611      	mov	r1, r2
 800098e:	4a20      	ldr	r2, [pc, #128]	; (8000a10 <SPI_IRQInterruptConfig+0xf8>)
 8000990:	430b      	orrs	r3, r1
 8000992:	6013      	str	r3, [r2, #0]
}
 8000994:	e033      	b.n	80009fe <SPI_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)// ICER0 register (Interrupt Clear-Enable Register)
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b1f      	cmp	r3, #31
 800099a:	d80a      	bhi.n	80009b2 <SPI_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 800099c:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <SPI_IRQInterruptConfig+0xfc>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	79fa      	ldrb	r2, [r7, #7]
 80009a2:	2101      	movs	r1, #1
 80009a4:	fa01 f202 	lsl.w	r2, r1, r2
 80009a8:	4611      	mov	r1, r2
 80009aa:	4a1a      	ldr	r2, [pc, #104]	; (8000a14 <SPI_IRQInterruptConfig+0xfc>)
 80009ac:	430b      	orrs	r3, r1
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	e025      	b.n	80009fe <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64)// ICER1 register (Interrupt Clear-Enable Register)
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b1f      	cmp	r3, #31
 80009b6:	d90f      	bls.n	80009d8 <SPI_IRQInterruptConfig+0xc0>
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	2b3f      	cmp	r3, #63	; 0x3f
 80009bc:	d80c      	bhi.n	80009d8 <SPI_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 80009be:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <SPI_IRQInterruptConfig+0x100>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	79fa      	ldrb	r2, [r7, #7]
 80009c4:	f002 021f 	and.w	r2, r2, #31
 80009c8:	2101      	movs	r1, #1
 80009ca:	fa01 f202 	lsl.w	r2, r1, r2
 80009ce:	4611      	mov	r1, r2
 80009d0:	4a11      	ldr	r2, [pc, #68]	; (8000a18 <SPI_IRQInterruptConfig+0x100>)
 80009d2:	430b      	orrs	r3, r1
 80009d4:	6013      	str	r3, [r2, #0]
 80009d6:	e012      	b.n	80009fe <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 64 && IRQNumber < 96)// ICER2 register (Interrupt Clear-Enable Register)
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	2b40      	cmp	r3, #64	; 0x40
 80009dc:	d90f      	bls.n	80009fe <SPI_IRQInterruptConfig+0xe6>
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	2b5f      	cmp	r3, #95	; 0x5f
 80009e2:	d80c      	bhi.n	80009fe <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
 80009e4:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <SPI_IRQInterruptConfig+0x104>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	79fa      	ldrb	r2, [r7, #7]
 80009ea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009ee:	2101      	movs	r1, #1
 80009f0:	fa01 f202 	lsl.w	r2, r1, r2
 80009f4:	4611      	mov	r1, r2
 80009f6:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <SPI_IRQInterruptConfig+0x104>)
 80009f8:	430b      	orrs	r3, r1
 80009fa:	6013      	str	r3, [r2, #0]
}
 80009fc:	e7ff      	b.n	80009fe <SPI_IRQInterruptConfig+0xe6>
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	e000e100 	.word	0xe000e100
 8000a0c:	e000e104 	.word	0xe000e104
 8000a10:	e000e108 	.word	0xe000e108
 8000a14:	e000e180 	.word	0xe000e180
 8000a18:	e000e184 	.word	0xe000e184
 8000a1c:	e000e188 	.word	0xe000e188

08000a20 <SPI_SendDataIT>:

/*
 * Data Send with non-blocking(Interrupt) Method
 */
uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle,uint8_t *pTxBuffer, uint32_t Len)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b087      	sub	sp, #28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->TxState;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	7f1b      	ldrb	r3, [r3, #28]
 8000a30:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_TX)
 8000a32:	7dfb      	ldrb	r3, [r7, #23]
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d010      	beq.n	8000a5a <SPI_SendDataIT+0x3a>
	{
		// Save the Tx buffer address and Len information in some SPI_Handle_t struct.
		pSPIHandle->pTxBuffer = pTxBuffer;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = Len;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	615a      	str	r2, [r3, #20]

		//SPI is in the busy state with transmission business, no takes over
		pSPIHandle->TxState = SPI_BUSY_TX;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2202      	movs	r2, #2
 8000a48:	771a      	strb	r2, [r3, #28]

		//TXEIE bit Enabled to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= ( 1 << SPI_CR2_TXEIE );
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a58:	605a      	str	r2, [r3, #4]
		//Data transmission handled by IRQHandling !

	}


	return state;
 8000a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	371c      	adds	r7, #28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr

08000a66 <SPI_ReceiveDataIT>:

/*
 * Data Receive with non-blocking(Interrupt) Method
 */
uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b087      	sub	sp, #28
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	60f8      	str	r0, [r7, #12]
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->RxState;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	7f5b      	ldrb	r3, [r3, #29]
 8000a76:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_RX)
 8000a78:	7dfb      	ldrb	r3, [r7, #23]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d010      	beq.n	8000aa0 <SPI_ReceiveDataIT+0x3a>
	{
		// Save the Rx buffer address and Len information in some SPI_Handle_t struct.
		pSPIHandle->pRxBuffer = pRxBuffer;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	68ba      	ldr	r2, [r7, #8]
 8000a82:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = Len;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	619a      	str	r2, [r3, #24]

		//SPI is in the busy state with reception business, no takes over
		pSPIHandle->RxState = SPI_BUSY_RX;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	775a      	strb	r2, [r3, #29]

		//RXNEIE bit Enabled to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= ( 1 << SPI_CR2_RXNEIE );
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	685a      	ldr	r2, [r3, #4]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a9e:	605a      	str	r2, [r3, #4]


	}


	return state;
 8000aa0:	7dfb      	ldrb	r3, [r7, #23]

}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	371c      	adds	r7, #28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <SPI_IRQHandling>:
/*
 * IRQ Handling function will use inside the actual IRQ_Handling
 * function implemented as weak in startup file.
 */
void SPI_IRQHandling(SPI_Handle_t *pHandle)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]

	uint8_t temp1 , temp2;
	//Checking TXE
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_TXE); //Test the TXE flag set or not in the SR
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_TXEIE);//Test the TXEIE set or not in the CR2
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000ace:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2) // if txe & txeie are set
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d005      	beq.n	8000ae2 <SPI_IRQHandling+0x36>
 8000ad6:	7bbb      	ldrb	r3, [r7, #14]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d002      	beq.n	8000ae2 <SPI_IRQHandling+0x36>
	{
		//handle TXE
		spi_txe_interrupt_handle(pHandle);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f000 f832 	bl	8000b46 <spi_txe_interrupt_handle>
	}

	//Checking RXNE
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_RXNE); //Test the RXNE flag set or not in the SR
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_RXNEIE); //Test the RXNEIE set or not in the CR2
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000afc:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2) // if rxne & rxneie are set
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d005      	beq.n	8000b10 <SPI_IRQHandling+0x64>
 8000b04:	7bbb      	ldrb	r3, [r7, #14]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d002      	beq.n	8000b10 <SPI_IRQHandling+0x64>
	{
		//handle RXNE
		spi_rxne_interrupt_handle(pHandle);
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f000 f85b 	bl	8000bc6 <spi_rxne_interrupt_handle>
	}

	// Checking OVR Flag
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_OVR);//Test the OVR flag set or not in the SR
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b1c:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_ERRIE); //Test the ERRIE set or not in the CR2
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	f003 0320 	and.w	r3, r3, #32
 8000b2a:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2) // if ovr & errie are set
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d005      	beq.n	8000b3e <SPI_IRQHandling+0x92>
 8000b32:	7bbb      	ldrb	r3, [r7, #14]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d002      	beq.n	8000b3e <SPI_IRQHandling+0x92>
	{
		//handle ovr error
		spi_ovr_err_interrupt_handle(pHandle);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f000 f886 	bl	8000c4a <spi_ovr_err_interrupt_handle>
	}


}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <spi_txe_interrupt_handle>:


//These Functions created for helping the IRQ Handling. All is static, not allowed to outside.

static void  spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
	if( (pSPIHandle->pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )// Check data is 8 bit or 16 bit format!
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d015      	beq.n	8000b88 <spi_txe_interrupt_handle+0x42>
	{
		pSPIHandle->pSPIx->DR =   *((uint16_t*)pSPIHandle->pTxBuffer); //16 bit data loads to the DR
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	881a      	ldrh	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	1e5a      	subs	r2, r3, #1
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	615a      	str	r2, [r3, #20]
		pSPIHandle->TxLen--; // 2 times decrease because we just send 2 bytes of data
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	1e5a      	subs	r2, r3, #1
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	615a      	str	r2, [r3, #20]
		(uint16_t*)pSPIHandle->pTxBuffer++;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	1c5a      	adds	r2, r3, #1
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	e00f      	b.n	8000ba8 <spi_txe_interrupt_handle+0x62>
	}else
	{
		//8 bit DFF
		pSPIHandle->pSPIx->DR =  *pSPIHandle->pTxBuffer; //8 bit data loads to the DR
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	781a      	ldrb	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--; // 1 times decrease because we just send 1 bytes of data
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	1e5a      	subs	r2, r3, #1
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	615a      	str	r2, [r3, #20]
		pSPIHandle->pTxBuffer++;  // data buffer increased for next byte of data
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	60da      	str	r2, [r3, #12]
	}


	if(! pSPIHandle->TxLen) //If TxLen is zero , close the transmission
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d106      	bne.n	8000bbe <spi_txe_interrupt_handle+0x78>
	{

		//this prevents interrupts from setting up of TXE flag
		SPI_CloseTransmisson(pSPIHandle);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f000 f862 	bl	8000c7a <SPI_CloseTransmisson>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_TX_CMPLT); // Inform applicaiton TX is done
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f000 f995 	bl	8000ee8 <SPI_ApplicationEventCallback>
	}

}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <spi_rxne_interrupt_handle>:


static void  spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
	if(pSPIHandle->pSPIx->CR1 & ( 1 << SPI_CR1_DFF)) // Check data is 8 bit or 16 bit format!
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d016      	beq.n	8000c0a <spi_rxne_interrupt_handle+0x44>
	{
		//16 bit data reads from the DR
		*((uint16_t*)pSPIHandle->pRxBuffer) = (uint16_t) pSPIHandle->pSPIx->DR;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68da      	ldr	r2, [r3, #12]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	691b      	ldr	r3, [r3, #16]
 8000be6:	b292      	uxth	r2, r2
 8000be8:	801a      	strh	r2, [r3, #0]
		pSPIHandle->RxLen -= 2; // 2 times decrease because we just receive 2 bytes of data
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	1e9a      	subs	r2, r3, #2
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	691b      	ldr	r3, [r3, #16]
 8000bf8:	1c5a      	adds	r2, r3, #1
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	611a      	str	r2, [r3, #16]
		pSPIHandle->pRxBuffer++;// 2 times increase
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	691b      	ldr	r3, [r3, #16]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	611a      	str	r2, [r3, #16]
 8000c08:	e010      	b.n	8000c2c <spi_rxne_interrupt_handle+0x66>

	}else
	{
		//8 bit data reads from the DR
		*(pSPIHandle->pRxBuffer) = (uint8_t) pSPIHandle->pSPIx->DR;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68da      	ldr	r2, [r3, #12]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	691b      	ldr	r3, [r3, #16]
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	701a      	strb	r2, [r3, #0]
		pSPIHandle->RxLen--; // 1 times decrease because we just receive 1 bytes of data
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	1e5a      	subs	r2, r3, #1
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++; // data buffer increased for next byte of data
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	691b      	ldr	r3, [r3, #16]
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	611a      	str	r2, [r3, #16]
	}


	if(! pSPIHandle->RxLen) //If RxLen is zero , close the reception
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d106      	bne.n	8000c42 <spi_rxne_interrupt_handle+0x7c>
	{
		//Reception is complete
		SPI_CloseReception(pSPIHandle);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f000 f83a 	bl	8000cae <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_RX_CMPLT); // Inform applicaiton RX is done
 8000c3a:	2102      	movs	r1, #2
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f000 f953 	bl	8000ee8 <SPI_ApplicationEventCallback>
	}

}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <spi_ovr_err_interrupt_handle>:


static void  spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b084      	sub	sp, #16
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]

	uint8_t temp;
	//Clear the OVR flag
	if(pSPIHandle->TxState != SPI_BUSY_TX)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7f1b      	ldrb	r3, [r3, #28]
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d007      	beq.n	8000c6a <spi_ovr_err_interrupt_handle+0x20>
	{
		temp = pSPIHandle->pSPIx->DR;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp; // program gives error that temp variable is not used. So I used like this
	//Inform the application overrun error.
	//When application receive this event, application has to call the SPI_ClearOVRFlag
	SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_OVR_ERR);
 8000c6a:	2103      	movs	r1, #3
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f000 f93b 	bl	8000ee8 <SPI_ApplicationEventCallback>

}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <SPI_CloseTransmisson>:


void SPI_CloseTransmisson(SPI_Handle_t *pSPIHandle)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~( 1 << SPI_CR2_TXEIE); // Clear the TX interrupt bit
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	685a      	ldr	r2, [r3, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c90:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTxBuffer = NULL;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen = 0;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	615a      	str	r2, [r3, #20]
	pSPIHandle->TxState = SPI_READY;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	771a      	strb	r2, [r3, #28]

}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr

08000cae <SPI_CloseReception>:

void SPI_CloseReception(SPI_Handle_t *pSPIHandle)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~( 1 << SPI_CR2_RXNEIE); // Clear the RX interrupt bit
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000cc4:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	775a      	strb	r2, [r3, #29]

}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
	...

08000ce4 <gpioConfig>:

/*This flag will be set in the interrupt handler of the Arduino, Here is connected to pin 0 of port B */
volatile uint8_t dataAvailable = 0;


void gpioConfig(){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
	 * PA4 --> SPI1_NCC - General Output
	 * PA5 --> SPI1_SCK - Alternate Output PP
	 * PA6 --> SPI1_MISO - Alternate Output PP
	 * PA7 --> SPI1_MOSI - Alternate Output PP
	 */
	pGPIOspi.pGPIOx = GPIOA;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <gpioConfig+0x78>)
 8000cec:	613b      	str	r3, [r7, #16]
	pGPIOspi.GPIO_PinConfig.GPIO_Mode = GPIO_MODE_AF_PP;
 8000cee:	2318      	movs	r3, #24
 8000cf0:	61bb      	str	r3, [r7, #24]
	pGPIOspi.GPIO_PinConfig.GPIO_Speed = GPIO_SPEED_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	61fb      	str	r3, [r7, #28]

	//For SCLK
	pGPIOspi.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_5;
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	617b      	str	r3, [r7, #20]
	GPIO_Init(&pGPIOspi);
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fac8 	bl	8000294 <GPIO_Init>

	//For MISO
	pGPIOspi.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_6;
 8000d04:	2306      	movs	r3, #6
 8000d06:	617b      	str	r3, [r7, #20]
	GPIO_Init(&pGPIOspi);
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fac1 	bl	8000294 <GPIO_Init>

	//For MOSI
	pGPIOspi.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_7;
 8000d12:	2307      	movs	r3, #7
 8000d14:	617b      	str	r3, [r7, #20]
	GPIO_Init(&pGPIOspi);
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff faba 	bl	8000294 <GPIO_Init>

	//For NCC
	pGPIOspi.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_4;
 8000d20:	2304      	movs	r3, #4
 8000d22:	617b      	str	r3, [r7, #20]
	GPIO_Init(&pGPIOspi);
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fab3 	bl	8000294 <GPIO_Init>


	//For LED
	GPIOLed.pGPIOx = GPIOB;
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <gpioConfig+0x7c>)
 8000d30:	603b      	str	r3, [r7, #0]
	GPIOLed.GPIO_PinConfig.GPIO_Mode = GPIO_MODE_OUT_PP;
 8000d32:	2310      	movs	r3, #16
 8000d34:	60bb      	str	r3, [r7, #8]
	GPIOLed.GPIO_PinConfig.GPIO_Speed = GPIO_SPEED_MEDIUM;
 8000d36:	2301      	movs	r3, #1
 8000d38:	60fb      	str	r3, [r7, #12]

	GPIOLed.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_1;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	607b      	str	r3, [r7, #4]
	GPIO_Init(&GPIOLed);
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff faa7 	bl	8000294 <GPIO_Init>

	GPIOLed.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_2;
 8000d46:	2302      	movs	r3, #2
 8000d48:	607b      	str	r3, [r7, #4]
	GPIO_Init(&GPIOLed);
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff faa1 	bl	8000294 <GPIO_Init>
}
 8000d52:	bf00      	nop
 8000d54:	3720      	adds	r7, #32
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40010800 	.word	0x40010800
 8000d60:	40010c00 	.word	0x40010c00

08000d64 <spiConfig>:



void spiConfig(){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

	SPI1handle.pSPIx = SPI1;
 8000d68:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <spiConfig+0x40>)
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	; (8000da8 <spiConfig+0x44>)
 8000d6c:	601a      	str	r2, [r3, #0]
	SPI1handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <spiConfig+0x40>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	711a      	strb	r2, [r3, #4]
	SPI1handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <spiConfig+0x40>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	715a      	strb	r2, [r3, #5]
	SPI1handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <spiConfig+0x40>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	71da      	strb	r2, [r3, #7]
	SPI1handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;// fclock generates 8Mhz and  sclk is now mhz. High speed may corrupt some data while communicating with Slave device
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <spiConfig+0x40>)
 8000d82:	2204      	movs	r2, #4
 8000d84:	719a      	strb	r2, [r3, #6]
	SPI1handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <spiConfig+0x40>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	721a      	strb	r2, [r3, #8]
	SPI1handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <spiConfig+0x40>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	725a      	strb	r2, [r3, #9]
	SPI1handle.SPIConfig.SPI_SPI_SSM = SPI_SSM_DIS; //Software slave managment disabled, we will use hardware slave managment
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <spiConfig+0x40>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	729a      	strb	r2, [r3, #10]


	SPI_Init(&SPI1handle);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <spiConfig+0x40>)
 8000d9a:	f7ff fd19 	bl	80007d0 <SPI_Init>
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000001c 	.word	0x2000001c
 8000da8:	40013000 	.word	0x40013000

08000dac <GPIO_InterruptPinInit>:



/*This function configures the gpio pin over which SPI peripheral issues data available interrupt */
void GPIO_InterruptPinInit(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
	GPIO_Handle_t IsrPin;
	memset(&IsrPin,0,sizeof(IsrPin));
 8000db2:	463b      	mov	r3, r7
 8000db4:	2210      	movs	r2, #16
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 f925 	bl	8001008 <memset>

	//this is led gpio configuration
	IsrPin.pGPIOx = GPIOB;
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <GPIO_InterruptPinInit+0x44>)
 8000dc0:	603b      	str	r3, [r7, #0]
	IsrPin.GPIO_PinConfig.GPIO_Pin   = GPIO_Pin_0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
	IsrPin.GPIO_PinConfig.GPIO_Mode  = GPIO_MODE_IT_FT;
 8000dc6:	2344      	movs	r3, #68	; 0x44
 8000dc8:	60bb      	str	r3, [r7, #8]
	IsrPin.GPIO_PinConfig.GPIO_Speed = GPIO_SPEED_MEDIUM;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	60fb      	str	r3, [r7, #12]
	GPIO_Init(&IsrPin);
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fa5f 	bl	8000294 <GPIO_Init>

	GPIO_IRQPriorityConfig(IRQn_EXTI0,NVIC_IRQ_PRI0);
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2006      	movs	r0, #6
 8000dda:	f7ff fc91 	bl	8000700 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQn_EXTI0, ENABLE);
 8000dde:	2101      	movs	r1, #1
 8000de0:	2006      	movs	r0, #6
 8000de2:	f7ff fc09 	bl	80005f8 <GPIO_IRQInterruptConfig>

}
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40010c00 	.word	0x40010c00

08000df4 <main>:




int main(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
 8000dfa:	23ff      	movs	r3, #255	; 0xff
 8000dfc:	71fb      	strb	r3, [r7, #7]

	GPIO_InterruptPinInit();
 8000dfe:	f7ff ffd5 	bl	8000dac <GPIO_InterruptPinInit>

	gpioConfig(); // GPIO INIT
 8000e02:	f7ff ff6f 	bl	8000ce4 <gpioConfig>
	spiConfig();  // SPI INIT
 8000e06:	f7ff ffad 	bl	8000d64 <spiConfig>
	 * SSOE = 1 means NSS output enable.
	 * NSS pin is managed by hardware.
	 * When spi enabled, NSS will pulled to low.
	 * When spi disabled, NSS will pulled to high.
	 */
	SPI_SSOEConfig(SPI1, ENABLE); // Setting SSOE pin, NSS pin will pull to low in order to activate slave device(Ardiuno in this scenario)
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	4829      	ldr	r0, [pc, #164]	; (8000eb4 <main+0xc0>)
 8000e0e:	f7ff fd68 	bl	80008e2 <SPI_SSOEConfig>

	SPI_IRQInterruptConfig(IRQn_SPI1,ENABLE);
 8000e12:	2101      	movs	r1, #1
 8000e14:	2023      	movs	r0, #35	; 0x23
 8000e16:	f7ff fd7f 	bl	8000918 <SPI_IRQInterruptConfig>

	while (1)
	{

		GPIO_ToggleOutputPin(GPIOB, GPIO_Pin_1);
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	4826      	ldr	r0, [pc, #152]	; (8000eb8 <main+0xc4>)
 8000e1e:	f7ff fbd7 	bl	80005d0 <GPIO_ToggleOutputPin>

		rcvStop = 0;
 8000e22:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <main+0xc8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]

		while (!dataAvailable); //Wait till data available interrupt(EXTI) from Ardiuno. Then Master get notify that I am getting messages
 8000e28:	bf00      	nop
 8000e2a:	4b25      	ldr	r3, [pc, #148]	; (8000ec0 <main+0xcc>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d0fa      	beq.n	8000e2a <main+0x36>
		GPIO_IRQInterruptConfig(IRQn_EXTI0, DISABLE); //Disable it for further interrupt to get only 1 data.
 8000e34:	2100      	movs	r1, #0
 8000e36:	2006      	movs	r0, #6
 8000e38:	f7ff fbde 	bl	80005f8 <GPIO_IRQInterruptConfig>


		//Enable the SPI Peripheral
		SPI_PeriphControl(SPI1, ENABLE);
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	481d      	ldr	r0, [pc, #116]	; (8000eb4 <main+0xc0>)
 8000e40:	f7ff fd34 	bl	80008ac <SPI_PeriphControl>

		while(!rcvStop) // Its a flag, indicates when to stop.
 8000e44:	e012      	b.n	8000e6c <main+0x78>
		{
			// Get the data from the SPI1 byte by byte in interrupt mode
			//We have to send 1 byte data to receive 1 byte of data. Its the logic of SPI communication
			while ( SPI_SendDataIT(&SPI1handle,&dummy,1) == SPI_BUSY_TX); //The code runs till TX not busy
 8000e46:	bf00      	nop
 8000e48:	1dfb      	adds	r3, r7, #7
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	481d      	ldr	r0, [pc, #116]	; (8000ec4 <main+0xd0>)
 8000e50:	f7ff fde6 	bl	8000a20 <SPI_SendDataIT>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d0f6      	beq.n	8000e48 <main+0x54>
			while ( SPI_ReceiveDataIT(&SPI1handle,(uint8_t *)&ReadByte,1) == SPI_BUSY_RX ); //The code runs till RX not busy
 8000e5a:	bf00      	nop
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	491a      	ldr	r1, [pc, #104]	; (8000ec8 <main+0xd4>)
 8000e60:	4818      	ldr	r0, [pc, #96]	; (8000ec4 <main+0xd0>)
 8000e62:	f7ff fe00 	bl	8000a66 <SPI_ReceiveDataIT>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d0f7      	beq.n	8000e5c <main+0x68>
		while(!rcvStop) // Its a flag, indicates when to stop.
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <main+0xc8>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0e7      	beq.n	8000e46 <main+0x52>
		}


		if( ! (strcmp(RcvBuff,"nice" )) ){ //strcmp work like that if the message same, return 0
 8000e76:	4915      	ldr	r1, [pc, #84]	; (8000ecc <main+0xd8>)
 8000e78:	4815      	ldr	r0, [pc, #84]	; (8000ed0 <main+0xdc>)
 8000e7a:	f7ff f979 	bl	8000170 <strcmp>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d103      	bne.n	8000e8c <main+0x98>
			GPIO_ToggleOutputPin(GPIOB, GPIO_Pin_2);
 8000e84:	2102      	movs	r1, #2
 8000e86:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <main+0xc4>)
 8000e88:	f7ff fba2 	bl	80005d0 <GPIO_ToggleOutputPin>
		}

		//Before disable the SPI, lets confirm SPI is not busy
		while(SPI_GetFlagStatus(SPI1, SPI_BUSY_FLAG));
 8000e8c:	bf00      	nop
 8000e8e:	2180      	movs	r1, #128	; 0x80
 8000e90:	4808      	ldr	r0, [pc, #32]	; (8000eb4 <main+0xc0>)
 8000e92:	f7ff fcf8 	bl	8000886 <SPI_GetFlagStatus>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1f8      	bne.n	8000e8e <main+0x9a>

		//Disable the SPI Peripheral
		SPI_PeriphControl(SPI1, DISABLE);
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <main+0xc0>)
 8000ea0:	f7ff fd04 	bl	80008ac <SPI_PeriphControl>


		//printf("Rcvd data = %s\n",RcvBuff);

		dataAvailable = 0;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <main+0xcc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
		GPIO_IRQInterruptConfig(IRQn_EXTI0,ENABLE);
 8000eaa:	2101      	movs	r1, #1
 8000eac:	2006      	movs	r0, #6
 8000eae:	f7ff fba3 	bl	80005f8 <GPIO_IRQInterruptConfig>
		GPIO_ToggleOutputPin(GPIOB, GPIO_Pin_1);
 8000eb2:	e7b2      	b.n	8000e1a <main+0x26>
 8000eb4:	40013000 	.word	0x40013000
 8000eb8:	40010c00 	.word	0x40010c00
 8000ebc:	20000231 	.word	0x20000231
 8000ec0:	20000232 	.word	0x20000232
 8000ec4:	2000001c 	.word	0x2000001c
 8000ec8:	20000230 	.word	0x20000230
 8000ecc:	08001030 	.word	0x08001030
 8000ed0:	2000003c 	.word	0x2000003c

08000ed4 <SPI1_IRQHandler>:
}


// Runs when a data byte is received from the peripheral over SPI and fires to SPI_ApplicationEventCallback
void SPI1_IRQHandler()
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	SPI_IRQHandling(&SPI1handle);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <SPI1_IRQHandler+0x10>)
 8000eda:	f7ff fde7 	bl	8000aac <SPI_IRQHandling>
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2000001c 	.word	0x2000001c

08000ee8 <SPI_ApplicationEventCallback>:



void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	70fb      	strb	r3, [r7, #3]
	static uint32_t i = 0;
	// In the RX complete event , copy data in to RcvBuff . '\0' indicates end of message(rcvStop = 1)
	if(AppEv == SPI_EVENT_RX_CMPLT)
 8000ef4:	78fb      	ldrb	r3, [r7, #3]
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d11f      	bne.n	8000f3a <SPI_ApplicationEventCallback+0x52>
	{
				RcvBuff[i++] = ReadByte;
 8000efa:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <SPI_ApplicationEventCallback+0x5c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	1c5a      	adds	r2, r3, #1
 8000f00:	4910      	ldr	r1, [pc, #64]	; (8000f44 <SPI_ApplicationEventCallback+0x5c>)
 8000f02:	600a      	str	r2, [r1, #0]
 8000f04:	4a10      	ldr	r2, [pc, #64]	; (8000f48 <SPI_ApplicationEventCallback+0x60>)
 8000f06:	7812      	ldrb	r2, [r2, #0]
 8000f08:	b2d1      	uxtb	r1, r2
 8000f0a:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <SPI_ApplicationEventCallback+0x64>)
 8000f0c:	54d1      	strb	r1, [r2, r3]
				if(ReadByte == '\0' || ( i == MAX_LEN)){ // Receive data until get null character from Ardiuno or when the data len reaches the max len
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <SPI_ApplicationEventCallback+0x60>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d004      	beq.n	8000f22 <SPI_ApplicationEventCallback+0x3a>
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <SPI_ApplicationEventCallback+0x5c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f20:	d10b      	bne.n	8000f3a <SPI_ApplicationEventCallback+0x52>
					rcvStop = 1; // Reception will stop here, end of the message
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <SPI_ApplicationEventCallback+0x68>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
					RcvBuff[i-1] = '\0';// Last character in receive buffer will be null.
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <SPI_ApplicationEventCallback+0x5c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <SPI_ApplicationEventCallback+0x64>)
 8000f30:	2100      	movs	r1, #0
 8000f32:	54d1      	strb	r1, [r2, r3]
					i = 0;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <SPI_ApplicationEventCallback+0x5c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
				}

	}

}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	20000234 	.word	0x20000234
 8000f48:	20000230 	.word	0x20000230
 8000f4c:	2000003c 	.word	0x2000003c
 8000f50:	20000231 	.word	0x20000231

08000f54 <EXTI0_IRQHandler>:


/* Slave data available interrupt handler */
void EXTI0_IRQHandler()
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0

	GPIO_IRQHandling(GPIO_Pin_0);
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f7ff fbfb 	bl	8000754 <GPIO_IRQHandling>
	dataAvailable = 1;
 8000f5e:	4b02      	ldr	r3, [pc, #8]	; (8000f68 <EXTI0_IRQHandler+0x14>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000232 	.word	0x20000232

08000f6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f6c:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f6e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f70:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f74:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f76:	490d      	ldr	r1, [pc, #52]	; (8000fac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f78:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <LoopForever+0xe>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f7c:	e002      	b.n	8000f84 <LoopCopyDataInit>

08000f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f82:	3304      	adds	r3, #4

08000f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f88:	d3f9      	bcc.n	8000f7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f8c:	4c0a      	ldr	r4, [pc, #40]	; (8000fb8 <LoopForever+0x16>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f90:	e001      	b.n	8000f96 <LoopFillZerobss>

08000f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f94:	3204      	adds	r2, #4

08000f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f98:	d3fb      	bcc.n	8000f92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f9a:	f000 f811 	bl	8000fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f9e:	f7ff ff29 	bl	8000df4 <main>

08000fa2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fa2:	e7fe      	b.n	8000fa2 <LoopForever>
  ldr   r0, =_estack
 8000fa4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000fb0:	08001040 	.word	0x08001040
  ldr r2, =_sbss
 8000fb4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000fb8:	20000238 	.word	0x20000238

08000fbc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC_IRQHandler>
	...

08000fc0 <__libc_init_array>:
 8000fc0:	b570      	push	{r4, r5, r6, lr}
 8000fc2:	2600      	movs	r6, #0
 8000fc4:	4d0c      	ldr	r5, [pc, #48]	; (8000ff8 <__libc_init_array+0x38>)
 8000fc6:	4c0d      	ldr	r4, [pc, #52]	; (8000ffc <__libc_init_array+0x3c>)
 8000fc8:	1b64      	subs	r4, r4, r5
 8000fca:	10a4      	asrs	r4, r4, #2
 8000fcc:	42a6      	cmp	r6, r4
 8000fce:	d109      	bne.n	8000fe4 <__libc_init_array+0x24>
 8000fd0:	f000 f822 	bl	8001018 <_init>
 8000fd4:	2600      	movs	r6, #0
 8000fd6:	4d0a      	ldr	r5, [pc, #40]	; (8001000 <__libc_init_array+0x40>)
 8000fd8:	4c0a      	ldr	r4, [pc, #40]	; (8001004 <__libc_init_array+0x44>)
 8000fda:	1b64      	subs	r4, r4, r5
 8000fdc:	10a4      	asrs	r4, r4, #2
 8000fde:	42a6      	cmp	r6, r4
 8000fe0:	d105      	bne.n	8000fee <__libc_init_array+0x2e>
 8000fe2:	bd70      	pop	{r4, r5, r6, pc}
 8000fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fe8:	4798      	blx	r3
 8000fea:	3601      	adds	r6, #1
 8000fec:	e7ee      	b.n	8000fcc <__libc_init_array+0xc>
 8000fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ff2:	4798      	blx	r3
 8000ff4:	3601      	adds	r6, #1
 8000ff6:	e7f2      	b.n	8000fde <__libc_init_array+0x1e>
 8000ff8:	08001038 	.word	0x08001038
 8000ffc:	08001038 	.word	0x08001038
 8001000:	08001038 	.word	0x08001038
 8001004:	0800103c 	.word	0x0800103c

08001008 <memset>:
 8001008:	4603      	mov	r3, r0
 800100a:	4402      	add	r2, r0
 800100c:	4293      	cmp	r3, r2
 800100e:	d100      	bne.n	8001012 <memset+0xa>
 8001010:	4770      	bx	lr
 8001012:	f803 1b01 	strb.w	r1, [r3], #1
 8001016:	e7f9      	b.n	800100c <memset+0x4>

08001018 <_init>:
 8001018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101a:	bf00      	nop
 800101c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800101e:	bc08      	pop	{r3}
 8001020:	469e      	mov	lr, r3
 8001022:	4770      	bx	lr

08001024 <_fini>:
 8001024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001026:	bf00      	nop
 8001028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800102a:	bc08      	pop	{r3}
 800102c:	469e      	mov	lr, r3
 800102e:	4770      	bx	lr
