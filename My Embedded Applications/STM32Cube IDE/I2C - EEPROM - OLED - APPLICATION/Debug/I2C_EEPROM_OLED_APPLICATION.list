
I2C_EEPROM_OLED_APPLICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069b0  080001d0  080001d0  000101d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b9c  08006b80  08006b80  00016b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800771c  0800771c  00020214  2**0
                  CONTENTS
  4 .ARM          00000000  0800771c  0800771c  00020214  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800771c  0800771c  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800771c  0800771c  0001771c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007720  08007720  00017720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08007724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  20000214  08007938  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  08007938  00020788  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008744  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b1a  00000000  00000000  00028981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  0002a4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000808  00000000  00000000  0002ad68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000117de  00000000  00000000  0002b570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b01f  00000000  00000000  0003cd4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063d57  00000000  00000000  00047d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000abac4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003454  00000000  00000000  000abb14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000214 	.word	0x20000214
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006b68 	.word	0x08006b68

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000218 	.word	0x20000218
 800020c:	08006b68 	.word	0x08006b68

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	460a      	mov	r2, r1
 8000b52:	80fb      	strh	r3, [r7, #6]
 8000b54:	4613      	mov	r3, r2
 8000b56:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 8000b58:	88fa      	ldrh	r2, [r7, #6]
 8000b5a:	88bb      	ldrh	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	2b3f      	cmp	r3, #63	; 0x3f
 8000b60:	dc01      	bgt.n	8000b66 <bytestowrite+0x1e>
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	e003      	b.n	8000b6e <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 8000b66:	88bb      	ldrh	r3, [r7, #4]
 8000b68:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000b6c:	b29b      	uxth	r3, r3
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08e      	sub	sp, #56	; 0x38
 8000b7c:	af04      	add	r7, sp, #16
 8000b7e:	60ba      	str	r2, [r7, #8]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4603      	mov	r3, r0
 8000b84:	81fb      	strh	r3, [r7, #14]
 8000b86:	460b      	mov	r3, r1
 8000b88:	81bb      	strh	r3, [r7, #12]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2); // log(64)/log(2)= 6 eder.
 8000b8e:	2306      	movs	r3, #6
 8000b90:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000b92:	89fb      	ldrh	r3, [r7, #14]
 8000b94:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE); //page 5 ise endpage= 5 .(nokta) bilmem bişey oluyor ama integer olduğunu unutma,float değil.
 8000b96:	88fa      	ldrh	r2, [r7, #6]
 8000b98:	89bb      	ldrh	r3, [r7, #12]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	da00      	bge.n	8000ba2 <EEPROM_Write+0x2a>
 8000ba0:	333f      	adds	r3, #63	; 0x3f
 8000ba2:	119b      	asrs	r3, r3, #6
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	89fb      	ldrh	r3, [r7, #14]
 8000ba8:	4413      	add	r3, r2
 8000baa:	837b      	strh	r3, [r7, #26]
														//offset yerine byte_number gibi birşey eklenebilir.

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8000bac:	8b7a      	ldrh	r2, [r7, #26]
 8000bae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0; //page offset kısaltması herhalde
 8000bb8:	2300      	movs	r3, #0
 8000bba:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
 8000bc0:	e034      	b.n	8000c2c <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset; // 5<<6 yapıyor sonra offsetle birleştiriyor.
 8000bc2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	b21a      	sxth	r2, r3
 8000bcc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	b21b      	sxth	r3, r3
 8000bd4:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 8000bd6:	89ba      	ldrh	r2, [r7, #12]
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ffb3 	bl	8000b48 <bytestowrite>
 8000be2:	4603      	mov	r3, r0
 8000be4:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8000be6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000be8:	68ba      	ldr	r2, [r7, #8]
 8000bea:	4413      	add	r3, r2
 8000bec:	8af9      	ldrh	r1, [r7, #22]
 8000bee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bf2:	9202      	str	r2, [sp, #8]
 8000bf4:	8aba      	ldrh	r2, [r7, #20]
 8000bf6:	9201      	str	r2, [sp, #4]
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	460a      	mov	r2, r1
 8000bfe:	21a0      	movs	r1, #160	; 0xa0
 8000c00:	480f      	ldr	r0, [pc, #60]	; (8000c40 <EEPROM_Write+0xc8>)
 8000c02:	f001 fc63 	bl	80024cc <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8000c06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c08:	3301      	adds	r3, #1
 8000c0a:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8000c10:	88fa      	ldrh	r2, [r7, #6]
 8000c12:	8abb      	ldrh	r3, [r7, #20]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8000c18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000c1a:	8abb      	ldrh	r3, [r7, #20]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8000c20:	2005      	movs	r0, #5
 8000c22:	f000 ff6d 	bl	8001b00 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 8000c26:	6a3b      	ldr	r3, [r7, #32]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	623b      	str	r3, [r7, #32]
 8000c2c:	8b3b      	ldrh	r3, [r7, #24]
 8000c2e:	6a3a      	ldr	r2, [r7, #32]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dbc6      	blt.n	8000bc2 <EEPROM_Write+0x4a>
	}
}
 8000c34:	bf00      	nop
 8000c36:	bf00      	nop
 8000c38:	3728      	adds	r7, #40	; 0x28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000234 	.word	0x20000234

08000c44 <float2Bytes>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 8000c52:	2300      	movs	r3, #0
 8000c54:	73fb      	strb	r3, [r7, #15]
 8000c56:	e00b      	b.n	8000c70 <float2Bytes+0x2c>
      ftoa_bytes_temp[i] = thing.bytes[i];
 8000c58:	7bfa      	ldrb	r2, [r7, #15]
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	6879      	ldr	r1, [r7, #4]
 8000c5e:	440b      	add	r3, r1
 8000c60:	3210      	adds	r2, #16
 8000c62:	443a      	add	r2, r7
 8000c64:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000c68:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d9f0      	bls.n	8000c58 <float2Bytes+0x14>
    }

}
 8000c76:	bf00      	nop
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr

08000c82 <Bytes2float>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b087      	sub	sp, #28
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	75fb      	strb	r3, [r7, #23]
 8000c8e:	e00b      	b.n	8000ca8 <Bytes2float+0x26>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 8000c90:	7dfb      	ldrb	r3, [r7, #23]
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	441a      	add	r2, r3
 8000c96:	7dfb      	ldrb	r3, [r7, #23]
 8000c98:	7812      	ldrb	r2, [r2, #0]
 8000c9a:	3318      	adds	r3, #24
 8000c9c:	443b      	add	r3, r7
 8000c9e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 8000ca2:	7dfb      	ldrb	r3, [r7, #23]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	75fb      	strb	r3, [r7, #23]
 8000ca8:	7dfb      	ldrb	r3, [r7, #23]
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d9f0      	bls.n	8000c90 <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	613b      	str	r3, [r7, #16]
   return float_variable;
 8000cb2:	693b      	ldr	r3, [r7, #16]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	371c      	adds	r7, #28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
	...

08000cc0 <EEPROM_Write_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM (uint16_t page, uint16_t offset, float data)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	603a      	str	r2, [r7, #0]
 8000cca:	80fb      	strh	r3, [r7, #6]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 8000cd0:	6839      	ldr	r1, [r7, #0]
 8000cd2:	4806      	ldr	r0, [pc, #24]	; (8000cec <EEPROM_Write_NUM+0x2c>)
 8000cd4:	f7ff ffb6 	bl	8000c44 <float2Bytes>

	EEPROM_Write(page, offset, bytes_temp, 4);
 8000cd8:	88b9      	ldrh	r1, [r7, #4]
 8000cda:	88f8      	ldrh	r0, [r7, #6]
 8000cdc:	2304      	movs	r3, #4
 8000cde:	4a03      	ldr	r2, [pc, #12]	; (8000cec <EEPROM_Write_NUM+0x2c>)
 8000ce0:	f7ff ff4a 	bl	8000b78 <EEPROM_Write>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000230 	.word	0x20000230

08000cf0 <EEPROM_Read_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @returns the float/integer value
 */

float EEPROM_Read_NUM (uint16_t page, uint16_t offset)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	460a      	mov	r2, r1
 8000cfa:	80fb      	strh	r3, [r7, #6]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	EEPROM_Read(page, offset, buffer, 4);
 8000d00:	f107 020c 	add.w	r2, r7, #12
 8000d04:	88b9      	ldrh	r1, [r7, #4]
 8000d06:	88f8      	ldrh	r0, [r7, #6]
 8000d08:	2304      	movs	r3, #4
 8000d0a:	f000 f80b 	bl	8000d24 <EEPROM_Read>

	return (Bytes2float(buffer));
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ffb5 	bl	8000c82 <Bytes2float>
 8000d18:	4603      	mov	r3, r0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08e      	sub	sp, #56	; 0x38
 8000d28:	af04      	add	r7, sp, #16
 8000d2a:	60ba      	str	r2, [r7, #8]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4603      	mov	r3, r0
 8000d30:	81fb      	strh	r3, [r7, #14]
 8000d32:	460b      	mov	r3, r1
 8000d34:	81bb      	strh	r3, [r7, #12]
 8000d36:	4613      	mov	r3, r2
 8000d38:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000d3a:	2306      	movs	r3, #6
 8000d3c:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8000d3e:	89fb      	ldrh	r3, [r7, #14]
 8000d40:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000d42:	88fa      	ldrh	r2, [r7, #6]
 8000d44:	89bb      	ldrh	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	da00      	bge.n	8000d4e <EEPROM_Read+0x2a>
 8000d4c:	333f      	adds	r3, #63	; 0x3f
 8000d4e:	119b      	asrs	r3, r3, #6
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	89fb      	ldrh	r3, [r7, #14]
 8000d54:	4413      	add	r3, r2
 8000d56:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000d58:	8b7a      	ldrh	r2, [r7, #26]
 8000d5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	3301      	adds	r3, #1
 8000d62:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
 8000d6c:	e031      	b.n	8000dd2 <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000d6e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	b21a      	sxth	r2, r3
 8000d78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8000d82:	89ba      	ldrh	r2, [r7, #12]
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fedd 	bl	8000b48 <bytestowrite>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000d92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d94:	68ba      	ldr	r2, [r7, #8]
 8000d96:	4413      	add	r3, r2
 8000d98:	8af9      	ldrh	r1, [r7, #22]
 8000d9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d9e:	9202      	str	r2, [sp, #8]
 8000da0:	8aba      	ldrh	r2, [r7, #20]
 8000da2:	9201      	str	r2, [sp, #4]
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2302      	movs	r3, #2
 8000da8:	460a      	mov	r2, r1
 8000daa:	21a0      	movs	r1, #160	; 0xa0
 8000dac:	480d      	ldr	r0, [pc, #52]	; (8000de4 <EEPROM_Read+0xc0>)
 8000dae:	f001 fc87 	bl	80026c0 <HAL_I2C_Mem_Read>
		startPage += 1;
 8000db2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000db4:	3301      	adds	r3, #1
 8000db6:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 8000dbc:	88fa      	ldrh	r2, [r7, #6]
 8000dbe:	8abb      	ldrh	r3, [r7, #20]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8000dc4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000dc6:	8abb      	ldrh	r3, [r7, #20]
 8000dc8:	4413      	add	r3, r2
 8000dca:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 8000dcc:	6a3b      	ldr	r3, [r7, #32]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	623b      	str	r3, [r7, #32]
 8000dd2:	8b3b      	ldrh	r3, [r7, #24]
 8000dd4:	6a3a      	ldr	r2, [r7, #32]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	dbc9      	blt.n	8000d6e <EEPROM_Read+0x4a>
	}
}
 8000dda:	bf00      	nop
 8000ddc:	bf00      	nop
 8000dde:	3728      	adds	r7, #40	; 0x28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000234 	.word	0x20000234

08000de8 <EEPROM_PageErase>:
/* Erase a page in the EEPROM Memory
 * @page is the number of page to erase
 * In order to erase multiple pages, just use this function in the for loop
 */
void EEPROM_PageErase (uint16_t page)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b098      	sub	sp, #96	; 0x60
 8000dec:	af04      	add	r7, sp, #16
 8000dee:	4603      	mov	r3, r0
 8000df0:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000df2:	2306      	movs	r3, #6
 8000df4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t MemAddress = page<<paddrposition;
 8000df6:	88fa      	ldrh	r2, [r7, #6]
 8000df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE); // datanın içine 0xff yazarak, mem_write ile sayfayı sıfırlıyoruz.
 8000e02:	f107 0308 	add.w	r3, r7, #8
 8000e06:	2240      	movs	r2, #64	; 0x40
 8000e08:	21ff      	movs	r1, #255	; 0xff
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f002 ffcc 	bl	8003da8 <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 8000e10:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8000e14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e18:	9302      	str	r3, [sp, #8]
 8000e1a:	2340      	movs	r3, #64	; 0x40
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2302      	movs	r3, #2
 8000e26:	21a0      	movs	r1, #160	; 0xa0
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <EEPROM_PageErase+0x54>)
 8000e2a:	f001 fb4f 	bl	80024cc <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay 
 8000e2e:	2005      	movs	r0, #5
 8000e30:	f000 fe66 	bl	8001b00 <HAL_Delay>
}
 8000e34:	bf00      	nop
 8000e36:	3750      	adds	r7, #80	; 0x50
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000234 	.word	0x20000234

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e46:	f000 fe02 	bl	8001a4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4a:	f000 f89f 	bl	8000f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4e:	f000 f907 	bl	8001060 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e52:	f000 f8d7 	bl	8001004 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init();
 8000e56:	f000 f9b3 	bl	80011c0 <SSD1306_Init>

  SSD1306_GotoXY (0, 0);
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f000 fb17 	bl	8001490 <SSD1306_GotoXY>
  SSD1306_Puts ("Initializing...", &Font_7x10, 1);
 8000e62:	2201      	movs	r2, #1
 8000e64:	493f      	ldr	r1, [pc, #252]	; (8000f64 <main+0x124>)
 8000e66:	4840      	ldr	r0, [pc, #256]	; (8000f68 <main+0x128>)
 8000e68:	f000 fba8 	bl	80015bc <SSD1306_Puts>
  SSD1306_UpdateScreen ();  // update display
 8000e6c:	f000 fa6c 	bl	8001348 <SSD1306_UpdateScreen>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000e70:	2201      	movs	r2, #1
 8000e72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e76:	483d      	ldr	r0, [pc, #244]	; (8000f6c <main+0x12c>)
 8000e78:	f001 f8ce 	bl	8002018 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000e7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e80:	f000 fe3e 	bl	8001b00 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e8a:	4838      	ldr	r0, [pc, #224]	; (8000f6c <main+0x12c>)
 8000e8c:	f001 f8c4 	bl	8002018 <HAL_GPIO_WritePin>

  for (int i=0; i<512; i++)
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	e007      	b.n	8000ea6 <main+0x66>
  {
	  EEPROM_PageErase(i);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ffa4 	bl	8000de8 <EEPROM_PageErase>
  for (int i=0; i<512; i++)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000eac:	dbf3      	blt.n	8000e96 <main+0x56>
  }


  EEPROM_Write(3, 0, dataw1, strlen((char *)dataw1));
 8000eae:	4830      	ldr	r0, [pc, #192]	; (8000f70 <main+0x130>)
 8000eb0:	f7ff f9ae 	bl	8000210 <strlen>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	4a2d      	ldr	r2, [pc, #180]	; (8000f70 <main+0x130>)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f7ff fe5b 	bl	8000b78 <EEPROM_Write>

  EEPROM_Write(5, 20, dataw2, strlen((char *)dataw2));
 8000ec2:	482c      	ldr	r0, [pc, #176]	; (8000f74 <main+0x134>)
 8000ec4:	f7ff f9a4 	bl	8000210 <strlen>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	4a29      	ldr	r2, [pc, #164]	; (8000f74 <main+0x134>)
 8000ece:	2114      	movs	r1, #20
 8000ed0:	2005      	movs	r0, #5
 8000ed2:	f7ff fe51 	bl	8000b78 <EEPROM_Write>

  EEPROM_Write_NUM (6, 0, dataw3);
 8000ed6:	4b28      	ldr	r3, [pc, #160]	; (8000f78 <main+0x138>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	2100      	movs	r1, #0
 8000ede:	2006      	movs	r0, #6
 8000ee0:	f7ff feee 	bl	8000cc0 <EEPROM_Write_NUM>


  EEPROM_Read(3, 0, datar1, 50);
 8000ee4:	2332      	movs	r3, #50	; 0x32
 8000ee6:	4a25      	ldr	r2, [pc, #148]	; (8000f7c <main+0x13c>)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2003      	movs	r0, #3
 8000eec:	f7ff ff1a 	bl	8000d24 <EEPROM_Read>

  EEPROM_Read(5, 20, datar2, 50);
 8000ef0:	2332      	movs	r3, #50	; 0x32
 8000ef2:	4a23      	ldr	r2, [pc, #140]	; (8000f80 <main+0x140>)
 8000ef4:	2114      	movs	r1, #20
 8000ef6:	2005      	movs	r0, #5
 8000ef8:	f7ff ff14 	bl	8000d24 <EEPROM_Read>

  datar3 = EEPROM_Read_NUM (6, 0);
 8000efc:	2100      	movs	r1, #0
 8000efe:	2006      	movs	r0, #6
 8000f00:	f7ff fef6 	bl	8000cf0 <EEPROM_Read_NUM>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4a1f      	ldr	r2, [pc, #124]	; (8000f84 <main+0x144>)
 8000f08:	6013      	str	r3, [r2, #0]

//  datar4 = EEPROM_Read_NUM (25, 15);

	SSD1306_Clear();
 8000f0a:	f000 fb7c 	bl	8001606 <SSD1306_Clear>

	SSD1306_GotoXY(1, 10);
 8000f0e:	210a      	movs	r1, #10
 8000f10:	2001      	movs	r0, #1
 8000f12:	f000 fabd 	bl	8001490 <SSD1306_GotoXY>
	SSD1306_Puts("datar3:", &Font_7x10, 1);
 8000f16:	2201      	movs	r2, #1
 8000f18:	4912      	ldr	r1, [pc, #72]	; (8000f64 <main+0x124>)
 8000f1a:	481b      	ldr	r0, [pc, #108]	; (8000f88 <main+0x148>)
 8000f1c:	f000 fb4e 	bl	80015bc <SSD1306_Puts>
	SSD1306_GotoXY(48, 10);
 8000f20:	210a      	movs	r1, #10
 8000f22:	2030      	movs	r0, #48	; 0x30
 8000f24:	f000 fab4 	bl	8001490 <SSD1306_GotoXY>
	display_data(datar3);
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <main+0x144>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f8ef 	bl	8001110 <display_data>
//	SSD1306_ScrollRight(1, 10);

//	HAL_Delay(2000);
//////////////////

	SSD1306_GotoXY(1, 25);
 8000f32:	2119      	movs	r1, #25
 8000f34:	2001      	movs	r0, #1
 8000f36:	f000 faab 	bl	8001490 <SSD1306_GotoXY>
	SSD1306_Puts((char*)datar1, &Font_7x10, 1);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4909      	ldr	r1, [pc, #36]	; (8000f64 <main+0x124>)
 8000f3e:	480f      	ldr	r0, [pc, #60]	; (8000f7c <main+0x13c>)
 8000f40:	f000 fb3c 	bl	80015bc <SSD1306_Puts>
//	SSD1306_ScrollRight(1, 10);

//	HAL_Delay(2000);
///////////////

	SSD1306_GotoXY(1, 40);
 8000f44:	2128      	movs	r1, #40	; 0x28
 8000f46:	2001      	movs	r0, #1
 8000f48:	f000 faa2 	bl	8001490 <SSD1306_GotoXY>
	SSD1306_Puts((char*)datar2, &Font_7x10, 1);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4905      	ldr	r1, [pc, #20]	; (8000f64 <main+0x124>)
 8000f50:	480b      	ldr	r0, [pc, #44]	; (8000f80 <main+0x140>)
 8000f52:	f000 fb33 	bl	80015bc <SSD1306_Puts>

	SSD1306_UpdateScreen();
 8000f56:	f000 f9f7 	bl	8001348 <SSD1306_UpdateScreen>

	SSD1306_ScrollLeft(1, 8);
 8000f5a:	2108      	movs	r1, #8
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f000 f8f8 	bl	8001152 <SSD1306_ScrollLeft>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <main+0x122>
 8000f64:	20000000 	.word	0x20000000
 8000f68:	08006b80 	.word	0x08006b80
 8000f6c:	40011000 	.word	0x40011000
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000020 	.word	0x20000020
 8000f78:	20000034 	.word	0x20000034
 8000f7c:	2000029c 	.word	0x2000029c
 8000f80:	20000300 	.word	0x20000300
 8000f84:	20000364 	.word	0x20000364
 8000f88:	08006b90 	.word	0x08006b90

08000f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b090      	sub	sp, #64	; 0x40
 8000f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f92:	f107 0318 	add.w	r3, r7, #24
 8000f96:	2228      	movs	r2, #40	; 0x28
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 ff04 	bl	8003da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb6:	2310      	movs	r3, #16
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbe:	f107 0318 	add.w	r3, r7, #24
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 faee 	bl	80035a4 <HAL_RCC_OscConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000fce:	f000 f8bb 	bl	8001148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f002 fd5c 	bl	8003aa8 <HAL_RCC_ClockConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ff6:	f000 f8a7 	bl	8001148 <Error_Handler>
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	3740      	adds	r7, #64	; 0x40
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_I2C1_Init+0x50>)
 800100a:	4a13      	ldr	r2, [pc, #76]	; (8001058 <MX_I2C1_Init+0x54>)
 800100c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_I2C1_Init+0x50>)
 8001010:	4a12      	ldr	r2, [pc, #72]	; (800105c <MX_I2C1_Init+0x58>)
 8001012:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_I2C1_Init+0x50>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_I2C1_Init+0x50>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_I2C1_Init+0x50>)
 8001022:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001026:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <MX_I2C1_Init+0x50>)
 800102a:	2200      	movs	r2, #0
 800102c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_I2C1_Init+0x50>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <MX_I2C1_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_I2C1_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_I2C1_Init+0x50>)
 8001042:	f001 f801 	bl	8002048 <HAL_I2C_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800104c:	f000 f87c 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000234 	.word	0x20000234
 8001058:	40005400 	.word	0x40005400
 800105c:	00061a80 	.word	0x00061a80

08001060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <MX_GPIO_Init+0xa8>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a23      	ldr	r2, [pc, #140]	; (8001108 <MX_GPIO_Init+0xa8>)
 800107a:	f043 0310 	orr.w	r3, r3, #16
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b21      	ldr	r3, [pc, #132]	; (8001108 <MX_GPIO_Init+0xa8>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0310 	and.w	r3, r3, #16
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108c:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <MX_GPIO_Init+0xa8>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a1d      	ldr	r2, [pc, #116]	; (8001108 <MX_GPIO_Init+0xa8>)
 8001092:	f043 0320 	orr.w	r3, r3, #32
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <MX_GPIO_Init+0xa8>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0320 	and.w	r3, r3, #32
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <MX_GPIO_Init+0xa8>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a17      	ldr	r2, [pc, #92]	; (8001108 <MX_GPIO_Init+0xa8>)
 80010aa:	f043 0304 	orr.w	r3, r3, #4
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <MX_GPIO_Init+0xa8>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <MX_GPIO_Init+0xa8>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a11      	ldr	r2, [pc, #68]	; (8001108 <MX_GPIO_Init+0xa8>)
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_GPIO_Init+0xa8>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin|LD4C10_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80010da:	480c      	ldr	r0, [pc, #48]	; (800110c <MX_GPIO_Init+0xac>)
 80010dc:	f000 ff9c 	bl	8002018 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD4C10_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD4C10_Pin;
 80010e0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80010e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f2:	f107 0310 	add.w	r3, r7, #16
 80010f6:	4619      	mov	r1, r3
 80010f8:	4804      	ldr	r0, [pc, #16]	; (800110c <MX_GPIO_Init+0xac>)
 80010fa:	f000 fe09 	bl	8001d10 <HAL_GPIO_Init>

}
 80010fe:	bf00      	nop
 8001100:	3720      	adds	r7, #32
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000
 800110c:	40011000 	.word	0x40011000

08001110 <display_data>:

/* USER CODE BEGIN 4 */

void display_data(float dataNum)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	sprintf(data_char,"%0.4f", dataNum);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff f9e5 	bl	80004e8 <__aeabi_f2d>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4906      	ldr	r1, [pc, #24]	; (800113c <display_data+0x2c>)
 8001124:	4806      	ldr	r0, [pc, #24]	; (8001140 <display_data+0x30>)
 8001126:	f003 faa7 	bl	8004678 <siprintf>
	SSD1306_Puts(data_char, &Font_7x10, 1);
 800112a:	2201      	movs	r2, #1
 800112c:	4905      	ldr	r1, [pc, #20]	; (8001144 <display_data+0x34>)
 800112e:	4804      	ldr	r0, [pc, #16]	; (8001140 <display_data+0x30>)
 8001130:	f000 fa44 	bl	80015bc <SSD1306_Puts>
	//SSD1306_UpdateScreen();
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	08006b98 	.word	0x08006b98
 8001140:	20000288 	.word	0x20000288
 8001144:	20000000 	.word	0x20000000

08001148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800114c:	b672      	cpsid	i
}
 800114e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001150:	e7fe      	b.n	8001150 <Error_Handler+0x8>

08001152 <SSD1306_ScrollLeft>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
}


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	460a      	mov	r2, r1
 800115c:	71fb      	strb	r3, [r7, #7]
 800115e:	4613      	mov	r3, r2
 8001160:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8001162:	2227      	movs	r2, #39	; 0x27
 8001164:	2100      	movs	r1, #0
 8001166:	2078      	movs	r0, #120	; 0x78
 8001168:	f000 fad0 	bl	800170c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	2078      	movs	r0, #120	; 0x78
 8001172:	f000 facb 	bl	800170c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	461a      	mov	r2, r3
 800117a:	2100      	movs	r1, #0
 800117c:	2078      	movs	r0, #120	; 0x78
 800117e:	f000 fac5 	bl	800170c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2078      	movs	r0, #120	; 0x78
 8001188:	f000 fac0 	bl	800170c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 800118c:	79bb      	ldrb	r3, [r7, #6]
 800118e:	461a      	mov	r2, r3
 8001190:	2100      	movs	r1, #0
 8001192:	2078      	movs	r0, #120	; 0x78
 8001194:	f000 faba 	bl	800170c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	2078      	movs	r0, #120	; 0x78
 800119e:	f000 fab5 	bl	800170c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80011a2:	22ff      	movs	r2, #255	; 0xff
 80011a4:	2100      	movs	r1, #0
 80011a6:	2078      	movs	r0, #120	; 0x78
 80011a8:	f000 fab0 	bl	800170c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80011ac:	222f      	movs	r2, #47	; 0x2f
 80011ae:	2100      	movs	r1, #0
 80011b0:	2078      	movs	r0, #120	; 0x78
 80011b2:	f000 faab 	bl	800170c <ssd1306_I2C_Write>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80011c6:	f000 fa27 	bl	8001618 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80011ca:	f644 6320 	movw	r3, #20000	; 0x4e20
 80011ce:	2201      	movs	r2, #1
 80011d0:	2178      	movs	r1, #120	; 0x78
 80011d2:	485b      	ldr	r0, [pc, #364]	; (8001340 <SSD1306_Init+0x180>)
 80011d4:	f001 fcdc 	bl	8002b90 <HAL_I2C_IsDeviceReady>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	e0a9      	b.n	8001336 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80011e2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80011e6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011e8:	e002      	b.n	80011f0 <SSD1306_Init+0x30>
		p--;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f9      	bne.n	80011ea <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80011f6:	22ae      	movs	r2, #174	; 0xae
 80011f8:	2100      	movs	r1, #0
 80011fa:	2078      	movs	r0, #120	; 0x78
 80011fc:	f000 fa86 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001200:	2220      	movs	r2, #32
 8001202:	2100      	movs	r1, #0
 8001204:	2078      	movs	r0, #120	; 0x78
 8001206:	f000 fa81 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800120a:	2210      	movs	r2, #16
 800120c:	2100      	movs	r1, #0
 800120e:	2078      	movs	r0, #120	; 0x78
 8001210:	f000 fa7c 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001214:	22b0      	movs	r2, #176	; 0xb0
 8001216:	2100      	movs	r1, #0
 8001218:	2078      	movs	r0, #120	; 0x78
 800121a:	f000 fa77 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800121e:	22c8      	movs	r2, #200	; 0xc8
 8001220:	2100      	movs	r1, #0
 8001222:	2078      	movs	r0, #120	; 0x78
 8001224:	f000 fa72 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	2078      	movs	r0, #120	; 0x78
 800122e:	f000 fa6d 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001232:	2210      	movs	r2, #16
 8001234:	2100      	movs	r1, #0
 8001236:	2078      	movs	r0, #120	; 0x78
 8001238:	f000 fa68 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800123c:	2240      	movs	r2, #64	; 0x40
 800123e:	2100      	movs	r1, #0
 8001240:	2078      	movs	r0, #120	; 0x78
 8001242:	f000 fa63 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001246:	2281      	movs	r2, #129	; 0x81
 8001248:	2100      	movs	r1, #0
 800124a:	2078      	movs	r0, #120	; 0x78
 800124c:	f000 fa5e 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001250:	22ff      	movs	r2, #255	; 0xff
 8001252:	2100      	movs	r1, #0
 8001254:	2078      	movs	r0, #120	; 0x78
 8001256:	f000 fa59 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800125a:	22a1      	movs	r2, #161	; 0xa1
 800125c:	2100      	movs	r1, #0
 800125e:	2078      	movs	r0, #120	; 0x78
 8001260:	f000 fa54 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001264:	22a6      	movs	r2, #166	; 0xa6
 8001266:	2100      	movs	r1, #0
 8001268:	2078      	movs	r0, #120	; 0x78
 800126a:	f000 fa4f 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800126e:	22a8      	movs	r2, #168	; 0xa8
 8001270:	2100      	movs	r1, #0
 8001272:	2078      	movs	r0, #120	; 0x78
 8001274:	f000 fa4a 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001278:	223f      	movs	r2, #63	; 0x3f
 800127a:	2100      	movs	r1, #0
 800127c:	2078      	movs	r0, #120	; 0x78
 800127e:	f000 fa45 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001282:	22a4      	movs	r2, #164	; 0xa4
 8001284:	2100      	movs	r1, #0
 8001286:	2078      	movs	r0, #120	; 0x78
 8001288:	f000 fa40 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800128c:	22d3      	movs	r2, #211	; 0xd3
 800128e:	2100      	movs	r1, #0
 8001290:	2078      	movs	r0, #120	; 0x78
 8001292:	f000 fa3b 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	2078      	movs	r0, #120	; 0x78
 800129c:	f000 fa36 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80012a0:	22d5      	movs	r2, #213	; 0xd5
 80012a2:	2100      	movs	r1, #0
 80012a4:	2078      	movs	r0, #120	; 0x78
 80012a6:	f000 fa31 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80012aa:	22f0      	movs	r2, #240	; 0xf0
 80012ac:	2100      	movs	r1, #0
 80012ae:	2078      	movs	r0, #120	; 0x78
 80012b0:	f000 fa2c 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80012b4:	22d9      	movs	r2, #217	; 0xd9
 80012b6:	2100      	movs	r1, #0
 80012b8:	2078      	movs	r0, #120	; 0x78
 80012ba:	f000 fa27 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80012be:	2222      	movs	r2, #34	; 0x22
 80012c0:	2100      	movs	r1, #0
 80012c2:	2078      	movs	r0, #120	; 0x78
 80012c4:	f000 fa22 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80012c8:	22da      	movs	r2, #218	; 0xda
 80012ca:	2100      	movs	r1, #0
 80012cc:	2078      	movs	r0, #120	; 0x78
 80012ce:	f000 fa1d 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80012d2:	2212      	movs	r2, #18
 80012d4:	2100      	movs	r1, #0
 80012d6:	2078      	movs	r0, #120	; 0x78
 80012d8:	f000 fa18 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80012dc:	22db      	movs	r2, #219	; 0xdb
 80012de:	2100      	movs	r1, #0
 80012e0:	2078      	movs	r0, #120	; 0x78
 80012e2:	f000 fa13 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80012e6:	2220      	movs	r2, #32
 80012e8:	2100      	movs	r1, #0
 80012ea:	2078      	movs	r0, #120	; 0x78
 80012ec:	f000 fa0e 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80012f0:	228d      	movs	r2, #141	; 0x8d
 80012f2:	2100      	movs	r1, #0
 80012f4:	2078      	movs	r0, #120	; 0x78
 80012f6:	f000 fa09 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80012fa:	2214      	movs	r2, #20
 80012fc:	2100      	movs	r1, #0
 80012fe:	2078      	movs	r0, #120	; 0x78
 8001300:	f000 fa04 	bl	800170c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001304:	22af      	movs	r2, #175	; 0xaf
 8001306:	2100      	movs	r1, #0
 8001308:	2078      	movs	r0, #120	; 0x78
 800130a:	f000 f9ff 	bl	800170c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800130e:	222e      	movs	r2, #46	; 0x2e
 8001310:	2100      	movs	r1, #0
 8001312:	2078      	movs	r0, #120	; 0x78
 8001314:	f000 f9fa 	bl	800170c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001318:	2000      	movs	r0, #0
 800131a:	f000 f843 	bl	80013a4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800131e:	f000 f813 	bl	8001348 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <SSD1306_Init+0x184>)
 8001324:	2200      	movs	r2, #0
 8001326:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <SSD1306_Init+0x184>)
 800132a:	2200      	movs	r2, #0
 800132c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <SSD1306_Init+0x184>)
 8001330:	2201      	movs	r2, #1
 8001332:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001334:	2301      	movs	r3, #1
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000234 	.word	0x20000234
 8001344:	20000768 	.word	0x20000768

08001348 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800134e:	2300      	movs	r3, #0
 8001350:	71fb      	strb	r3, [r7, #7]
 8001352:	e01d      	b.n	8001390 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	3b50      	subs	r3, #80	; 0x50
 8001358:	b2db      	uxtb	r3, r3
 800135a:	461a      	mov	r2, r3
 800135c:	2100      	movs	r1, #0
 800135e:	2078      	movs	r0, #120	; 0x78
 8001360:	f000 f9d4 	bl	800170c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001364:	2200      	movs	r2, #0
 8001366:	2100      	movs	r1, #0
 8001368:	2078      	movs	r0, #120	; 0x78
 800136a:	f000 f9cf 	bl	800170c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800136e:	2210      	movs	r2, #16
 8001370:	2100      	movs	r1, #0
 8001372:	2078      	movs	r0, #120	; 0x78
 8001374:	f000 f9ca 	bl	800170c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	01db      	lsls	r3, r3, #7
 800137c:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <SSD1306_UpdateScreen+0x58>)
 800137e:	441a      	add	r2, r3
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	2140      	movs	r1, #64	; 0x40
 8001384:	2078      	movs	r0, #120	; 0x78
 8001386:	f000 f95b 	bl	8001640 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	3301      	adds	r3, #1
 800138e:	71fb      	strb	r3, [r7, #7]
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	2b07      	cmp	r3, #7
 8001394:	d9de      	bls.n	8001354 <SSD1306_UpdateScreen+0xc>
	}
}
 8001396:	bf00      	nop
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000368 	.word	0x20000368

080013a4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <SSD1306_Fill+0x14>
 80013b4:	2300      	movs	r3, #0
 80013b6:	e000      	b.n	80013ba <SSD1306_Fill+0x16>
 80013b8:	23ff      	movs	r3, #255	; 0xff
 80013ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013be:	4619      	mov	r1, r3
 80013c0:	4803      	ldr	r0, [pc, #12]	; (80013d0 <SSD1306_Fill+0x2c>)
 80013c2:	f002 fcf1 	bl	8003da8 <memset>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000368 	.word	0x20000368

080013d4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	80fb      	strh	r3, [r7, #6]
 80013de:	460b      	mov	r3, r1
 80013e0:	80bb      	strh	r3, [r7, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	70fb      	strb	r3, [r7, #3]
	if (
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	2b7f      	cmp	r3, #127	; 0x7f
 80013ea:	d848      	bhi.n	800147e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80013ec:	88bb      	ldrh	r3, [r7, #4]
 80013ee:	2b3f      	cmp	r3, #63	; 0x3f
 80013f0:	d845      	bhi.n	800147e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80013f2:	4b25      	ldr	r3, [pc, #148]	; (8001488 <SSD1306_DrawPixel+0xb4>)
 80013f4:	791b      	ldrb	r3, [r3, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d006      	beq.n	8001408 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	bf0c      	ite	eq
 8001400:	2301      	moveq	r3, #1
 8001402:	2300      	movne	r3, #0
 8001404:	b2db      	uxtb	r3, r3
 8001406:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d11a      	bne.n	8001444 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800140e:	88fa      	ldrh	r2, [r7, #6]
 8001410:	88bb      	ldrh	r3, [r7, #4]
 8001412:	08db      	lsrs	r3, r3, #3
 8001414:	b298      	uxth	r0, r3
 8001416:	4603      	mov	r3, r0
 8001418:	01db      	lsls	r3, r3, #7
 800141a:	4413      	add	r3, r2
 800141c:	4a1b      	ldr	r2, [pc, #108]	; (800148c <SSD1306_DrawPixel+0xb8>)
 800141e:	5cd3      	ldrb	r3, [r2, r3]
 8001420:	b25a      	sxtb	r2, r3
 8001422:	88bb      	ldrh	r3, [r7, #4]
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	2101      	movs	r1, #1
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	b25b      	sxtb	r3, r3
 8001430:	4313      	orrs	r3, r2
 8001432:	b259      	sxtb	r1, r3
 8001434:	88fa      	ldrh	r2, [r7, #6]
 8001436:	4603      	mov	r3, r0
 8001438:	01db      	lsls	r3, r3, #7
 800143a:	4413      	add	r3, r2
 800143c:	b2c9      	uxtb	r1, r1
 800143e:	4a13      	ldr	r2, [pc, #76]	; (800148c <SSD1306_DrawPixel+0xb8>)
 8001440:	54d1      	strb	r1, [r2, r3]
 8001442:	e01d      	b.n	8001480 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001444:	88fa      	ldrh	r2, [r7, #6]
 8001446:	88bb      	ldrh	r3, [r7, #4]
 8001448:	08db      	lsrs	r3, r3, #3
 800144a:	b298      	uxth	r0, r3
 800144c:	4603      	mov	r3, r0
 800144e:	01db      	lsls	r3, r3, #7
 8001450:	4413      	add	r3, r2
 8001452:	4a0e      	ldr	r2, [pc, #56]	; (800148c <SSD1306_DrawPixel+0xb8>)
 8001454:	5cd3      	ldrb	r3, [r2, r3]
 8001456:	b25a      	sxtb	r2, r3
 8001458:	88bb      	ldrh	r3, [r7, #4]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	2101      	movs	r1, #1
 8001460:	fa01 f303 	lsl.w	r3, r1, r3
 8001464:	b25b      	sxtb	r3, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	b25b      	sxtb	r3, r3
 800146a:	4013      	ands	r3, r2
 800146c:	b259      	sxtb	r1, r3
 800146e:	88fa      	ldrh	r2, [r7, #6]
 8001470:	4603      	mov	r3, r0
 8001472:	01db      	lsls	r3, r3, #7
 8001474:	4413      	add	r3, r2
 8001476:	b2c9      	uxtb	r1, r1
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <SSD1306_DrawPixel+0xb8>)
 800147a:	54d1      	strb	r1, [r2, r3]
 800147c:	e000      	b.n	8001480 <SSD1306_DrawPixel+0xac>
		return;
 800147e:	bf00      	nop
	}
}
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	20000768 	.word	0x20000768
 800148c:	20000368 	.word	0x20000368

08001490 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	460a      	mov	r2, r1
 800149a:	80fb      	strh	r3, [r7, #6]
 800149c:	4613      	mov	r3, r2
 800149e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80014a0:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <SSD1306_GotoXY+0x28>)
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80014a6:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <SSD1306_GotoXY+0x28>)
 80014a8:	88bb      	ldrh	r3, [r7, #4]
 80014aa:	8053      	strh	r3, [r2, #2]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000768 	.word	0x20000768

080014bc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	71fb      	strb	r3, [r7, #7]
 80014c8:	4613      	mov	r3, r2
 80014ca:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80014cc:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <SSD1306_Putc+0xfc>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	4413      	add	r3, r2
	if (
 80014d8:	2b7f      	cmp	r3, #127	; 0x7f
 80014da:	dc07      	bgt.n	80014ec <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80014dc:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <SSD1306_Putc+0xfc>)
 80014de:	885b      	ldrh	r3, [r3, #2]
 80014e0:	461a      	mov	r2, r3
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	785b      	ldrb	r3, [r3, #1]
 80014e6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80014e8:	2b3f      	cmp	r3, #63	; 0x3f
 80014ea:	dd01      	ble.n	80014f0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	e05e      	b.n	80015ae <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	e04b      	b.n	800158e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	3b20      	subs	r3, #32
 80014fe:	6839      	ldr	r1, [r7, #0]
 8001500:	7849      	ldrb	r1, [r1, #1]
 8001502:	fb01 f303 	mul.w	r3, r1, r3
 8001506:	4619      	mov	r1, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	440b      	add	r3, r1
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4413      	add	r3, r2
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	e030      	b.n	800157c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d010      	beq.n	800154c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <SSD1306_Putc+0xfc>)
 800152c:	881a      	ldrh	r2, [r3, #0]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	b29b      	uxth	r3, r3
 8001532:	4413      	add	r3, r2
 8001534:	b298      	uxth	r0, r3
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <SSD1306_Putc+0xfc>)
 8001538:	885a      	ldrh	r2, [r3, #2]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	b29b      	uxth	r3, r3
 800153e:	4413      	add	r3, r2
 8001540:	b29b      	uxth	r3, r3
 8001542:	79ba      	ldrb	r2, [r7, #6]
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff ff45 	bl	80013d4 <SSD1306_DrawPixel>
 800154a:	e014      	b.n	8001576 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800154c:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <SSD1306_Putc+0xfc>)
 800154e:	881a      	ldrh	r2, [r3, #0]
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4413      	add	r3, r2
 8001556:	b298      	uxth	r0, r3
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <SSD1306_Putc+0xfc>)
 800155a:	885a      	ldrh	r2, [r3, #2]
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	b29b      	uxth	r3, r3
 8001560:	4413      	add	r3, r2
 8001562:	b299      	uxth	r1, r3
 8001564:	79bb      	ldrb	r3, [r7, #6]
 8001566:	2b00      	cmp	r3, #0
 8001568:	bf0c      	ite	eq
 800156a:	2301      	moveq	r3, #1
 800156c:	2300      	movne	r3, #0
 800156e:	b2db      	uxtb	r3, r3
 8001570:	461a      	mov	r2, r3
 8001572:	f7ff ff2f 	bl	80013d4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	3301      	adds	r3, #1
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4293      	cmp	r3, r2
 8001586:	d3c8      	bcc.n	800151a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	3301      	adds	r3, #1
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	785b      	ldrb	r3, [r3, #1]
 8001592:	461a      	mov	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	4293      	cmp	r3, r2
 8001598:	d3ad      	bcc.n	80014f6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <SSD1306_Putc+0xfc>)
 800159c:	881a      	ldrh	r2, [r3, #0]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <SSD1306_Putc+0xfc>)
 80015aa:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80015ac:	79fb      	ldrb	r3, [r7, #7]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000768 	.word	0x20000768

080015bc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	4613      	mov	r3, r2
 80015c8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80015ca:	e012      	b.n	80015f2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	79fa      	ldrb	r2, [r7, #7]
 80015d2:	68b9      	ldr	r1, [r7, #8]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff71 	bl	80014bc <SSD1306_Putc>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d002      	beq.n	80015ec <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	e008      	b.n	80015fe <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	3301      	adds	r3, #1
 80015f0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1e8      	bne.n	80015cc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	781b      	ldrb	r3, [r3, #0]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800160a:	2000      	movs	r0, #0
 800160c:	f7ff feca 	bl	80013a4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001610:	f7ff fe9a 	bl	8001348 <SSD1306_UpdateScreen>
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}

08001618 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <ssd1306_I2C_Init+0x24>)
 8001620:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001622:	e002      	b.n	800162a <ssd1306_I2C_Init+0x12>
		p--;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	607b      	str	r3, [r7, #4]
	while(p>0)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f9      	bne.n	8001624 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	0003d090 	.word	0x0003d090

08001640 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b0c7      	sub	sp, #284	; 0x11c
 8001644:	af02      	add	r7, sp, #8
 8001646:	4604      	mov	r4, r0
 8001648:	4608      	mov	r0, r1
 800164a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800164e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001652:	600a      	str	r2, [r1, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800165a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800165e:	4622      	mov	r2, r4
 8001660:	701a      	strb	r2, [r3, #0]
 8001662:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001666:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800166a:	4602      	mov	r2, r0
 800166c:	701a      	strb	r2, [r3, #0]
 800166e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001672:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001676:	460a      	mov	r2, r1
 8001678:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800167a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800167e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001682:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001686:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800168a:	7812      	ldrb	r2, [r2, #0]
 800168c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800168e:	2300      	movs	r3, #0
 8001690:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001694:	e015      	b.n	80016c2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001696:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800169a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800169e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	441a      	add	r2, r3
 80016a6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80016aa:	3301      	adds	r3, #1
 80016ac:	7811      	ldrb	r1, [r2, #0]
 80016ae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80016b2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80016b6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80016b8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80016bc:	3301      	adds	r3, #1
 80016be:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80016c2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80016cc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80016d0:	8812      	ldrh	r2, [r2, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d8df      	bhi.n	8001696 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80016d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016da:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b299      	uxth	r1, r3
 80016e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	f107 020c 	add.w	r2, r7, #12
 80016f4:	200a      	movs	r0, #10
 80016f6:	9000      	str	r0, [sp, #0]
 80016f8:	4803      	ldr	r0, [pc, #12]	; (8001708 <ssd1306_I2C_WriteMulti+0xc8>)
 80016fa:	f000 fde9 	bl	80022d0 <HAL_I2C_Master_Transmit>
}
 80016fe:	bf00      	nop
 8001700:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001704:	46bd      	mov	sp, r7
 8001706:	bd90      	pop	{r4, r7, pc}
 8001708:	20000234 	.word	0x20000234

0800170c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af02      	add	r7, sp, #8
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
 8001716:	460b      	mov	r3, r1
 8001718:	71bb      	strb	r3, [r7, #6]
 800171a:	4613      	mov	r3, r2
 800171c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800171e:	79bb      	ldrb	r3, [r7, #6]
 8001720:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001722:	797b      	ldrb	r3, [r7, #5]
 8001724:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	b299      	uxth	r1, r3
 800172a:	f107 020c 	add.w	r2, r7, #12
 800172e:	230a      	movs	r3, #10
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2302      	movs	r3, #2
 8001734:	4803      	ldr	r0, [pc, #12]	; (8001744 <ssd1306_I2C_Write+0x38>)
 8001736:	f000 fdcb 	bl	80022d0 <HAL_I2C_Master_Transmit>
}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000234 	.word	0x20000234

08001748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_MspInit+0x5c>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <HAL_MspInit+0x5c>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6193      	str	r3, [r2, #24]
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_MspInit+0x5c>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <HAL_MspInit+0x5c>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <HAL_MspInit+0x5c>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001770:	61d3      	str	r3, [r2, #28]
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <HAL_MspInit+0x5c>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_MspInit+0x60>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_MspInit+0x60>)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010000 	.word	0x40010000

080017ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a15      	ldr	r2, [pc, #84]	; (800181c <HAL_I2C_MspInit+0x70>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d123      	bne.n	8001814 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <HAL_I2C_MspInit+0x74>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a13      	ldr	r2, [pc, #76]	; (8001820 <HAL_I2C_MspInit+0x74>)
 80017d2:	f043 0308 	orr.w	r3, r3, #8
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_I2C_MspInit+0x74>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017e4:	23c0      	movs	r3, #192	; 0xc0
 80017e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017e8:	2312      	movs	r3, #18
 80017ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ec:	2303      	movs	r3, #3
 80017ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	4619      	mov	r1, r3
 80017f6:	480b      	ldr	r0, [pc, #44]	; (8001824 <HAL_I2C_MspInit+0x78>)
 80017f8:	f000 fa8a 	bl	8001d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_I2C_MspInit+0x74>)
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	4a07      	ldr	r2, [pc, #28]	; (8001820 <HAL_I2C_MspInit+0x74>)
 8001802:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001806:	61d3      	str	r3, [r2, #28]
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_I2C_MspInit+0x74>)
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001814:	bf00      	nop
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40005400 	.word	0x40005400
 8001820:	40021000 	.word	0x40021000
 8001824:	40010c00 	.word	0x40010c00

08001828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800182c:	e7fe      	b.n	800182c <NMI_Handler+0x4>

0800182e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001832:	e7fe      	b.n	8001832 <HardFault_Handler+0x4>

08001834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <MemManage_Handler+0x4>

0800183a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <BusFault_Handler+0x4>

08001840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <UsageFault_Handler+0x4>

08001846 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr

0800186a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800186e:	f000 f92b 	bl	8001ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}

08001876 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
	return 1;
 800187a:	2301      	movs	r3, #1
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <_kill>:

int _kill(int pid, int sig)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800188e:	f002 fa61 	bl	8003d54 <__errno>
 8001892:	4603      	mov	r3, r0
 8001894:	2216      	movs	r2, #22
 8001896:	601a      	str	r2, [r3, #0]
	return -1;
 8001898:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_exit>:

void _exit (int status)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ffe7 	bl	8001884 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018b6:	e7fe      	b.n	80018b6 <_exit+0x12>

080018b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e00a      	b.n	80018e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018ca:	f3af 8000 	nop.w
 80018ce:	4601      	mov	r1, r0
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	60ba      	str	r2, [r7, #8]
 80018d6:	b2ca      	uxtb	r2, r1
 80018d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3301      	adds	r3, #1
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	dbf0      	blt.n	80018ca <_read+0x12>
	}

return len;
 80018e8:	687b      	ldr	r3, [r7, #4]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	e009      	b.n	8001918 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	60ba      	str	r2, [r7, #8]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	dbf1      	blt.n	8001904 <_write+0x12>
	}
	return len;
 8001920:	687b      	ldr	r3, [r7, #4]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <_close>:

int _close(int file)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
	return -1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001950:	605a      	str	r2, [r3, #4]
	return 0;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr

0800195e <_isatty>:

int _isatty(int file)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
	return 1;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001972:	b480      	push	{r7}
 8001974:	b085      	sub	sp, #20
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
	return 0;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
	...

0800198c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001994:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <_sbrk+0x5c>)
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <_sbrk+0x60>)
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <_sbrk+0x64>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <_sbrk+0x68>)
 80019ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d207      	bcs.n	80019cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019bc:	f002 f9ca 	bl	8003d54 <__errno>
 80019c0:	4603      	mov	r3, r0
 80019c2:	220c      	movs	r2, #12
 80019c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ca:	e009      	b.n	80019e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <_sbrk+0x64>)
 80019dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20002000 	.word	0x20002000
 80019ec:	00000400 	.word	0x00000400
 80019f0:	20000770 	.word	0x20000770
 80019f4:	20000788 	.word	0x20000788

080019f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a04:	480c      	ldr	r0, [pc, #48]	; (8001a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a06:	490d      	ldr	r1, [pc, #52]	; (8001a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a0c:	e002      	b.n	8001a14 <LoopCopyDataInit>

08001a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a12:	3304      	adds	r3, #4

08001a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a18:	d3f9      	bcc.n	8001a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a1c:	4c0a      	ldr	r4, [pc, #40]	; (8001a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a20:	e001      	b.n	8001a26 <LoopFillZerobss>

08001a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a24:	3204      	adds	r2, #4

08001a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a28:	d3fb      	bcc.n	8001a22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a2a:	f7ff ffe5 	bl	80019f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f002 f997 	bl	8003d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a32:	f7ff fa05 	bl	8000e40 <main>
  bx lr
 8001a36:	4770      	bx	lr
  ldr r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a3c:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8001a40:	08007724 	.word	0x08007724
  ldr r2, =_sbss
 8001a44:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8001a48:	20000788 	.word	0x20000788

08001a4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a4c:	e7fe      	b.n	8001a4c <ADC1_IRQHandler>

08001a4e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a52:	2003      	movs	r0, #3
 8001a54:	f000 f928 	bl	8001ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f000 f805 	bl	8001a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a5e:	f7ff fe73 	bl	8001748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_InitTick+0x54>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_InitTick+0x58>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 f935 	bl	8001cf6 <HAL_SYSTICK_Config>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00e      	b.n	8001ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b0f      	cmp	r3, #15
 8001a9a:	d80a      	bhi.n	8001ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f000 f90b 	bl	8001cbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa8:	4a06      	ldr	r2, [pc, #24]	; (8001ac4 <HAL_InitTick+0x5c>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e000      	b.n	8001ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000038 	.word	0x20000038
 8001ac0:	20000040 	.word	0x20000040
 8001ac4:	2000003c 	.word	0x2000003c

08001ac8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_IncTick+0x1c>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_IncTick+0x20>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	4a03      	ldr	r2, [pc, #12]	; (8001ae8 <HAL_IncTick+0x20>)
 8001ada:	6013      	str	r3, [r2, #0]
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	20000040 	.word	0x20000040
 8001ae8:	20000774 	.word	0x20000774

08001aec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return uwTick;
 8001af0:	4b02      	ldr	r3, [pc, #8]	; (8001afc <HAL_GetTick+0x10>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	20000774 	.word	0x20000774

08001b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b08:	f7ff fff0 	bl	8001aec <HAL_GetTick>
 8001b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b18:	d005      	beq.n	8001b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <HAL_Delay+0x44>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b26:	bf00      	nop
 8001b28:	f7ff ffe0 	bl	8001aec <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d8f7      	bhi.n	8001b28 <HAL_Delay+0x28>
  {
  }
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000040 	.word	0x20000040

08001b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b64:	4013      	ands	r3, r2
 8001b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7a:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	60d3      	str	r3, [r2, #12]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	f003 0307 	and.w	r3, r3, #7
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	6039      	str	r1, [r7, #0]
 8001bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	db0a      	blt.n	8001bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	490c      	ldr	r1, [pc, #48]	; (8001bf8 <__NVIC_SetPriority+0x4c>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	0112      	lsls	r2, r2, #4
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd4:	e00a      	b.n	8001bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4908      	ldr	r1, [pc, #32]	; (8001bfc <__NVIC_SetPriority+0x50>)
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	3b04      	subs	r3, #4
 8001be4:	0112      	lsls	r2, r2, #4
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	440b      	add	r3, r1
 8001bea:	761a      	strb	r2, [r3, #24]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000e100 	.word	0xe000e100
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	; 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f1c3 0307 	rsb	r3, r3, #7
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	bf28      	it	cs
 8001c1e:	2304      	movcs	r3, #4
 8001c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3304      	adds	r3, #4
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d902      	bls.n	8001c30 <NVIC_EncodePriority+0x30>
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3b03      	subs	r3, #3
 8001c2e:	e000      	b.n	8001c32 <NVIC_EncodePriority+0x32>
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	f04f 32ff 	mov.w	r2, #4294967295
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	401a      	ands	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c48:	f04f 31ff 	mov.w	r1, #4294967295
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c52:	43d9      	mvns	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	4313      	orrs	r3, r2
         );
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3724      	adds	r7, #36	; 0x24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c74:	d301      	bcc.n	8001c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c76:	2301      	movs	r3, #1
 8001c78:	e00f      	b.n	8001c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <SysTick_Config+0x40>)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c82:	210f      	movs	r1, #15
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295
 8001c88:	f7ff ff90 	bl	8001bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <SysTick_Config+0x40>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c92:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <SysTick_Config+0x40>)
 8001c94:	2207      	movs	r2, #7
 8001c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	e000e010 	.word	0xe000e010

08001ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ff49 	bl	8001b48 <__NVIC_SetPriorityGrouping>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd0:	f7ff ff5e 	bl	8001b90 <__NVIC_GetPriorityGrouping>
 8001cd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	6978      	ldr	r0, [r7, #20]
 8001cdc:	f7ff ff90 	bl	8001c00 <NVIC_EncodePriority>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff5f 	bl	8001bac <__NVIC_SetPriority>
}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ffb0 	bl	8001c64 <SysTick_Config>
 8001d04:	4603      	mov	r3, r0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b08b      	sub	sp, #44	; 0x2c
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d22:	e169      	b.n	8001ff8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d24:	2201      	movs	r2, #1
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	f040 8158 	bne.w	8001ff2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	4a9a      	ldr	r2, [pc, #616]	; (8001fb0 <HAL_GPIO_Init+0x2a0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d05e      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d4c:	4a98      	ldr	r2, [pc, #608]	; (8001fb0 <HAL_GPIO_Init+0x2a0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d875      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d52:	4a98      	ldr	r2, [pc, #608]	; (8001fb4 <HAL_GPIO_Init+0x2a4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d058      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d58:	4a96      	ldr	r2, [pc, #600]	; (8001fb4 <HAL_GPIO_Init+0x2a4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d86f      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d5e:	4a96      	ldr	r2, [pc, #600]	; (8001fb8 <HAL_GPIO_Init+0x2a8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d052      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d64:	4a94      	ldr	r2, [pc, #592]	; (8001fb8 <HAL_GPIO_Init+0x2a8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d869      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d6a:	4a94      	ldr	r2, [pc, #592]	; (8001fbc <HAL_GPIO_Init+0x2ac>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d04c      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d70:	4a92      	ldr	r2, [pc, #584]	; (8001fbc <HAL_GPIO_Init+0x2ac>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d863      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d76:	4a92      	ldr	r2, [pc, #584]	; (8001fc0 <HAL_GPIO_Init+0x2b0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d046      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d7c:	4a90      	ldr	r2, [pc, #576]	; (8001fc0 <HAL_GPIO_Init+0x2b0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d85d      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d82:	2b12      	cmp	r3, #18
 8001d84:	d82a      	bhi.n	8001ddc <HAL_GPIO_Init+0xcc>
 8001d86:	2b12      	cmp	r3, #18
 8001d88:	d859      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d8a:	a201      	add	r2, pc, #4	; (adr r2, 8001d90 <HAL_GPIO_Init+0x80>)
 8001d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d90:	08001e0b 	.word	0x08001e0b
 8001d94:	08001de5 	.word	0x08001de5
 8001d98:	08001df7 	.word	0x08001df7
 8001d9c:	08001e39 	.word	0x08001e39
 8001da0:	08001e3f 	.word	0x08001e3f
 8001da4:	08001e3f 	.word	0x08001e3f
 8001da8:	08001e3f 	.word	0x08001e3f
 8001dac:	08001e3f 	.word	0x08001e3f
 8001db0:	08001e3f 	.word	0x08001e3f
 8001db4:	08001e3f 	.word	0x08001e3f
 8001db8:	08001e3f 	.word	0x08001e3f
 8001dbc:	08001e3f 	.word	0x08001e3f
 8001dc0:	08001e3f 	.word	0x08001e3f
 8001dc4:	08001e3f 	.word	0x08001e3f
 8001dc8:	08001e3f 	.word	0x08001e3f
 8001dcc:	08001e3f 	.word	0x08001e3f
 8001dd0:	08001e3f 	.word	0x08001e3f
 8001dd4:	08001ded 	.word	0x08001ded
 8001dd8:	08001e01 	.word	0x08001e01
 8001ddc:	4a79      	ldr	r2, [pc, #484]	; (8001fc4 <HAL_GPIO_Init+0x2b4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d013      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001de2:	e02c      	b.n	8001e3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	623b      	str	r3, [r7, #32]
          break;
 8001dea:	e029      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	3304      	adds	r3, #4
 8001df2:	623b      	str	r3, [r7, #32]
          break;
 8001df4:	e024      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	3308      	adds	r3, #8
 8001dfc:	623b      	str	r3, [r7, #32]
          break;
 8001dfe:	e01f      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	330c      	adds	r3, #12
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	e01a      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d102      	bne.n	8001e18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e12:	2304      	movs	r3, #4
 8001e14:	623b      	str	r3, [r7, #32]
          break;
 8001e16:	e013      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d105      	bne.n	8001e2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e20:	2308      	movs	r3, #8
 8001e22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	611a      	str	r2, [r3, #16]
          break;
 8001e2a:	e009      	b.n	8001e40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	615a      	str	r2, [r3, #20]
          break;
 8001e36:	e003      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
          break;
 8001e3c:	e000      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          break;
 8001e3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2bff      	cmp	r3, #255	; 0xff
 8001e44:	d801      	bhi.n	8001e4a <HAL_GPIO_Init+0x13a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	e001      	b.n	8001e4e <HAL_GPIO_Init+0x13e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2bff      	cmp	r3, #255	; 0xff
 8001e54:	d802      	bhi.n	8001e5c <HAL_GPIO_Init+0x14c>
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	e002      	b.n	8001e62 <HAL_GPIO_Init+0x152>
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	3b08      	subs	r3, #8
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	210f      	movs	r1, #15
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	401a      	ands	r2, r3
 8001e74:	6a39      	ldr	r1, [r7, #32]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 80b1 	beq.w	8001ff2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e90:	4b4d      	ldr	r3, [pc, #308]	; (8001fc8 <HAL_GPIO_Init+0x2b8>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a4c      	ldr	r2, [pc, #304]	; (8001fc8 <HAL_GPIO_Init+0x2b8>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b4a      	ldr	r3, [pc, #296]	; (8001fc8 <HAL_GPIO_Init+0x2b8>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ea8:	4a48      	ldr	r2, [pc, #288]	; (8001fcc <HAL_GPIO_Init+0x2bc>)
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3302      	adds	r3, #2
 8001eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a40      	ldr	r2, [pc, #256]	; (8001fd0 <HAL_GPIO_Init+0x2c0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d013      	beq.n	8001efc <HAL_GPIO_Init+0x1ec>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a3f      	ldr	r2, [pc, #252]	; (8001fd4 <HAL_GPIO_Init+0x2c4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d00d      	beq.n	8001ef8 <HAL_GPIO_Init+0x1e8>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3e      	ldr	r2, [pc, #248]	; (8001fd8 <HAL_GPIO_Init+0x2c8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d007      	beq.n	8001ef4 <HAL_GPIO_Init+0x1e4>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a3d      	ldr	r2, [pc, #244]	; (8001fdc <HAL_GPIO_Init+0x2cc>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d101      	bne.n	8001ef0 <HAL_GPIO_Init+0x1e0>
 8001eec:	2303      	movs	r3, #3
 8001eee:	e006      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	e004      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e002      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001efc:	2300      	movs	r3, #0
 8001efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f00:	f002 0203 	and.w	r2, r2, #3
 8001f04:	0092      	lsls	r2, r2, #2
 8001f06:	4093      	lsls	r3, r2
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f0e:	492f      	ldr	r1, [pc, #188]	; (8001fcc <HAL_GPIO_Init+0x2bc>)
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	3302      	adds	r3, #2
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d006      	beq.n	8001f36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f28:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	492c      	ldr	r1, [pc, #176]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f36:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	4928      	ldr	r1, [pc, #160]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f50:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	4922      	ldr	r1, [pc, #136]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f5e:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	491e      	ldr	r1, [pc, #120]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d006      	beq.n	8001f86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	4918      	ldr	r1, [pc, #96]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	608b      	str	r3, [r1, #8]
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	4914      	ldr	r1, [pc, #80]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d021      	beq.n	8001fe4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	490e      	ldr	r1, [pc, #56]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60cb      	str	r3, [r1, #12]
 8001fac:	e021      	b.n	8001ff2 <HAL_GPIO_Init+0x2e2>
 8001fae:	bf00      	nop
 8001fb0:	10320000 	.word	0x10320000
 8001fb4:	10310000 	.word	0x10310000
 8001fb8:	10220000 	.word	0x10220000
 8001fbc:	10210000 	.word	0x10210000
 8001fc0:	10120000 	.word	0x10120000
 8001fc4:	10110000 	.word	0x10110000
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40010000 	.word	0x40010000
 8001fd0:	40010800 	.word	0x40010800
 8001fd4:	40010c00 	.word	0x40010c00
 8001fd8:	40011000 	.word	0x40011000
 8001fdc:	40011400 	.word	0x40011400
 8001fe0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_GPIO_Init+0x304>)
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	4909      	ldr	r1, [pc, #36]	; (8002014 <HAL_GPIO_Init+0x304>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	f47f ae8e 	bne.w	8001d24 <HAL_GPIO_Init+0x14>
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	372c      	adds	r7, #44	; 0x2c
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	40010400 	.word	0x40010400

08002018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	807b      	strh	r3, [r7, #2]
 8002024:	4613      	mov	r3, r2
 8002026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002028:	787b      	ldrb	r3, [r7, #1]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800202e:	887a      	ldrh	r2, [r7, #2]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002034:	e003      	b.n	800203e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002036:	887b      	ldrh	r3, [r7, #2]
 8002038:	041a      	lsls	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	611a      	str	r2, [r3, #16]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e12b      	b.n	80022b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fb9c 	bl	80017ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2224      	movs	r2, #36	; 0x24
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0201 	bic.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800209a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020ac:	f001 fe20 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 80020b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4a81      	ldr	r2, [pc, #516]	; (80022bc <HAL_I2C_Init+0x274>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d807      	bhi.n	80020cc <HAL_I2C_Init+0x84>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4a80      	ldr	r2, [pc, #512]	; (80022c0 <HAL_I2C_Init+0x278>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	bf94      	ite	ls
 80020c4:	2301      	movls	r3, #1
 80020c6:	2300      	movhi	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	e006      	b.n	80020da <HAL_I2C_Init+0x92>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4a7d      	ldr	r2, [pc, #500]	; (80022c4 <HAL_I2C_Init+0x27c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	bf94      	ite	ls
 80020d4:	2301      	movls	r3, #1
 80020d6:	2300      	movhi	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e0e7      	b.n	80022b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4a78      	ldr	r2, [pc, #480]	; (80022c8 <HAL_I2C_Init+0x280>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	0c9b      	lsrs	r3, r3, #18
 80020ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	430a      	orrs	r2, r1
 8002100:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4a6a      	ldr	r2, [pc, #424]	; (80022bc <HAL_I2C_Init+0x274>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d802      	bhi.n	800211c <HAL_I2C_Init+0xd4>
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	3301      	adds	r3, #1
 800211a:	e009      	b.n	8002130 <HAL_I2C_Init+0xe8>
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	4a69      	ldr	r2, [pc, #420]	; (80022cc <HAL_I2C_Init+0x284>)
 8002128:	fba2 2303 	umull	r2, r3, r2, r3
 800212c:	099b      	lsrs	r3, r3, #6
 800212e:	3301      	adds	r3, #1
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	430b      	orrs	r3, r1
 8002136:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002142:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	495c      	ldr	r1, [pc, #368]	; (80022bc <HAL_I2C_Init+0x274>)
 800214c:	428b      	cmp	r3, r1
 800214e:	d819      	bhi.n	8002184 <HAL_I2C_Init+0x13c>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1e59      	subs	r1, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	fbb1 f3f3 	udiv	r3, r1, r3
 800215e:	1c59      	adds	r1, r3, #1
 8002160:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002164:	400b      	ands	r3, r1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_I2C_Init+0x138>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1e59      	subs	r1, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fbb1 f3f3 	udiv	r3, r1, r3
 8002178:	3301      	adds	r3, #1
 800217a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217e:	e051      	b.n	8002224 <HAL_I2C_Init+0x1dc>
 8002180:	2304      	movs	r3, #4
 8002182:	e04f      	b.n	8002224 <HAL_I2C_Init+0x1dc>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d111      	bne.n	80021b0 <HAL_I2C_Init+0x168>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1e58      	subs	r0, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	440b      	add	r3, r1
 800219a:	fbb0 f3f3 	udiv	r3, r0, r3
 800219e:	3301      	adds	r3, #1
 80021a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	e012      	b.n	80021d6 <HAL_I2C_Init+0x18e>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1e58      	subs	r0, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	0099      	lsls	r1, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c6:	3301      	adds	r3, #1
 80021c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	bf0c      	ite	eq
 80021d0:	2301      	moveq	r3, #1
 80021d2:	2300      	movne	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_I2C_Init+0x196>
 80021da:	2301      	movs	r3, #1
 80021dc:	e022      	b.n	8002224 <HAL_I2C_Init+0x1dc>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10e      	bne.n	8002204 <HAL_I2C_Init+0x1bc>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1e58      	subs	r0, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6859      	ldr	r1, [r3, #4]
 80021ee:	460b      	mov	r3, r1
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	440b      	add	r3, r1
 80021f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f8:	3301      	adds	r3, #1
 80021fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002202:	e00f      	b.n	8002224 <HAL_I2C_Init+0x1dc>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1e58      	subs	r0, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6859      	ldr	r1, [r3, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	0099      	lsls	r1, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	fbb0 f3f3 	udiv	r3, r0, r3
 800221a:	3301      	adds	r3, #1
 800221c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002220:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	6809      	ldr	r1, [r1, #0]
 8002228:	4313      	orrs	r3, r2
 800222a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69da      	ldr	r2, [r3, #28]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002252:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6911      	ldr	r1, [r2, #16]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68d2      	ldr	r2, [r2, #12]
 800225e:	4311      	orrs	r1, r2
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	430b      	orrs	r3, r1
 8002266:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2220      	movs	r2, #32
 800229e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	000186a0 	.word	0x000186a0
 80022c0:	001e847f 	.word	0x001e847f
 80022c4:	003d08ff 	.word	0x003d08ff
 80022c8:	431bde83 	.word	0x431bde83
 80022cc:	10624dd3 	.word	0x10624dd3

080022d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	461a      	mov	r2, r3
 80022dc:	460b      	mov	r3, r1
 80022de:	817b      	strh	r3, [r7, #10]
 80022e0:	4613      	mov	r3, r2
 80022e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022e4:	f7ff fc02 	bl	8001aec <HAL_GetTick>
 80022e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	f040 80e0 	bne.w	80024b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2319      	movs	r3, #25
 80022fe:	2201      	movs	r2, #1
 8002300:	4970      	ldr	r1, [pc, #448]	; (80024c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 ff72 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800230e:	2302      	movs	r3, #2
 8002310:	e0d3      	b.n	80024ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_I2C_Master_Transmit+0x50>
 800231c:	2302      	movs	r3, #2
 800231e:	e0cc      	b.n	80024ba <HAL_I2C_Master_Transmit+0x1ea>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b01      	cmp	r3, #1
 8002334:	d007      	beq.n	8002346 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0201 	orr.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002354:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2221      	movs	r2, #33	; 0x21
 800235a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2210      	movs	r2, #16
 8002362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	893a      	ldrh	r2, [r7, #8]
 8002376:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4a50      	ldr	r2, [pc, #320]	; (80024c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002386:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002388:	8979      	ldrh	r1, [r7, #10]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	6a3a      	ldr	r2, [r7, #32]
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 fd2c 	bl	8002dec <I2C_MasterRequestWrite>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e08d      	b.n	80024ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023b4:	e066      	b.n	8002484 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	6a39      	ldr	r1, [r7, #32]
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 ffec 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00d      	beq.n	80023e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d107      	bne.n	80023de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e06b      	b.n	80024ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	781a      	ldrb	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b04      	cmp	r3, #4
 800241e:	d11b      	bne.n	8002458 <HAL_I2C_Master_Transmit+0x188>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	2b00      	cmp	r3, #0
 8002426:	d017      	beq.n	8002458 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	6a39      	ldr	r1, [r7, #32]
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 ffdc 	bl	800341a <I2C_WaitOnBTFFlagUntilTimeout>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00d      	beq.n	8002484 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	2b04      	cmp	r3, #4
 800246e:	d107      	bne.n	8002480 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e01a      	b.n	80024ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002488:	2b00      	cmp	r3, #0
 800248a:	d194      	bne.n	80023b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800249a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	e000      	b.n	80024ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
  }
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	00100002 	.word	0x00100002
 80024c8:	ffff0000 	.word	0xffff0000

080024cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	4608      	mov	r0, r1
 80024d6:	4611      	mov	r1, r2
 80024d8:	461a      	mov	r2, r3
 80024da:	4603      	mov	r3, r0
 80024dc:	817b      	strh	r3, [r7, #10]
 80024de:	460b      	mov	r3, r1
 80024e0:	813b      	strh	r3, [r7, #8]
 80024e2:	4613      	mov	r3, r2
 80024e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024e6:	f7ff fb01 	bl	8001aec <HAL_GetTick>
 80024ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	f040 80d9 	bne.w	80026ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2319      	movs	r3, #25
 8002500:	2201      	movs	r2, #1
 8002502:	496d      	ldr	r1, [pc, #436]	; (80026b8 <HAL_I2C_Mem_Write+0x1ec>)
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 fe71 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002510:	2302      	movs	r3, #2
 8002512:	e0cc      	b.n	80026ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_I2C_Mem_Write+0x56>
 800251e:	2302      	movs	r3, #2
 8002520:	e0c5      	b.n	80026ae <HAL_I2C_Mem_Write+0x1e2>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b01      	cmp	r3, #1
 8002536:	d007      	beq.n	8002548 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002556:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2221      	movs	r2, #33	; 0x21
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2240      	movs	r2, #64	; 0x40
 8002564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a3a      	ldr	r2, [r7, #32]
 8002572:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002578:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4a4d      	ldr	r2, [pc, #308]	; (80026bc <HAL_I2C_Mem_Write+0x1f0>)
 8002588:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800258a:	88f8      	ldrh	r0, [r7, #6]
 800258c:	893a      	ldrh	r2, [r7, #8]
 800258e:	8979      	ldrh	r1, [r7, #10]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	9301      	str	r3, [sp, #4]
 8002594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	4603      	mov	r3, r0
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 fca8 	bl	8002ef0 <I2C_RequestMemoryWrite>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d052      	beq.n	800264c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e081      	b.n	80026ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 fef2 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00d      	beq.n	80025d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d107      	bne.n	80025d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e06b      	b.n	80026ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	781a      	ldrb	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b04      	cmp	r3, #4
 8002612:	d11b      	bne.n	800264c <HAL_I2C_Mem_Write+0x180>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002618:	2b00      	cmp	r3, #0
 800261a:	d017      	beq.n	800264c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1aa      	bne.n	80025aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 fede 	bl	800341a <I2C_WaitOnBTFFlagUntilTimeout>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00d      	beq.n	8002680 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	2b04      	cmp	r3, #4
 800266a:	d107      	bne.n	800267c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800267a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e016      	b.n	80026ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800268e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e000      	b.n	80026ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80026ac:	2302      	movs	r3, #2
  }
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	00100002 	.word	0x00100002
 80026bc:	ffff0000 	.word	0xffff0000

080026c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08c      	sub	sp, #48	; 0x30
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	4608      	mov	r0, r1
 80026ca:	4611      	mov	r1, r2
 80026cc:	461a      	mov	r2, r3
 80026ce:	4603      	mov	r3, r0
 80026d0:	817b      	strh	r3, [r7, #10]
 80026d2:	460b      	mov	r3, r1
 80026d4:	813b      	strh	r3, [r7, #8]
 80026d6:	4613      	mov	r3, r2
 80026d8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80026da:	2300      	movs	r3, #0
 80026dc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026de:	f7ff fa05 	bl	8001aec <HAL_GetTick>
 80026e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b20      	cmp	r3, #32
 80026ee:	f040 8244 	bne.w	8002b7a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	2319      	movs	r3, #25
 80026f8:	2201      	movs	r2, #1
 80026fa:	4982      	ldr	r1, [pc, #520]	; (8002904 <HAL_I2C_Mem_Read+0x244>)
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 fd75 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002708:	2302      	movs	r3, #2
 800270a:	e237      	b.n	8002b7c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_I2C_Mem_Read+0x5a>
 8002716:	2302      	movs	r3, #2
 8002718:	e230      	b.n	8002b7c <HAL_I2C_Mem_Read+0x4bc>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b01      	cmp	r3, #1
 800272e:	d007      	beq.n	8002740 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800274e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2222      	movs	r2, #34	; 0x22
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2240      	movs	r2, #64	; 0x40
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800276a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002770:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4a62      	ldr	r2, [pc, #392]	; (8002908 <HAL_I2C_Mem_Read+0x248>)
 8002780:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002782:	88f8      	ldrh	r0, [r7, #6]
 8002784:	893a      	ldrh	r2, [r7, #8]
 8002786:	8979      	ldrh	r1, [r7, #10]
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	9301      	str	r3, [sp, #4]
 800278c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	4603      	mov	r3, r0
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 fc42 	bl	800301c <I2C_RequestMemoryRead>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e1ec      	b.n	8002b7c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d113      	bne.n	80027d2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	61fb      	str	r3, [r7, #28]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	e1c0      	b.n	8002b54 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d11e      	bne.n	8002818 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027ea:	b672      	cpsid	i
}
 80027ec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ee:	2300      	movs	r3, #0
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002812:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002814:	b662      	cpsie	i
}
 8002816:	e035      	b.n	8002884 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281c:	2b02      	cmp	r3, #2
 800281e:	d11e      	bne.n	800285e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800282e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002830:	b672      	cpsid	i
}
 8002832:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002858:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800285a:	b662      	cpsie	i
}
 800285c:	e012      	b.n	8002884 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800286c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002884:	e166      	b.n	8002b54 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	2b03      	cmp	r3, #3
 800288c:	f200 811f 	bhi.w	8002ace <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002894:	2b01      	cmp	r3, #1
 8002896:	d123      	bne.n	80028e0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 fdfd 	bl	800349c <I2C_WaitOnRXNEFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e167      	b.n	8002b7c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028de:	e139      	b.n	8002b54 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d152      	bne.n	800298e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ee:	2200      	movs	r2, #0
 80028f0:	4906      	ldr	r1, [pc, #24]	; (800290c <HAL_I2C_Mem_Read+0x24c>)
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fc7a 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e13c      	b.n	8002b7c <HAL_I2C_Mem_Read+0x4bc>
 8002902:	bf00      	nop
 8002904:	00100002 	.word	0x00100002
 8002908:	ffff0000 	.word	0xffff0000
 800290c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002910:	b672      	cpsid	i
}
 8002912:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002922:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691a      	ldr	r2, [r3, #16]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002956:	b662      	cpsie	i
}
 8002958:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800298c:	e0e2      	b.n	8002b54 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002994:	2200      	movs	r2, #0
 8002996:	497b      	ldr	r1, [pc, #492]	; (8002b84 <HAL_I2C_Mem_Read+0x4c4>)
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 fc27 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0e9      	b.n	8002b7c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80029b8:	b672      	cpsid	i
}
 80029ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80029ee:	4b66      	ldr	r3, [pc, #408]	; (8002b88 <HAL_I2C_Mem_Read+0x4c8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	08db      	lsrs	r3, r3, #3
 80029f4:	4a65      	ldr	r2, [pc, #404]	; (8002b8c <HAL_I2C_Mem_Read+0x4cc>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	0a1a      	lsrs	r2, r3, #8
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	00da      	lsls	r2, r3, #3
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d118      	bne.n	8002a46 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f043 0220 	orr.w	r2, r3, #32
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002a36:	b662      	cpsie	i
}
 8002a38:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e09a      	b.n	8002b7c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d1d9      	bne.n	8002a08 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691a      	ldr	r2, [r3, #16]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a96:	b662      	cpsie	i
}
 8002a98:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002acc:	e042      	b.n	8002b54 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 fce2 	bl	800349c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e04c      	b.n	8002b7c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d118      	bne.n	8002b54 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f47f ae94 	bne.w	8002886 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	e000      	b.n	8002b7c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002b7a:	2302      	movs	r3, #2
  }
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3728      	adds	r7, #40	; 0x28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	00010004 	.word	0x00010004
 8002b88:	20000038 	.word	0x20000038
 8002b8c:	14f8b589 	.word	0x14f8b589

08002b90 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	; 0x28
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ba0:	f7fe ffa4 	bl	8001aec <HAL_GetTick>
 8002ba4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	f040 8111 	bne.w	8002dda <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	2319      	movs	r3, #25
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	4988      	ldr	r1, [pc, #544]	; (8002de4 <HAL_I2C_IsDeviceReady+0x254>)
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 fb12 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e104      	b.n	8002ddc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_I2C_IsDeviceReady+0x50>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e0fd      	b.n	8002ddc <HAL_I2C_IsDeviceReady+0x24c>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d007      	beq.n	8002c06 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2224      	movs	r2, #36	; 0x24
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4a70      	ldr	r2, [pc, #448]	; (8002de8 <HAL_I2C_IsDeviceReady+0x258>)
 8002c28:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c38:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fad0 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00d      	beq.n	8002c6e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c60:	d103      	bne.n	8002c6a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e0b6      	b.n	8002ddc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c6e:	897b      	ldrh	r3, [r7, #10]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c7c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002c7e:	f7fe ff35 	bl	8001aec <HAL_GetTick>
 8002c82:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	bf0c      	ite	eq
 8002c92:	2301      	moveq	r3, #1
 8002c94:	2300      	movne	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca8:	bf0c      	ite	eq
 8002caa:	2301      	moveq	r3, #1
 8002cac:	2300      	movne	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002cb2:	e025      	b.n	8002d00 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cb4:	f7fe ff1a 	bl	8001aec <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d302      	bcc.n	8002cca <HAL_I2C_IsDeviceReady+0x13a>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d103      	bne.n	8002cd2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	22a0      	movs	r2, #160	; 0xa0
 8002cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	bf0c      	ite	eq
 8002ce0:	2301      	moveq	r3, #1
 8002ce2:	2300      	movne	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2ba0      	cmp	r3, #160	; 0xa0
 8002d0a:	d005      	beq.n	8002d18 <HAL_I2C_IsDeviceReady+0x188>
 8002d0c:	7dfb      	ldrb	r3, [r7, #23]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d102      	bne.n	8002d18 <HAL_I2C_IsDeviceReady+0x188>
 8002d12:	7dbb      	ldrb	r3, [r7, #22]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0cd      	beq.n	8002cb4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d129      	bne.n	8002d82 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2319      	movs	r3, #25
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	4921      	ldr	r1, [pc, #132]	; (8002de4 <HAL_I2C_IsDeviceReady+0x254>)
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 fa44 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e036      	b.n	8002ddc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	e02c      	b.n	8002ddc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d90:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d9a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	2319      	movs	r3, #25
 8002da2:	2201      	movs	r2, #1
 8002da4:	490f      	ldr	r1, [pc, #60]	; (8002de4 <HAL_I2C_IsDeviceReady+0x254>)
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 fa20 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e012      	b.n	8002ddc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	3301      	adds	r3, #1
 8002dba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	f4ff af32 	bcc.w	8002c2a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002dda:	2302      	movs	r3, #2
  }
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3720      	adds	r7, #32
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	00100002 	.word	0x00100002
 8002de8:	ffff0000 	.word	0xffff0000

08002dec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d006      	beq.n	8002e16 <I2C_MasterRequestWrite+0x2a>
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d003      	beq.n	8002e16 <I2C_MasterRequestWrite+0x2a>
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e14:	d108      	bne.n	8002e28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	e00b      	b.n	8002e40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	2b12      	cmp	r3, #18
 8002e2e:	d107      	bne.n	8002e40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 f9cd 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00d      	beq.n	8002e74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e66:	d103      	bne.n	8002e70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e035      	b.n	8002ee0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e7c:	d108      	bne.n	8002e90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e7e:	897b      	ldrh	r3, [r7, #10]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e8c:	611a      	str	r2, [r3, #16]
 8002e8e:	e01b      	b.n	8002ec8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e90:	897b      	ldrh	r3, [r7, #10]
 8002e92:	11db      	asrs	r3, r3, #7
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f003 0306 	and.w	r3, r3, #6
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	f063 030f 	orn	r3, r3, #15
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	490e      	ldr	r1, [pc, #56]	; (8002ee8 <I2C_MasterRequestWrite+0xfc>)
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f9f3 	bl	800329a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e010      	b.n	8002ee0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ebe:	897b      	ldrh	r3, [r7, #10]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	4907      	ldr	r1, [pc, #28]	; (8002eec <I2C_MasterRequestWrite+0x100>)
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f9e3 	bl	800329a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	00010008 	.word	0x00010008
 8002eec:	00010002 	.word	0x00010002

08002ef0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	4608      	mov	r0, r1
 8002efa:	4611      	mov	r1, r2
 8002efc:	461a      	mov	r2, r3
 8002efe:	4603      	mov	r3, r0
 8002f00:	817b      	strh	r3, [r7, #10]
 8002f02:	460b      	mov	r3, r1
 8002f04:	813b      	strh	r3, [r7, #8]
 8002f06:	4613      	mov	r3, r2
 8002f08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f960 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00d      	beq.n	8002f4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f40:	d103      	bne.n	8002f4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e05f      	b.n	800300e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f4e:	897b      	ldrh	r3, [r7, #10]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	461a      	mov	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	6a3a      	ldr	r2, [r7, #32]
 8002f62:	492d      	ldr	r1, [pc, #180]	; (8003018 <I2C_RequestMemoryWrite+0x128>)
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 f998 	bl	800329a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e04c      	b.n	800300e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8c:	6a39      	ldr	r1, [r7, #32]
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 fa02 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00d      	beq.n	8002fb6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d107      	bne.n	8002fb2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e02b      	b.n	800300e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d105      	bne.n	8002fc8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fbc:	893b      	ldrh	r3, [r7, #8]
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	611a      	str	r2, [r3, #16]
 8002fc6:	e021      	b.n	800300c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fc8:	893b      	ldrh	r3, [r7, #8]
 8002fca:	0a1b      	lsrs	r3, r3, #8
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd8:	6a39      	ldr	r1, [r7, #32]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f9dc 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00d      	beq.n	8003002 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d107      	bne.n	8002ffe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ffc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e005      	b.n	800300e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003002:	893b      	ldrh	r3, [r7, #8]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	00010002 	.word	0x00010002

0800301c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	4608      	mov	r0, r1
 8003026:	4611      	mov	r1, r2
 8003028:	461a      	mov	r2, r3
 800302a:	4603      	mov	r3, r0
 800302c:	817b      	strh	r3, [r7, #10]
 800302e:	460b      	mov	r3, r1
 8003030:	813b      	strh	r3, [r7, #8]
 8003032:	4613      	mov	r3, r2
 8003034:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003044:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003054:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	2200      	movs	r2, #0
 800305e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f8c2 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00d      	beq.n	800308a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800307c:	d103      	bne.n	8003086 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e0aa      	b.n	80031e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800308a:	897b      	ldrh	r3, [r7, #10]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003098:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	6a3a      	ldr	r2, [r7, #32]
 800309e:	4952      	ldr	r1, [pc, #328]	; (80031e8 <I2C_RequestMemoryRead+0x1cc>)
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 f8fa 	bl	800329a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e097      	b.n	80031e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c8:	6a39      	ldr	r1, [r7, #32]
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f964 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d107      	bne.n	80030ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e076      	b.n	80031e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030f2:	88fb      	ldrh	r3, [r7, #6]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d105      	bne.n	8003104 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030f8:	893b      	ldrh	r3, [r7, #8]
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	611a      	str	r2, [r3, #16]
 8003102:	e021      	b.n	8003148 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003104:	893b      	ldrh	r3, [r7, #8]
 8003106:	0a1b      	lsrs	r3, r3, #8
 8003108:	b29b      	uxth	r3, r3
 800310a:	b2da      	uxtb	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003114:	6a39      	ldr	r1, [r7, #32]
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f93e 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00d      	beq.n	800313e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	2b04      	cmp	r3, #4
 8003128:	d107      	bne.n	800313a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003138:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e050      	b.n	80031e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800313e:	893b      	ldrh	r3, [r7, #8]
 8003140:	b2da      	uxtb	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800314a:	6a39      	ldr	r1, [r7, #32]
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 f923 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00d      	beq.n	8003174 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	2b04      	cmp	r3, #4
 800315e:	d107      	bne.n	8003170 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e035      	b.n	80031e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003182:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	2200      	movs	r2, #0
 800318c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f82b 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00d      	beq.n	80031b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031aa:	d103      	bne.n	80031b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e013      	b.n	80031e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031b8:	897b      	ldrh	r3, [r7, #10]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	6a3a      	ldr	r2, [r7, #32]
 80031cc:	4906      	ldr	r1, [pc, #24]	; (80031e8 <I2C_RequestMemoryRead+0x1cc>)
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 f863 	bl	800329a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	00010002 	.word	0x00010002

080031ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	4613      	mov	r3, r2
 80031fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031fc:	e025      	b.n	800324a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003204:	d021      	beq.n	800324a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003206:	f7fe fc71 	bl	8001aec <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d302      	bcc.n	800321c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d116      	bne.n	800324a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f043 0220 	orr.w	r2, r3, #32
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e023      	b.n	8003292 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	0c1b      	lsrs	r3, r3, #16
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b01      	cmp	r3, #1
 8003252:	d10d      	bne.n	8003270 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	43da      	mvns	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4013      	ands	r3, r2
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	bf0c      	ite	eq
 8003266:	2301      	moveq	r3, #1
 8003268:	2300      	movne	r3, #0
 800326a:	b2db      	uxtb	r3, r3
 800326c:	461a      	mov	r2, r3
 800326e:	e00c      	b.n	800328a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	43da      	mvns	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	4013      	ands	r3, r2
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	bf0c      	ite	eq
 8003282:	2301      	moveq	r3, #1
 8003284:	2300      	movne	r3, #0
 8003286:	b2db      	uxtb	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	429a      	cmp	r2, r3
 800328e:	d0b6      	beq.n	80031fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032a8:	e051      	b.n	800334e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b8:	d123      	bne.n	8003302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f043 0204 	orr.w	r2, r3, #4
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e046      	b.n	8003390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003308:	d021      	beq.n	800334e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800330a:	f7fe fbef 	bl	8001aec <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	429a      	cmp	r2, r3
 8003318:	d302      	bcc.n	8003320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d116      	bne.n	800334e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f043 0220 	orr.w	r2, r3, #32
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e020      	b.n	8003390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	0c1b      	lsrs	r3, r3, #16
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b01      	cmp	r3, #1
 8003356:	d10c      	bne.n	8003372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	43da      	mvns	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4013      	ands	r3, r2
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	bf14      	ite	ne
 800336a:	2301      	movne	r3, #1
 800336c:	2300      	moveq	r3, #0
 800336e:	b2db      	uxtb	r3, r3
 8003370:	e00b      	b.n	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	43da      	mvns	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4013      	ands	r3, r2
 800337e:	b29b      	uxth	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf14      	ite	ne
 8003384:	2301      	movne	r3, #1
 8003386:	2300      	moveq	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d18d      	bne.n	80032aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033a4:	e02d      	b.n	8003402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f8ce 	bl	8003548 <I2C_IsAcknowledgeFailed>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e02d      	b.n	8003412 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d021      	beq.n	8003402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033be:	f7fe fb95 	bl	8001aec <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d302      	bcc.n	80033d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d116      	bne.n	8003402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f043 0220 	orr.w	r2, r3, #32
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e007      	b.n	8003412 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340c:	2b80      	cmp	r3, #128	; 0x80
 800340e:	d1ca      	bne.n	80033a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b084      	sub	sp, #16
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003426:	e02d      	b.n	8003484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f88d 	bl	8003548 <I2C_IsAcknowledgeFailed>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e02d      	b.n	8003494 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d021      	beq.n	8003484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003440:	f7fe fb54 	bl	8001aec <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	429a      	cmp	r2, r3
 800344e:	d302      	bcc.n	8003456 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d116      	bne.n	8003484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	f043 0220 	orr.w	r2, r3, #32
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e007      	b.n	8003494 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b04      	cmp	r3, #4
 8003490:	d1ca      	bne.n	8003428 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034a8:	e042      	b.n	8003530 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b10      	cmp	r3, #16
 80034b6:	d119      	bne.n	80034ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0210 	mvn.w	r2, #16
 80034c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e029      	b.n	8003540 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ec:	f7fe fafe 	bl	8001aec <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d302      	bcc.n	8003502 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d116      	bne.n	8003530 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	f043 0220 	orr.w	r2, r3, #32
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e007      	b.n	8003540 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353a:	2b40      	cmp	r3, #64	; 0x40
 800353c:	d1b5      	bne.n	80034aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355e:	d11b      	bne.n	8003598 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003568:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	f043 0204 	orr.w	r2, r3, #4
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr

080035a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e272      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 8087 	beq.w	80036d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035c4:	4b92      	ldr	r3, [pc, #584]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 030c 	and.w	r3, r3, #12
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d00c      	beq.n	80035ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035d0:	4b8f      	ldr	r3, [pc, #572]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 030c 	and.w	r3, r3, #12
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d112      	bne.n	8003602 <HAL_RCC_OscConfig+0x5e>
 80035dc:	4b8c      	ldr	r3, [pc, #560]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e8:	d10b      	bne.n	8003602 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ea:	4b89      	ldr	r3, [pc, #548]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d06c      	beq.n	80036d0 <HAL_RCC_OscConfig+0x12c>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d168      	bne.n	80036d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e24c      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360a:	d106      	bne.n	800361a <HAL_RCC_OscConfig+0x76>
 800360c:	4b80      	ldr	r3, [pc, #512]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a7f      	ldr	r2, [pc, #508]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	e02e      	b.n	8003678 <HAL_RCC_OscConfig+0xd4>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10c      	bne.n	800363c <HAL_RCC_OscConfig+0x98>
 8003622:	4b7b      	ldr	r3, [pc, #492]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a7a      	ldr	r2, [pc, #488]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	4b78      	ldr	r3, [pc, #480]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a77      	ldr	r2, [pc, #476]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003634:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	e01d      	b.n	8003678 <HAL_RCC_OscConfig+0xd4>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003644:	d10c      	bne.n	8003660 <HAL_RCC_OscConfig+0xbc>
 8003646:	4b72      	ldr	r3, [pc, #456]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a71      	ldr	r2, [pc, #452]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 800364c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	4b6f      	ldr	r3, [pc, #444]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a6e      	ldr	r2, [pc, #440]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	e00b      	b.n	8003678 <HAL_RCC_OscConfig+0xd4>
 8003660:	4b6b      	ldr	r3, [pc, #428]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a6a      	ldr	r2, [pc, #424]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	4b68      	ldr	r3, [pc, #416]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a67      	ldr	r2, [pc, #412]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003676:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d013      	beq.n	80036a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003680:	f7fe fa34 	bl	8001aec <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003688:	f7fe fa30 	bl	8001aec <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b64      	cmp	r3, #100	; 0x64
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e200      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369a:	4b5d      	ldr	r3, [pc, #372]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0xe4>
 80036a6:	e014      	b.n	80036d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a8:	f7fe fa20 	bl	8001aec <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b0:	f7fe fa1c 	bl	8001aec <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b64      	cmp	r3, #100	; 0x64
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e1ec      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c2:	4b53      	ldr	r3, [pc, #332]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x10c>
 80036ce:	e000      	b.n	80036d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d063      	beq.n	80037a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036de:	4b4c      	ldr	r3, [pc, #304]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f003 030c 	and.w	r3, r3, #12
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00b      	beq.n	8003702 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036ea:	4b49      	ldr	r3, [pc, #292]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d11c      	bne.n	8003730 <HAL_RCC_OscConfig+0x18c>
 80036f6:	4b46      	ldr	r3, [pc, #280]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d116      	bne.n	8003730 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003702:	4b43      	ldr	r3, [pc, #268]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_RCC_OscConfig+0x176>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d001      	beq.n	800371a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e1c0      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371a:	4b3d      	ldr	r3, [pc, #244]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4939      	ldr	r1, [pc, #228]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 800372a:	4313      	orrs	r3, r2
 800372c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800372e:	e03a      	b.n	80037a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d020      	beq.n	800377a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003738:	4b36      	ldr	r3, [pc, #216]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 800373a:	2201      	movs	r2, #1
 800373c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373e:	f7fe f9d5 	bl	8001aec <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003746:	f7fe f9d1 	bl	8001aec <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e1a1      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003758:	4b2d      	ldr	r3, [pc, #180]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0f0      	beq.n	8003746 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003764:	4b2a      	ldr	r3, [pc, #168]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	4927      	ldr	r1, [pc, #156]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003774:	4313      	orrs	r3, r2
 8003776:	600b      	str	r3, [r1, #0]
 8003778:	e015      	b.n	80037a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800377a:	4b26      	ldr	r3, [pc, #152]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003780:	f7fe f9b4 	bl	8001aec <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003788:	f7fe f9b0 	bl	8001aec <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e180      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800379a:	4b1d      	ldr	r3, [pc, #116]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d03a      	beq.n	8003828 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d019      	beq.n	80037ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ba:	4b17      	ldr	r3, [pc, #92]	; (8003818 <HAL_RCC_OscConfig+0x274>)
 80037bc:	2201      	movs	r2, #1
 80037be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c0:	f7fe f994 	bl	8001aec <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c8:	f7fe f990 	bl	8001aec <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e160      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037da:	4b0d      	ldr	r3, [pc, #52]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0f0      	beq.n	80037c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037e6:	2001      	movs	r0, #1
 80037e8:	f000 fa96 	bl	8003d18 <RCC_Delay>
 80037ec:	e01c      	b.n	8003828 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ee:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <HAL_RCC_OscConfig+0x274>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f4:	f7fe f97a 	bl	8001aec <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037fa:	e00f      	b.n	800381c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fc:	f7fe f976 	bl	8001aec <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d908      	bls.n	800381c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e146      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
 800380e:	bf00      	nop
 8003810:	40021000 	.word	0x40021000
 8003814:	42420000 	.word	0x42420000
 8003818:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800381c:	4b92      	ldr	r3, [pc, #584]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1e9      	bne.n	80037fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80a6 	beq.w	8003982 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003836:	2300      	movs	r3, #0
 8003838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383a:	4b8b      	ldr	r3, [pc, #556]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10d      	bne.n	8003862 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003846:	4b88      	ldr	r3, [pc, #544]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	4a87      	ldr	r2, [pc, #540]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 800384c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003850:	61d3      	str	r3, [r2, #28]
 8003852:	4b85      	ldr	r3, [pc, #532]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385a:	60bb      	str	r3, [r7, #8]
 800385c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800385e:	2301      	movs	r3, #1
 8003860:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003862:	4b82      	ldr	r3, [pc, #520]	; (8003a6c <HAL_RCC_OscConfig+0x4c8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d118      	bne.n	80038a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800386e:	4b7f      	ldr	r3, [pc, #508]	; (8003a6c <HAL_RCC_OscConfig+0x4c8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a7e      	ldr	r2, [pc, #504]	; (8003a6c <HAL_RCC_OscConfig+0x4c8>)
 8003874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387a:	f7fe f937 	bl	8001aec <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003882:	f7fe f933 	bl	8001aec <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b64      	cmp	r3, #100	; 0x64
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e103      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003894:	4b75      	ldr	r3, [pc, #468]	; (8003a6c <HAL_RCC_OscConfig+0x4c8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d106      	bne.n	80038b6 <HAL_RCC_OscConfig+0x312>
 80038a8:	4b6f      	ldr	r3, [pc, #444]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	4a6e      	ldr	r2, [pc, #440]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	6213      	str	r3, [r2, #32]
 80038b4:	e02d      	b.n	8003912 <HAL_RCC_OscConfig+0x36e>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x334>
 80038be:	4b6a      	ldr	r3, [pc, #424]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	4a69      	ldr	r2, [pc, #420]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80038c4:	f023 0301 	bic.w	r3, r3, #1
 80038c8:	6213      	str	r3, [r2, #32]
 80038ca:	4b67      	ldr	r3, [pc, #412]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	4a66      	ldr	r2, [pc, #408]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80038d0:	f023 0304 	bic.w	r3, r3, #4
 80038d4:	6213      	str	r3, [r2, #32]
 80038d6:	e01c      	b.n	8003912 <HAL_RCC_OscConfig+0x36e>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	2b05      	cmp	r3, #5
 80038de:	d10c      	bne.n	80038fa <HAL_RCC_OscConfig+0x356>
 80038e0:	4b61      	ldr	r3, [pc, #388]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	4a60      	ldr	r2, [pc, #384]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80038e6:	f043 0304 	orr.w	r3, r3, #4
 80038ea:	6213      	str	r3, [r2, #32]
 80038ec:	4b5e      	ldr	r3, [pc, #376]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	4a5d      	ldr	r2, [pc, #372]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	6213      	str	r3, [r2, #32]
 80038f8:	e00b      	b.n	8003912 <HAL_RCC_OscConfig+0x36e>
 80038fa:	4b5b      	ldr	r3, [pc, #364]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	4a5a      	ldr	r2, [pc, #360]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 8003900:	f023 0301 	bic.w	r3, r3, #1
 8003904:	6213      	str	r3, [r2, #32]
 8003906:	4b58      	ldr	r3, [pc, #352]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	4a57      	ldr	r2, [pc, #348]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 800390c:	f023 0304 	bic.w	r3, r3, #4
 8003910:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d015      	beq.n	8003946 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391a:	f7fe f8e7 	bl	8001aec <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003920:	e00a      	b.n	8003938 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003922:	f7fe f8e3 	bl	8001aec <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003930:	4293      	cmp	r3, r2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e0b1      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003938:	4b4b      	ldr	r3, [pc, #300]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0ee      	beq.n	8003922 <HAL_RCC_OscConfig+0x37e>
 8003944:	e014      	b.n	8003970 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003946:	f7fe f8d1 	bl	8001aec <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800394c:	e00a      	b.n	8003964 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394e:	f7fe f8cd 	bl	8001aec <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f241 3288 	movw	r2, #5000	; 0x1388
 800395c:	4293      	cmp	r3, r2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e09b      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003964:	4b40      	ldr	r3, [pc, #256]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1ee      	bne.n	800394e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003970:	7dfb      	ldrb	r3, [r7, #23]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d105      	bne.n	8003982 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003976:	4b3c      	ldr	r3, [pc, #240]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	4a3b      	ldr	r2, [pc, #236]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 800397c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003980:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 8087 	beq.w	8003a9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800398c:	4b36      	ldr	r3, [pc, #216]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 030c 	and.w	r3, r3, #12
 8003994:	2b08      	cmp	r3, #8
 8003996:	d061      	beq.n	8003a5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	2b02      	cmp	r3, #2
 800399e:	d146      	bne.n	8003a2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a0:	4b33      	ldr	r3, [pc, #204]	; (8003a70 <HAL_RCC_OscConfig+0x4cc>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a6:	f7fe f8a1 	bl	8001aec <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ae:	f7fe f89d 	bl	8001aec <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e06d      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039c0:	4b29      	ldr	r3, [pc, #164]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1f0      	bne.n	80039ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d4:	d108      	bne.n	80039e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039d6:	4b24      	ldr	r3, [pc, #144]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	f023 020f 	bic.w	r2, r3, #15
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	4921      	ldr	r1, [pc, #132]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039e8:	4b1f      	ldr	r3, [pc, #124]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a19      	ldr	r1, [r3, #32]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	430b      	orrs	r3, r1
 80039fa:	491b      	ldr	r1, [pc, #108]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a00:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <HAL_RCC_OscConfig+0x4cc>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a06:	f7fe f871 	bl	8001aec <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a0e:	f7fe f86d 	bl	8001aec <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e03d      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a20:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCC_OscConfig+0x46a>
 8003a2c:	e035      	b.n	8003a9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2e:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <HAL_RCC_OscConfig+0x4cc>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fe f85a 	bl	8001aec <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fe f856 	bl	8001aec <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e026      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCC_OscConfig+0x4c4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x498>
 8003a5a:	e01e      	b.n	8003a9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d107      	bne.n	8003a74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e019      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	40007000 	.word	0x40007000
 8003a70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a74:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <HAL_RCC_OscConfig+0x500>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d106      	bne.n	8003a96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d001      	beq.n	8003a9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40021000 	.word	0x40021000

08003aa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0a0      	b.n	8003bfe <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d020      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ad4:	4b4c      	ldr	r3, [pc, #304]	; (8003c08 <HAL_RCC_ClockConfig+0x160>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	4a4b      	ldr	r2, [pc, #300]	; (8003c08 <HAL_RCC_ClockConfig+0x160>)
 8003ada:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ade:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aec:	4b46      	ldr	r3, [pc, #280]	; (8003c08 <HAL_RCC_ClockConfig+0x160>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	4a45      	ldr	r2, [pc, #276]	; (8003c08 <HAL_RCC_ClockConfig+0x160>)
 8003af2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003af6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af8:	4b43      	ldr	r3, [pc, #268]	; (8003c08 <HAL_RCC_ClockConfig+0x160>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	4940      	ldr	r1, [pc, #256]	; (8003c08 <HAL_RCC_ClockConfig+0x160>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d040      	beq.n	8003b98 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d107      	bne.n	8003b2e <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1e:	4b3a      	ldr	r3, [pc, #232]	; (8003c08 <HAL_RCC_ClockConfig+0x160>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d115      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e067      	b.n	8003bfe <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d107      	bne.n	8003b46 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b36:	4b34      	ldr	r3, [pc, #208]	; (8003c08 <HAL_RCC_ClockConfig+0x160>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d109      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e05b      	b.n	8003bfe <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b46:	4b30      	ldr	r3, [pc, #192]	; (8003c08 <HAL_RCC_ClockConfig+0x160>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e053      	b.n	8003bfe <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b56:	4b2c      	ldr	r3, [pc, #176]	; (8003c08 <HAL_RCC_ClockConfig+0x160>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f023 0203 	bic.w	r2, r3, #3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4929      	ldr	r1, [pc, #164]	; (8003c08 <HAL_RCC_ClockConfig+0x160>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b68:	f7fd ffc0 	bl	8001aec <HAL_GetTick>
 8003b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6e:	e00a      	b.n	8003b86 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b70:	f7fd ffbc 	bl	8001aec <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e03b      	b.n	8003bfe <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b86:	4b20      	ldr	r3, [pc, #128]	; (8003c08 <HAL_RCC_ClockConfig+0x160>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 020c 	and.w	r2, r3, #12
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d1eb      	bne.n	8003b70 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba4:	4b18      	ldr	r3, [pc, #96]	; (8003c08 <HAL_RCC_ClockConfig+0x160>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	4915      	ldr	r1, [pc, #84]	; (8003c08 <HAL_RCC_ClockConfig+0x160>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d009      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bc2:	4b11      	ldr	r3, [pc, #68]	; (8003c08 <HAL_RCC_ClockConfig+0x160>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	490d      	ldr	r1, [pc, #52]	; (8003c08 <HAL_RCC_ClockConfig+0x160>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bd6:	f000 f81f 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <HAL_RCC_ClockConfig+0x160>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	091b      	lsrs	r3, r3, #4
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	4909      	ldr	r1, [pc, #36]	; (8003c0c <HAL_RCC_ClockConfig+0x164>)
 8003be8:	5ccb      	ldrb	r3, [r1, r3]
 8003bea:	fa22 f303 	lsr.w	r3, r2, r3
 8003bee:	4a08      	ldr	r2, [pc, #32]	; (8003c10 <HAL_RCC_ClockConfig+0x168>)
 8003bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bf2:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <HAL_RCC_ClockConfig+0x16c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fd ff36 	bl	8001a68 <HAL_InitTick>

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	0800732c 	.word	0x0800732c
 8003c10:	20000038 	.word	0x20000038
 8003c14:	2000003c 	.word	0x2000003c

08003c18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c18:	b490      	push	{r4, r7}
 8003c1a:	b08e      	sub	sp, #56	; 0x38
 8003c1c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c1e:	4b2a      	ldr	r3, [pc, #168]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c20:	f107 0414 	add.w	r4, r7, #20
 8003c24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8003c2a:	4b28      	ldr	r3, [pc, #160]	; (8003ccc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c2c:	1d3c      	adds	r4, r7, #4
 8003c2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c38:	2300      	movs	r3, #0
 8003c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c40:	2300      	movs	r3, #0
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c48:	4b21      	ldr	r3, [pc, #132]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c50:	f003 030c 	and.w	r3, r3, #12
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d002      	beq.n	8003c5e <HAL_RCC_GetSysClockFreq+0x46>
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d003      	beq.n	8003c64 <HAL_RCC_GetSysClockFreq+0x4c>
 8003c5c:	e02a      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c5e:	4b1d      	ldr	r3, [pc, #116]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c60:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003c62:	e02a      	b.n	8003cba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c66:	0c9b      	lsrs	r3, r3, #18
 8003c68:	f003 030f 	and.w	r3, r3, #15
 8003c6c:	3338      	adds	r3, #56	; 0x38
 8003c6e:	443b      	add	r3, r7
 8003c70:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d011      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003c80:	4b13      	ldr	r3, [pc, #76]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	3338      	adds	r3, #56	; 0x38
 8003c8a:	443b      	add	r3, r7
 8003c8c:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8003c90:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	4a0f      	ldr	r2, [pc, #60]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c96:	fb03 f202 	mul.w	r2, r3, r2
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca2:	e004      	b.n	8003cae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	4a0c      	ldr	r2, [pc, #48]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ca8:	fb02 f303 	mul.w	r3, r2, r3
 8003cac:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8003cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003cb2:	e002      	b.n	8003cba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cb4:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cb6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3738      	adds	r7, #56	; 0x38
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc90      	pop	{r4, r7}
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	08006ba0 	.word	0x08006ba0
 8003ccc:	08006bb0 	.word	0x08006bb0
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	007a1200 	.word	0x007a1200
 8003cd8:	003d0900 	.word	0x003d0900

08003cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ce0:	4b02      	ldr	r3, [pc, #8]	; (8003cec <HAL_RCC_GetHCLKFreq+0x10>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr
 8003cec:	20000038 	.word	0x20000038

08003cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cf4:	f7ff fff2 	bl	8003cdc <HAL_RCC_GetHCLKFreq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4903      	ldr	r1, [pc, #12]	; (8003d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d06:	5ccb      	ldrb	r3, [r1, r3]
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000
 8003d14:	0800733c 	.word	0x0800733c

08003d18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d20:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <RCC_Delay+0x34>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a0a      	ldr	r2, [pc, #40]	; (8003d50 <RCC_Delay+0x38>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	0a5b      	lsrs	r3, r3, #9
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	fb02 f303 	mul.w	r3, r2, r3
 8003d32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d34:	bf00      	nop
  }
  while (Delay --);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1e5a      	subs	r2, r3, #1
 8003d3a:	60fa      	str	r2, [r7, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f9      	bne.n	8003d34 <RCC_Delay+0x1c>
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr
 8003d4c:	20000038 	.word	0x20000038
 8003d50:	10624dd3 	.word	0x10624dd3

08003d54 <__errno>:
 8003d54:	4b01      	ldr	r3, [pc, #4]	; (8003d5c <__errno+0x8>)
 8003d56:	6818      	ldr	r0, [r3, #0]
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	20000044 	.word	0x20000044

08003d60 <__libc_init_array>:
 8003d60:	b570      	push	{r4, r5, r6, lr}
 8003d62:	2600      	movs	r6, #0
 8003d64:	4d0c      	ldr	r5, [pc, #48]	; (8003d98 <__libc_init_array+0x38>)
 8003d66:	4c0d      	ldr	r4, [pc, #52]	; (8003d9c <__libc_init_array+0x3c>)
 8003d68:	1b64      	subs	r4, r4, r5
 8003d6a:	10a4      	asrs	r4, r4, #2
 8003d6c:	42a6      	cmp	r6, r4
 8003d6e:	d109      	bne.n	8003d84 <__libc_init_array+0x24>
 8003d70:	f002 fefa 	bl	8006b68 <_init>
 8003d74:	2600      	movs	r6, #0
 8003d76:	4d0a      	ldr	r5, [pc, #40]	; (8003da0 <__libc_init_array+0x40>)
 8003d78:	4c0a      	ldr	r4, [pc, #40]	; (8003da4 <__libc_init_array+0x44>)
 8003d7a:	1b64      	subs	r4, r4, r5
 8003d7c:	10a4      	asrs	r4, r4, #2
 8003d7e:	42a6      	cmp	r6, r4
 8003d80:	d105      	bne.n	8003d8e <__libc_init_array+0x2e>
 8003d82:	bd70      	pop	{r4, r5, r6, pc}
 8003d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d88:	4798      	blx	r3
 8003d8a:	3601      	adds	r6, #1
 8003d8c:	e7ee      	b.n	8003d6c <__libc_init_array+0xc>
 8003d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d92:	4798      	blx	r3
 8003d94:	3601      	adds	r6, #1
 8003d96:	e7f2      	b.n	8003d7e <__libc_init_array+0x1e>
 8003d98:	0800771c 	.word	0x0800771c
 8003d9c:	0800771c 	.word	0x0800771c
 8003da0:	0800771c 	.word	0x0800771c
 8003da4:	08007720 	.word	0x08007720

08003da8 <memset>:
 8003da8:	4603      	mov	r3, r0
 8003daa:	4402      	add	r2, r0
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d100      	bne.n	8003db2 <memset+0xa>
 8003db0:	4770      	bx	lr
 8003db2:	f803 1b01 	strb.w	r1, [r3], #1
 8003db6:	e7f9      	b.n	8003dac <memset+0x4>

08003db8 <__cvt>:
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dbe:	461f      	mov	r7, r3
 8003dc0:	bfbb      	ittet	lt
 8003dc2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003dc6:	461f      	movlt	r7, r3
 8003dc8:	2300      	movge	r3, #0
 8003dca:	232d      	movlt	r3, #45	; 0x2d
 8003dcc:	b088      	sub	sp, #32
 8003dce:	4614      	mov	r4, r2
 8003dd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003dd2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003dd4:	7013      	strb	r3, [r2, #0]
 8003dd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003dd8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003ddc:	f023 0820 	bic.w	r8, r3, #32
 8003de0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003de4:	d005      	beq.n	8003df2 <__cvt+0x3a>
 8003de6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003dea:	d100      	bne.n	8003dee <__cvt+0x36>
 8003dec:	3501      	adds	r5, #1
 8003dee:	2302      	movs	r3, #2
 8003df0:	e000      	b.n	8003df4 <__cvt+0x3c>
 8003df2:	2303      	movs	r3, #3
 8003df4:	aa07      	add	r2, sp, #28
 8003df6:	9204      	str	r2, [sp, #16]
 8003df8:	aa06      	add	r2, sp, #24
 8003dfa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003dfe:	e9cd 3500 	strd	r3, r5, [sp]
 8003e02:	4622      	mov	r2, r4
 8003e04:	463b      	mov	r3, r7
 8003e06:	f000 fce3 	bl	80047d0 <_dtoa_r>
 8003e0a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003e0e:	4606      	mov	r6, r0
 8003e10:	d102      	bne.n	8003e18 <__cvt+0x60>
 8003e12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e14:	07db      	lsls	r3, r3, #31
 8003e16:	d522      	bpl.n	8003e5e <__cvt+0xa6>
 8003e18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e1c:	eb06 0905 	add.w	r9, r6, r5
 8003e20:	d110      	bne.n	8003e44 <__cvt+0x8c>
 8003e22:	7833      	ldrb	r3, [r6, #0]
 8003e24:	2b30      	cmp	r3, #48	; 0x30
 8003e26:	d10a      	bne.n	8003e3e <__cvt+0x86>
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	4639      	mov	r1, r7
 8003e30:	f7fc fe1a 	bl	8000a68 <__aeabi_dcmpeq>
 8003e34:	b918      	cbnz	r0, 8003e3e <__cvt+0x86>
 8003e36:	f1c5 0501 	rsb	r5, r5, #1
 8003e3a:	f8ca 5000 	str.w	r5, [sl]
 8003e3e:	f8da 3000 	ldr.w	r3, [sl]
 8003e42:	4499      	add	r9, r3
 8003e44:	2200      	movs	r2, #0
 8003e46:	2300      	movs	r3, #0
 8003e48:	4620      	mov	r0, r4
 8003e4a:	4639      	mov	r1, r7
 8003e4c:	f7fc fe0c 	bl	8000a68 <__aeabi_dcmpeq>
 8003e50:	b108      	cbz	r0, 8003e56 <__cvt+0x9e>
 8003e52:	f8cd 901c 	str.w	r9, [sp, #28]
 8003e56:	2230      	movs	r2, #48	; 0x30
 8003e58:	9b07      	ldr	r3, [sp, #28]
 8003e5a:	454b      	cmp	r3, r9
 8003e5c:	d307      	bcc.n	8003e6e <__cvt+0xb6>
 8003e5e:	4630      	mov	r0, r6
 8003e60:	9b07      	ldr	r3, [sp, #28]
 8003e62:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003e64:	1b9b      	subs	r3, r3, r6
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	b008      	add	sp, #32
 8003e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e6e:	1c59      	adds	r1, r3, #1
 8003e70:	9107      	str	r1, [sp, #28]
 8003e72:	701a      	strb	r2, [r3, #0]
 8003e74:	e7f0      	b.n	8003e58 <__cvt+0xa0>

08003e76 <__exponent>:
 8003e76:	4603      	mov	r3, r0
 8003e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e7a:	2900      	cmp	r1, #0
 8003e7c:	f803 2b02 	strb.w	r2, [r3], #2
 8003e80:	bfb6      	itet	lt
 8003e82:	222d      	movlt	r2, #45	; 0x2d
 8003e84:	222b      	movge	r2, #43	; 0x2b
 8003e86:	4249      	neglt	r1, r1
 8003e88:	2909      	cmp	r1, #9
 8003e8a:	7042      	strb	r2, [r0, #1]
 8003e8c:	dd2b      	ble.n	8003ee6 <__exponent+0x70>
 8003e8e:	f10d 0407 	add.w	r4, sp, #7
 8003e92:	46a4      	mov	ip, r4
 8003e94:	270a      	movs	r7, #10
 8003e96:	fb91 f6f7 	sdiv	r6, r1, r7
 8003e9a:	460a      	mov	r2, r1
 8003e9c:	46a6      	mov	lr, r4
 8003e9e:	fb07 1516 	mls	r5, r7, r6, r1
 8003ea2:	2a63      	cmp	r2, #99	; 0x63
 8003ea4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003ea8:	4631      	mov	r1, r6
 8003eaa:	f104 34ff 	add.w	r4, r4, #4294967295
 8003eae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003eb2:	dcf0      	bgt.n	8003e96 <__exponent+0x20>
 8003eb4:	3130      	adds	r1, #48	; 0x30
 8003eb6:	f1ae 0502 	sub.w	r5, lr, #2
 8003eba:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	1c44      	adds	r4, r0, #1
 8003ec2:	4561      	cmp	r1, ip
 8003ec4:	d30a      	bcc.n	8003edc <__exponent+0x66>
 8003ec6:	f10d 0209 	add.w	r2, sp, #9
 8003eca:	eba2 020e 	sub.w	r2, r2, lr
 8003ece:	4565      	cmp	r5, ip
 8003ed0:	bf88      	it	hi
 8003ed2:	2200      	movhi	r2, #0
 8003ed4:	4413      	add	r3, r2
 8003ed6:	1a18      	subs	r0, r3, r0
 8003ed8:	b003      	add	sp, #12
 8003eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003edc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ee0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003ee4:	e7ed      	b.n	8003ec2 <__exponent+0x4c>
 8003ee6:	2330      	movs	r3, #48	; 0x30
 8003ee8:	3130      	adds	r1, #48	; 0x30
 8003eea:	7083      	strb	r3, [r0, #2]
 8003eec:	70c1      	strb	r1, [r0, #3]
 8003eee:	1d03      	adds	r3, r0, #4
 8003ef0:	e7f1      	b.n	8003ed6 <__exponent+0x60>
	...

08003ef4 <_printf_float>:
 8003ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef8:	b091      	sub	sp, #68	; 0x44
 8003efa:	460c      	mov	r4, r1
 8003efc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003f00:	4616      	mov	r6, r2
 8003f02:	461f      	mov	r7, r3
 8003f04:	4605      	mov	r5, r0
 8003f06:	f001 fa51 	bl	80053ac <_localeconv_r>
 8003f0a:	6803      	ldr	r3, [r0, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f10:	f7fc f97e 	bl	8000210 <strlen>
 8003f14:	2300      	movs	r3, #0
 8003f16:	930e      	str	r3, [sp, #56]	; 0x38
 8003f18:	f8d8 3000 	ldr.w	r3, [r8]
 8003f1c:	900a      	str	r0, [sp, #40]	; 0x28
 8003f1e:	3307      	adds	r3, #7
 8003f20:	f023 0307 	bic.w	r3, r3, #7
 8003f24:	f103 0208 	add.w	r2, r3, #8
 8003f28:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003f2c:	f8d4 b000 	ldr.w	fp, [r4]
 8003f30:	f8c8 2000 	str.w	r2, [r8]
 8003f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f38:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003f3c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003f40:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003f44:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f46:	f04f 32ff 	mov.w	r2, #4294967295
 8003f4a:	4640      	mov	r0, r8
 8003f4c:	4b9c      	ldr	r3, [pc, #624]	; (80041c0 <_printf_float+0x2cc>)
 8003f4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f50:	f7fc fdbc 	bl	8000acc <__aeabi_dcmpun>
 8003f54:	bb70      	cbnz	r0, 8003fb4 <_printf_float+0xc0>
 8003f56:	f04f 32ff 	mov.w	r2, #4294967295
 8003f5a:	4640      	mov	r0, r8
 8003f5c:	4b98      	ldr	r3, [pc, #608]	; (80041c0 <_printf_float+0x2cc>)
 8003f5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f60:	f7fc fd96 	bl	8000a90 <__aeabi_dcmple>
 8003f64:	bb30      	cbnz	r0, 8003fb4 <_printf_float+0xc0>
 8003f66:	2200      	movs	r2, #0
 8003f68:	2300      	movs	r3, #0
 8003f6a:	4640      	mov	r0, r8
 8003f6c:	4651      	mov	r1, sl
 8003f6e:	f7fc fd85 	bl	8000a7c <__aeabi_dcmplt>
 8003f72:	b110      	cbz	r0, 8003f7a <_printf_float+0x86>
 8003f74:	232d      	movs	r3, #45	; 0x2d
 8003f76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f7a:	4b92      	ldr	r3, [pc, #584]	; (80041c4 <_printf_float+0x2d0>)
 8003f7c:	4892      	ldr	r0, [pc, #584]	; (80041c8 <_printf_float+0x2d4>)
 8003f7e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003f82:	bf94      	ite	ls
 8003f84:	4698      	movls	r8, r3
 8003f86:	4680      	movhi	r8, r0
 8003f88:	2303      	movs	r3, #3
 8003f8a:	f04f 0a00 	mov.w	sl, #0
 8003f8e:	6123      	str	r3, [r4, #16]
 8003f90:	f02b 0304 	bic.w	r3, fp, #4
 8003f94:	6023      	str	r3, [r4, #0]
 8003f96:	4633      	mov	r3, r6
 8003f98:	4621      	mov	r1, r4
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	9700      	str	r7, [sp, #0]
 8003f9e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003fa0:	f000 f9d4 	bl	800434c <_printf_common>
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	f040 8090 	bne.w	80040ca <_printf_float+0x1d6>
 8003faa:	f04f 30ff 	mov.w	r0, #4294967295
 8003fae:	b011      	add	sp, #68	; 0x44
 8003fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb4:	4642      	mov	r2, r8
 8003fb6:	4653      	mov	r3, sl
 8003fb8:	4640      	mov	r0, r8
 8003fba:	4651      	mov	r1, sl
 8003fbc:	f7fc fd86 	bl	8000acc <__aeabi_dcmpun>
 8003fc0:	b148      	cbz	r0, 8003fd6 <_printf_float+0xe2>
 8003fc2:	f1ba 0f00 	cmp.w	sl, #0
 8003fc6:	bfb8      	it	lt
 8003fc8:	232d      	movlt	r3, #45	; 0x2d
 8003fca:	4880      	ldr	r0, [pc, #512]	; (80041cc <_printf_float+0x2d8>)
 8003fcc:	bfb8      	it	lt
 8003fce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003fd2:	4b7f      	ldr	r3, [pc, #508]	; (80041d0 <_printf_float+0x2dc>)
 8003fd4:	e7d3      	b.n	8003f7e <_printf_float+0x8a>
 8003fd6:	6863      	ldr	r3, [r4, #4]
 8003fd8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	d142      	bne.n	8004066 <_printf_float+0x172>
 8003fe0:	2306      	movs	r3, #6
 8003fe2:	6063      	str	r3, [r4, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	9206      	str	r2, [sp, #24]
 8003fe8:	aa0e      	add	r2, sp, #56	; 0x38
 8003fea:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003fee:	aa0d      	add	r2, sp, #52	; 0x34
 8003ff0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003ff4:	9203      	str	r2, [sp, #12]
 8003ff6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003ffa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003ffe:	6023      	str	r3, [r4, #0]
 8004000:	6863      	ldr	r3, [r4, #4]
 8004002:	4642      	mov	r2, r8
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	4628      	mov	r0, r5
 8004008:	4653      	mov	r3, sl
 800400a:	910b      	str	r1, [sp, #44]	; 0x2c
 800400c:	f7ff fed4 	bl	8003db8 <__cvt>
 8004010:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004012:	4680      	mov	r8, r0
 8004014:	2947      	cmp	r1, #71	; 0x47
 8004016:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004018:	d108      	bne.n	800402c <_printf_float+0x138>
 800401a:	1cc8      	adds	r0, r1, #3
 800401c:	db02      	blt.n	8004024 <_printf_float+0x130>
 800401e:	6863      	ldr	r3, [r4, #4]
 8004020:	4299      	cmp	r1, r3
 8004022:	dd40      	ble.n	80040a6 <_printf_float+0x1b2>
 8004024:	f1a9 0902 	sub.w	r9, r9, #2
 8004028:	fa5f f989 	uxtb.w	r9, r9
 800402c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004030:	d81f      	bhi.n	8004072 <_printf_float+0x17e>
 8004032:	464a      	mov	r2, r9
 8004034:	3901      	subs	r1, #1
 8004036:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800403a:	910d      	str	r1, [sp, #52]	; 0x34
 800403c:	f7ff ff1b 	bl	8003e76 <__exponent>
 8004040:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004042:	4682      	mov	sl, r0
 8004044:	1813      	adds	r3, r2, r0
 8004046:	2a01      	cmp	r2, #1
 8004048:	6123      	str	r3, [r4, #16]
 800404a:	dc02      	bgt.n	8004052 <_printf_float+0x15e>
 800404c:	6822      	ldr	r2, [r4, #0]
 800404e:	07d2      	lsls	r2, r2, #31
 8004050:	d501      	bpl.n	8004056 <_printf_float+0x162>
 8004052:	3301      	adds	r3, #1
 8004054:	6123      	str	r3, [r4, #16]
 8004056:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800405a:	2b00      	cmp	r3, #0
 800405c:	d09b      	beq.n	8003f96 <_printf_float+0xa2>
 800405e:	232d      	movs	r3, #45	; 0x2d
 8004060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004064:	e797      	b.n	8003f96 <_printf_float+0xa2>
 8004066:	2947      	cmp	r1, #71	; 0x47
 8004068:	d1bc      	bne.n	8003fe4 <_printf_float+0xf0>
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1ba      	bne.n	8003fe4 <_printf_float+0xf0>
 800406e:	2301      	movs	r3, #1
 8004070:	e7b7      	b.n	8003fe2 <_printf_float+0xee>
 8004072:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004076:	d118      	bne.n	80040aa <_printf_float+0x1b6>
 8004078:	2900      	cmp	r1, #0
 800407a:	6863      	ldr	r3, [r4, #4]
 800407c:	dd0b      	ble.n	8004096 <_printf_float+0x1a2>
 800407e:	6121      	str	r1, [r4, #16]
 8004080:	b913      	cbnz	r3, 8004088 <_printf_float+0x194>
 8004082:	6822      	ldr	r2, [r4, #0]
 8004084:	07d0      	lsls	r0, r2, #31
 8004086:	d502      	bpl.n	800408e <_printf_float+0x19a>
 8004088:	3301      	adds	r3, #1
 800408a:	440b      	add	r3, r1
 800408c:	6123      	str	r3, [r4, #16]
 800408e:	f04f 0a00 	mov.w	sl, #0
 8004092:	65a1      	str	r1, [r4, #88]	; 0x58
 8004094:	e7df      	b.n	8004056 <_printf_float+0x162>
 8004096:	b913      	cbnz	r3, 800409e <_printf_float+0x1aa>
 8004098:	6822      	ldr	r2, [r4, #0]
 800409a:	07d2      	lsls	r2, r2, #31
 800409c:	d501      	bpl.n	80040a2 <_printf_float+0x1ae>
 800409e:	3302      	adds	r3, #2
 80040a0:	e7f4      	b.n	800408c <_printf_float+0x198>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e7f2      	b.n	800408c <_printf_float+0x198>
 80040a6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80040aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040ac:	4299      	cmp	r1, r3
 80040ae:	db05      	blt.n	80040bc <_printf_float+0x1c8>
 80040b0:	6823      	ldr	r3, [r4, #0]
 80040b2:	6121      	str	r1, [r4, #16]
 80040b4:	07d8      	lsls	r0, r3, #31
 80040b6:	d5ea      	bpl.n	800408e <_printf_float+0x19a>
 80040b8:	1c4b      	adds	r3, r1, #1
 80040ba:	e7e7      	b.n	800408c <_printf_float+0x198>
 80040bc:	2900      	cmp	r1, #0
 80040be:	bfcc      	ite	gt
 80040c0:	2201      	movgt	r2, #1
 80040c2:	f1c1 0202 	rsble	r2, r1, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	e7e0      	b.n	800408c <_printf_float+0x198>
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	055a      	lsls	r2, r3, #21
 80040ce:	d407      	bmi.n	80040e0 <_printf_float+0x1ec>
 80040d0:	6923      	ldr	r3, [r4, #16]
 80040d2:	4642      	mov	r2, r8
 80040d4:	4631      	mov	r1, r6
 80040d6:	4628      	mov	r0, r5
 80040d8:	47b8      	blx	r7
 80040da:	3001      	adds	r0, #1
 80040dc:	d12b      	bne.n	8004136 <_printf_float+0x242>
 80040de:	e764      	b.n	8003faa <_printf_float+0xb6>
 80040e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80040e4:	f240 80dd 	bls.w	80042a2 <_printf_float+0x3ae>
 80040e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040ec:	2200      	movs	r2, #0
 80040ee:	2300      	movs	r3, #0
 80040f0:	f7fc fcba 	bl	8000a68 <__aeabi_dcmpeq>
 80040f4:	2800      	cmp	r0, #0
 80040f6:	d033      	beq.n	8004160 <_printf_float+0x26c>
 80040f8:	2301      	movs	r3, #1
 80040fa:	4631      	mov	r1, r6
 80040fc:	4628      	mov	r0, r5
 80040fe:	4a35      	ldr	r2, [pc, #212]	; (80041d4 <_printf_float+0x2e0>)
 8004100:	47b8      	blx	r7
 8004102:	3001      	adds	r0, #1
 8004104:	f43f af51 	beq.w	8003faa <_printf_float+0xb6>
 8004108:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800410c:	429a      	cmp	r2, r3
 800410e:	db02      	blt.n	8004116 <_printf_float+0x222>
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	07d8      	lsls	r0, r3, #31
 8004114:	d50f      	bpl.n	8004136 <_printf_float+0x242>
 8004116:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800411a:	4631      	mov	r1, r6
 800411c:	4628      	mov	r0, r5
 800411e:	47b8      	blx	r7
 8004120:	3001      	adds	r0, #1
 8004122:	f43f af42 	beq.w	8003faa <_printf_float+0xb6>
 8004126:	f04f 0800 	mov.w	r8, #0
 800412a:	f104 091a 	add.w	r9, r4, #26
 800412e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004130:	3b01      	subs	r3, #1
 8004132:	4543      	cmp	r3, r8
 8004134:	dc09      	bgt.n	800414a <_printf_float+0x256>
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	079b      	lsls	r3, r3, #30
 800413a:	f100 8102 	bmi.w	8004342 <_printf_float+0x44e>
 800413e:	68e0      	ldr	r0, [r4, #12]
 8004140:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004142:	4298      	cmp	r0, r3
 8004144:	bfb8      	it	lt
 8004146:	4618      	movlt	r0, r3
 8004148:	e731      	b.n	8003fae <_printf_float+0xba>
 800414a:	2301      	movs	r3, #1
 800414c:	464a      	mov	r2, r9
 800414e:	4631      	mov	r1, r6
 8004150:	4628      	mov	r0, r5
 8004152:	47b8      	blx	r7
 8004154:	3001      	adds	r0, #1
 8004156:	f43f af28 	beq.w	8003faa <_printf_float+0xb6>
 800415a:	f108 0801 	add.w	r8, r8, #1
 800415e:	e7e6      	b.n	800412e <_printf_float+0x23a>
 8004160:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004162:	2b00      	cmp	r3, #0
 8004164:	dc38      	bgt.n	80041d8 <_printf_float+0x2e4>
 8004166:	2301      	movs	r3, #1
 8004168:	4631      	mov	r1, r6
 800416a:	4628      	mov	r0, r5
 800416c:	4a19      	ldr	r2, [pc, #100]	; (80041d4 <_printf_float+0x2e0>)
 800416e:	47b8      	blx	r7
 8004170:	3001      	adds	r0, #1
 8004172:	f43f af1a 	beq.w	8003faa <_printf_float+0xb6>
 8004176:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800417a:	4313      	orrs	r3, r2
 800417c:	d102      	bne.n	8004184 <_printf_float+0x290>
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	07d9      	lsls	r1, r3, #31
 8004182:	d5d8      	bpl.n	8004136 <_printf_float+0x242>
 8004184:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004188:	4631      	mov	r1, r6
 800418a:	4628      	mov	r0, r5
 800418c:	47b8      	blx	r7
 800418e:	3001      	adds	r0, #1
 8004190:	f43f af0b 	beq.w	8003faa <_printf_float+0xb6>
 8004194:	f04f 0900 	mov.w	r9, #0
 8004198:	f104 0a1a 	add.w	sl, r4, #26
 800419c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800419e:	425b      	negs	r3, r3
 80041a0:	454b      	cmp	r3, r9
 80041a2:	dc01      	bgt.n	80041a8 <_printf_float+0x2b4>
 80041a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041a6:	e794      	b.n	80040d2 <_printf_float+0x1de>
 80041a8:	2301      	movs	r3, #1
 80041aa:	4652      	mov	r2, sl
 80041ac:	4631      	mov	r1, r6
 80041ae:	4628      	mov	r0, r5
 80041b0:	47b8      	blx	r7
 80041b2:	3001      	adds	r0, #1
 80041b4:	f43f aef9 	beq.w	8003faa <_printf_float+0xb6>
 80041b8:	f109 0901 	add.w	r9, r9, #1
 80041bc:	e7ee      	b.n	800419c <_printf_float+0x2a8>
 80041be:	bf00      	nop
 80041c0:	7fefffff 	.word	0x7fefffff
 80041c4:	08007348 	.word	0x08007348
 80041c8:	0800734c 	.word	0x0800734c
 80041cc:	08007354 	.word	0x08007354
 80041d0:	08007350 	.word	0x08007350
 80041d4:	08007358 	.word	0x08007358
 80041d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041dc:	429a      	cmp	r2, r3
 80041de:	bfa8      	it	ge
 80041e0:	461a      	movge	r2, r3
 80041e2:	2a00      	cmp	r2, #0
 80041e4:	4691      	mov	r9, r2
 80041e6:	dc37      	bgt.n	8004258 <_printf_float+0x364>
 80041e8:	f04f 0b00 	mov.w	fp, #0
 80041ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041f0:	f104 021a 	add.w	r2, r4, #26
 80041f4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80041f8:	ebaa 0309 	sub.w	r3, sl, r9
 80041fc:	455b      	cmp	r3, fp
 80041fe:	dc33      	bgt.n	8004268 <_printf_float+0x374>
 8004200:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004204:	429a      	cmp	r2, r3
 8004206:	db3b      	blt.n	8004280 <_printf_float+0x38c>
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	07da      	lsls	r2, r3, #31
 800420c:	d438      	bmi.n	8004280 <_printf_float+0x38c>
 800420e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004210:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004212:	eba3 020a 	sub.w	r2, r3, sl
 8004216:	eba3 0901 	sub.w	r9, r3, r1
 800421a:	4591      	cmp	r9, r2
 800421c:	bfa8      	it	ge
 800421e:	4691      	movge	r9, r2
 8004220:	f1b9 0f00 	cmp.w	r9, #0
 8004224:	dc34      	bgt.n	8004290 <_printf_float+0x39c>
 8004226:	f04f 0800 	mov.w	r8, #0
 800422a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800422e:	f104 0a1a 	add.w	sl, r4, #26
 8004232:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	eba3 0309 	sub.w	r3, r3, r9
 800423c:	4543      	cmp	r3, r8
 800423e:	f77f af7a 	ble.w	8004136 <_printf_float+0x242>
 8004242:	2301      	movs	r3, #1
 8004244:	4652      	mov	r2, sl
 8004246:	4631      	mov	r1, r6
 8004248:	4628      	mov	r0, r5
 800424a:	47b8      	blx	r7
 800424c:	3001      	adds	r0, #1
 800424e:	f43f aeac 	beq.w	8003faa <_printf_float+0xb6>
 8004252:	f108 0801 	add.w	r8, r8, #1
 8004256:	e7ec      	b.n	8004232 <_printf_float+0x33e>
 8004258:	4613      	mov	r3, r2
 800425a:	4631      	mov	r1, r6
 800425c:	4642      	mov	r2, r8
 800425e:	4628      	mov	r0, r5
 8004260:	47b8      	blx	r7
 8004262:	3001      	adds	r0, #1
 8004264:	d1c0      	bne.n	80041e8 <_printf_float+0x2f4>
 8004266:	e6a0      	b.n	8003faa <_printf_float+0xb6>
 8004268:	2301      	movs	r3, #1
 800426a:	4631      	mov	r1, r6
 800426c:	4628      	mov	r0, r5
 800426e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004270:	47b8      	blx	r7
 8004272:	3001      	adds	r0, #1
 8004274:	f43f ae99 	beq.w	8003faa <_printf_float+0xb6>
 8004278:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800427a:	f10b 0b01 	add.w	fp, fp, #1
 800427e:	e7b9      	b.n	80041f4 <_printf_float+0x300>
 8004280:	4631      	mov	r1, r6
 8004282:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004286:	4628      	mov	r0, r5
 8004288:	47b8      	blx	r7
 800428a:	3001      	adds	r0, #1
 800428c:	d1bf      	bne.n	800420e <_printf_float+0x31a>
 800428e:	e68c      	b.n	8003faa <_printf_float+0xb6>
 8004290:	464b      	mov	r3, r9
 8004292:	4631      	mov	r1, r6
 8004294:	4628      	mov	r0, r5
 8004296:	eb08 020a 	add.w	r2, r8, sl
 800429a:	47b8      	blx	r7
 800429c:	3001      	adds	r0, #1
 800429e:	d1c2      	bne.n	8004226 <_printf_float+0x332>
 80042a0:	e683      	b.n	8003faa <_printf_float+0xb6>
 80042a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042a4:	2a01      	cmp	r2, #1
 80042a6:	dc01      	bgt.n	80042ac <_printf_float+0x3b8>
 80042a8:	07db      	lsls	r3, r3, #31
 80042aa:	d537      	bpl.n	800431c <_printf_float+0x428>
 80042ac:	2301      	movs	r3, #1
 80042ae:	4642      	mov	r2, r8
 80042b0:	4631      	mov	r1, r6
 80042b2:	4628      	mov	r0, r5
 80042b4:	47b8      	blx	r7
 80042b6:	3001      	adds	r0, #1
 80042b8:	f43f ae77 	beq.w	8003faa <_printf_float+0xb6>
 80042bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042c0:	4631      	mov	r1, r6
 80042c2:	4628      	mov	r0, r5
 80042c4:	47b8      	blx	r7
 80042c6:	3001      	adds	r0, #1
 80042c8:	f43f ae6f 	beq.w	8003faa <_printf_float+0xb6>
 80042cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042d0:	2200      	movs	r2, #0
 80042d2:	2300      	movs	r3, #0
 80042d4:	f7fc fbc8 	bl	8000a68 <__aeabi_dcmpeq>
 80042d8:	b9d8      	cbnz	r0, 8004312 <_printf_float+0x41e>
 80042da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042dc:	f108 0201 	add.w	r2, r8, #1
 80042e0:	3b01      	subs	r3, #1
 80042e2:	4631      	mov	r1, r6
 80042e4:	4628      	mov	r0, r5
 80042e6:	47b8      	blx	r7
 80042e8:	3001      	adds	r0, #1
 80042ea:	d10e      	bne.n	800430a <_printf_float+0x416>
 80042ec:	e65d      	b.n	8003faa <_printf_float+0xb6>
 80042ee:	2301      	movs	r3, #1
 80042f0:	464a      	mov	r2, r9
 80042f2:	4631      	mov	r1, r6
 80042f4:	4628      	mov	r0, r5
 80042f6:	47b8      	blx	r7
 80042f8:	3001      	adds	r0, #1
 80042fa:	f43f ae56 	beq.w	8003faa <_printf_float+0xb6>
 80042fe:	f108 0801 	add.w	r8, r8, #1
 8004302:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004304:	3b01      	subs	r3, #1
 8004306:	4543      	cmp	r3, r8
 8004308:	dcf1      	bgt.n	80042ee <_printf_float+0x3fa>
 800430a:	4653      	mov	r3, sl
 800430c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004310:	e6e0      	b.n	80040d4 <_printf_float+0x1e0>
 8004312:	f04f 0800 	mov.w	r8, #0
 8004316:	f104 091a 	add.w	r9, r4, #26
 800431a:	e7f2      	b.n	8004302 <_printf_float+0x40e>
 800431c:	2301      	movs	r3, #1
 800431e:	4642      	mov	r2, r8
 8004320:	e7df      	b.n	80042e2 <_printf_float+0x3ee>
 8004322:	2301      	movs	r3, #1
 8004324:	464a      	mov	r2, r9
 8004326:	4631      	mov	r1, r6
 8004328:	4628      	mov	r0, r5
 800432a:	47b8      	blx	r7
 800432c:	3001      	adds	r0, #1
 800432e:	f43f ae3c 	beq.w	8003faa <_printf_float+0xb6>
 8004332:	f108 0801 	add.w	r8, r8, #1
 8004336:	68e3      	ldr	r3, [r4, #12]
 8004338:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800433a:	1a5b      	subs	r3, r3, r1
 800433c:	4543      	cmp	r3, r8
 800433e:	dcf0      	bgt.n	8004322 <_printf_float+0x42e>
 8004340:	e6fd      	b.n	800413e <_printf_float+0x24a>
 8004342:	f04f 0800 	mov.w	r8, #0
 8004346:	f104 0919 	add.w	r9, r4, #25
 800434a:	e7f4      	b.n	8004336 <_printf_float+0x442>

0800434c <_printf_common>:
 800434c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004350:	4616      	mov	r6, r2
 8004352:	4699      	mov	r9, r3
 8004354:	688a      	ldr	r2, [r1, #8]
 8004356:	690b      	ldr	r3, [r1, #16]
 8004358:	4607      	mov	r7, r0
 800435a:	4293      	cmp	r3, r2
 800435c:	bfb8      	it	lt
 800435e:	4613      	movlt	r3, r2
 8004360:	6033      	str	r3, [r6, #0]
 8004362:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004366:	460c      	mov	r4, r1
 8004368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800436c:	b10a      	cbz	r2, 8004372 <_printf_common+0x26>
 800436e:	3301      	adds	r3, #1
 8004370:	6033      	str	r3, [r6, #0]
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	0699      	lsls	r1, r3, #26
 8004376:	bf42      	ittt	mi
 8004378:	6833      	ldrmi	r3, [r6, #0]
 800437a:	3302      	addmi	r3, #2
 800437c:	6033      	strmi	r3, [r6, #0]
 800437e:	6825      	ldr	r5, [r4, #0]
 8004380:	f015 0506 	ands.w	r5, r5, #6
 8004384:	d106      	bne.n	8004394 <_printf_common+0x48>
 8004386:	f104 0a19 	add.w	sl, r4, #25
 800438a:	68e3      	ldr	r3, [r4, #12]
 800438c:	6832      	ldr	r2, [r6, #0]
 800438e:	1a9b      	subs	r3, r3, r2
 8004390:	42ab      	cmp	r3, r5
 8004392:	dc28      	bgt.n	80043e6 <_printf_common+0x9a>
 8004394:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004398:	1e13      	subs	r3, r2, #0
 800439a:	6822      	ldr	r2, [r4, #0]
 800439c:	bf18      	it	ne
 800439e:	2301      	movne	r3, #1
 80043a0:	0692      	lsls	r2, r2, #26
 80043a2:	d42d      	bmi.n	8004400 <_printf_common+0xb4>
 80043a4:	4649      	mov	r1, r9
 80043a6:	4638      	mov	r0, r7
 80043a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043ac:	47c0      	blx	r8
 80043ae:	3001      	adds	r0, #1
 80043b0:	d020      	beq.n	80043f4 <_printf_common+0xa8>
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	68e5      	ldr	r5, [r4, #12]
 80043b6:	f003 0306 	and.w	r3, r3, #6
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	bf18      	it	ne
 80043be:	2500      	movne	r5, #0
 80043c0:	6832      	ldr	r2, [r6, #0]
 80043c2:	f04f 0600 	mov.w	r6, #0
 80043c6:	68a3      	ldr	r3, [r4, #8]
 80043c8:	bf08      	it	eq
 80043ca:	1aad      	subeq	r5, r5, r2
 80043cc:	6922      	ldr	r2, [r4, #16]
 80043ce:	bf08      	it	eq
 80043d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043d4:	4293      	cmp	r3, r2
 80043d6:	bfc4      	itt	gt
 80043d8:	1a9b      	subgt	r3, r3, r2
 80043da:	18ed      	addgt	r5, r5, r3
 80043dc:	341a      	adds	r4, #26
 80043de:	42b5      	cmp	r5, r6
 80043e0:	d11a      	bne.n	8004418 <_printf_common+0xcc>
 80043e2:	2000      	movs	r0, #0
 80043e4:	e008      	b.n	80043f8 <_printf_common+0xac>
 80043e6:	2301      	movs	r3, #1
 80043e8:	4652      	mov	r2, sl
 80043ea:	4649      	mov	r1, r9
 80043ec:	4638      	mov	r0, r7
 80043ee:	47c0      	blx	r8
 80043f0:	3001      	adds	r0, #1
 80043f2:	d103      	bne.n	80043fc <_printf_common+0xb0>
 80043f4:	f04f 30ff 	mov.w	r0, #4294967295
 80043f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fc:	3501      	adds	r5, #1
 80043fe:	e7c4      	b.n	800438a <_printf_common+0x3e>
 8004400:	2030      	movs	r0, #48	; 0x30
 8004402:	18e1      	adds	r1, r4, r3
 8004404:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800440e:	4422      	add	r2, r4
 8004410:	3302      	adds	r3, #2
 8004412:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004416:	e7c5      	b.n	80043a4 <_printf_common+0x58>
 8004418:	2301      	movs	r3, #1
 800441a:	4622      	mov	r2, r4
 800441c:	4649      	mov	r1, r9
 800441e:	4638      	mov	r0, r7
 8004420:	47c0      	blx	r8
 8004422:	3001      	adds	r0, #1
 8004424:	d0e6      	beq.n	80043f4 <_printf_common+0xa8>
 8004426:	3601      	adds	r6, #1
 8004428:	e7d9      	b.n	80043de <_printf_common+0x92>
	...

0800442c <_printf_i>:
 800442c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004430:	7e0f      	ldrb	r7, [r1, #24]
 8004432:	4691      	mov	r9, r2
 8004434:	2f78      	cmp	r7, #120	; 0x78
 8004436:	4680      	mov	r8, r0
 8004438:	460c      	mov	r4, r1
 800443a:	469a      	mov	sl, r3
 800443c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800443e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004442:	d807      	bhi.n	8004454 <_printf_i+0x28>
 8004444:	2f62      	cmp	r7, #98	; 0x62
 8004446:	d80a      	bhi.n	800445e <_printf_i+0x32>
 8004448:	2f00      	cmp	r7, #0
 800444a:	f000 80d9 	beq.w	8004600 <_printf_i+0x1d4>
 800444e:	2f58      	cmp	r7, #88	; 0x58
 8004450:	f000 80a4 	beq.w	800459c <_printf_i+0x170>
 8004454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004458:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800445c:	e03a      	b.n	80044d4 <_printf_i+0xa8>
 800445e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004462:	2b15      	cmp	r3, #21
 8004464:	d8f6      	bhi.n	8004454 <_printf_i+0x28>
 8004466:	a101      	add	r1, pc, #4	; (adr r1, 800446c <_printf_i+0x40>)
 8004468:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800446c:	080044c5 	.word	0x080044c5
 8004470:	080044d9 	.word	0x080044d9
 8004474:	08004455 	.word	0x08004455
 8004478:	08004455 	.word	0x08004455
 800447c:	08004455 	.word	0x08004455
 8004480:	08004455 	.word	0x08004455
 8004484:	080044d9 	.word	0x080044d9
 8004488:	08004455 	.word	0x08004455
 800448c:	08004455 	.word	0x08004455
 8004490:	08004455 	.word	0x08004455
 8004494:	08004455 	.word	0x08004455
 8004498:	080045e7 	.word	0x080045e7
 800449c:	08004509 	.word	0x08004509
 80044a0:	080045c9 	.word	0x080045c9
 80044a4:	08004455 	.word	0x08004455
 80044a8:	08004455 	.word	0x08004455
 80044ac:	08004609 	.word	0x08004609
 80044b0:	08004455 	.word	0x08004455
 80044b4:	08004509 	.word	0x08004509
 80044b8:	08004455 	.word	0x08004455
 80044bc:	08004455 	.word	0x08004455
 80044c0:	080045d1 	.word	0x080045d1
 80044c4:	682b      	ldr	r3, [r5, #0]
 80044c6:	1d1a      	adds	r2, r3, #4
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	602a      	str	r2, [r5, #0]
 80044cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0a4      	b.n	8004622 <_printf_i+0x1f6>
 80044d8:	6820      	ldr	r0, [r4, #0]
 80044da:	6829      	ldr	r1, [r5, #0]
 80044dc:	0606      	lsls	r6, r0, #24
 80044de:	f101 0304 	add.w	r3, r1, #4
 80044e2:	d50a      	bpl.n	80044fa <_printf_i+0xce>
 80044e4:	680e      	ldr	r6, [r1, #0]
 80044e6:	602b      	str	r3, [r5, #0]
 80044e8:	2e00      	cmp	r6, #0
 80044ea:	da03      	bge.n	80044f4 <_printf_i+0xc8>
 80044ec:	232d      	movs	r3, #45	; 0x2d
 80044ee:	4276      	negs	r6, r6
 80044f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044f4:	230a      	movs	r3, #10
 80044f6:	485e      	ldr	r0, [pc, #376]	; (8004670 <_printf_i+0x244>)
 80044f8:	e019      	b.n	800452e <_printf_i+0x102>
 80044fa:	680e      	ldr	r6, [r1, #0]
 80044fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004500:	602b      	str	r3, [r5, #0]
 8004502:	bf18      	it	ne
 8004504:	b236      	sxthne	r6, r6
 8004506:	e7ef      	b.n	80044e8 <_printf_i+0xbc>
 8004508:	682b      	ldr	r3, [r5, #0]
 800450a:	6820      	ldr	r0, [r4, #0]
 800450c:	1d19      	adds	r1, r3, #4
 800450e:	6029      	str	r1, [r5, #0]
 8004510:	0601      	lsls	r1, r0, #24
 8004512:	d501      	bpl.n	8004518 <_printf_i+0xec>
 8004514:	681e      	ldr	r6, [r3, #0]
 8004516:	e002      	b.n	800451e <_printf_i+0xf2>
 8004518:	0646      	lsls	r6, r0, #25
 800451a:	d5fb      	bpl.n	8004514 <_printf_i+0xe8>
 800451c:	881e      	ldrh	r6, [r3, #0]
 800451e:	2f6f      	cmp	r7, #111	; 0x6f
 8004520:	bf0c      	ite	eq
 8004522:	2308      	moveq	r3, #8
 8004524:	230a      	movne	r3, #10
 8004526:	4852      	ldr	r0, [pc, #328]	; (8004670 <_printf_i+0x244>)
 8004528:	2100      	movs	r1, #0
 800452a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800452e:	6865      	ldr	r5, [r4, #4]
 8004530:	2d00      	cmp	r5, #0
 8004532:	bfa8      	it	ge
 8004534:	6821      	ldrge	r1, [r4, #0]
 8004536:	60a5      	str	r5, [r4, #8]
 8004538:	bfa4      	itt	ge
 800453a:	f021 0104 	bicge.w	r1, r1, #4
 800453e:	6021      	strge	r1, [r4, #0]
 8004540:	b90e      	cbnz	r6, 8004546 <_printf_i+0x11a>
 8004542:	2d00      	cmp	r5, #0
 8004544:	d04d      	beq.n	80045e2 <_printf_i+0x1b6>
 8004546:	4615      	mov	r5, r2
 8004548:	fbb6 f1f3 	udiv	r1, r6, r3
 800454c:	fb03 6711 	mls	r7, r3, r1, r6
 8004550:	5dc7      	ldrb	r7, [r0, r7]
 8004552:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004556:	4637      	mov	r7, r6
 8004558:	42bb      	cmp	r3, r7
 800455a:	460e      	mov	r6, r1
 800455c:	d9f4      	bls.n	8004548 <_printf_i+0x11c>
 800455e:	2b08      	cmp	r3, #8
 8004560:	d10b      	bne.n	800457a <_printf_i+0x14e>
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	07de      	lsls	r6, r3, #31
 8004566:	d508      	bpl.n	800457a <_printf_i+0x14e>
 8004568:	6923      	ldr	r3, [r4, #16]
 800456a:	6861      	ldr	r1, [r4, #4]
 800456c:	4299      	cmp	r1, r3
 800456e:	bfde      	ittt	le
 8004570:	2330      	movle	r3, #48	; 0x30
 8004572:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004576:	f105 35ff 	addle.w	r5, r5, #4294967295
 800457a:	1b52      	subs	r2, r2, r5
 800457c:	6122      	str	r2, [r4, #16]
 800457e:	464b      	mov	r3, r9
 8004580:	4621      	mov	r1, r4
 8004582:	4640      	mov	r0, r8
 8004584:	f8cd a000 	str.w	sl, [sp]
 8004588:	aa03      	add	r2, sp, #12
 800458a:	f7ff fedf 	bl	800434c <_printf_common>
 800458e:	3001      	adds	r0, #1
 8004590:	d14c      	bne.n	800462c <_printf_i+0x200>
 8004592:	f04f 30ff 	mov.w	r0, #4294967295
 8004596:	b004      	add	sp, #16
 8004598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800459c:	4834      	ldr	r0, [pc, #208]	; (8004670 <_printf_i+0x244>)
 800459e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80045a2:	6829      	ldr	r1, [r5, #0]
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	f851 6b04 	ldr.w	r6, [r1], #4
 80045aa:	6029      	str	r1, [r5, #0]
 80045ac:	061d      	lsls	r5, r3, #24
 80045ae:	d514      	bpl.n	80045da <_printf_i+0x1ae>
 80045b0:	07df      	lsls	r7, r3, #31
 80045b2:	bf44      	itt	mi
 80045b4:	f043 0320 	orrmi.w	r3, r3, #32
 80045b8:	6023      	strmi	r3, [r4, #0]
 80045ba:	b91e      	cbnz	r6, 80045c4 <_printf_i+0x198>
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	f023 0320 	bic.w	r3, r3, #32
 80045c2:	6023      	str	r3, [r4, #0]
 80045c4:	2310      	movs	r3, #16
 80045c6:	e7af      	b.n	8004528 <_printf_i+0xfc>
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	f043 0320 	orr.w	r3, r3, #32
 80045ce:	6023      	str	r3, [r4, #0]
 80045d0:	2378      	movs	r3, #120	; 0x78
 80045d2:	4828      	ldr	r0, [pc, #160]	; (8004674 <_printf_i+0x248>)
 80045d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045d8:	e7e3      	b.n	80045a2 <_printf_i+0x176>
 80045da:	0659      	lsls	r1, r3, #25
 80045dc:	bf48      	it	mi
 80045de:	b2b6      	uxthmi	r6, r6
 80045e0:	e7e6      	b.n	80045b0 <_printf_i+0x184>
 80045e2:	4615      	mov	r5, r2
 80045e4:	e7bb      	b.n	800455e <_printf_i+0x132>
 80045e6:	682b      	ldr	r3, [r5, #0]
 80045e8:	6826      	ldr	r6, [r4, #0]
 80045ea:	1d18      	adds	r0, r3, #4
 80045ec:	6961      	ldr	r1, [r4, #20]
 80045ee:	6028      	str	r0, [r5, #0]
 80045f0:	0635      	lsls	r5, r6, #24
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	d501      	bpl.n	80045fa <_printf_i+0x1ce>
 80045f6:	6019      	str	r1, [r3, #0]
 80045f8:	e002      	b.n	8004600 <_printf_i+0x1d4>
 80045fa:	0670      	lsls	r0, r6, #25
 80045fc:	d5fb      	bpl.n	80045f6 <_printf_i+0x1ca>
 80045fe:	8019      	strh	r1, [r3, #0]
 8004600:	2300      	movs	r3, #0
 8004602:	4615      	mov	r5, r2
 8004604:	6123      	str	r3, [r4, #16]
 8004606:	e7ba      	b.n	800457e <_printf_i+0x152>
 8004608:	682b      	ldr	r3, [r5, #0]
 800460a:	2100      	movs	r1, #0
 800460c:	1d1a      	adds	r2, r3, #4
 800460e:	602a      	str	r2, [r5, #0]
 8004610:	681d      	ldr	r5, [r3, #0]
 8004612:	6862      	ldr	r2, [r4, #4]
 8004614:	4628      	mov	r0, r5
 8004616:	f000 fed5 	bl	80053c4 <memchr>
 800461a:	b108      	cbz	r0, 8004620 <_printf_i+0x1f4>
 800461c:	1b40      	subs	r0, r0, r5
 800461e:	6060      	str	r0, [r4, #4]
 8004620:	6863      	ldr	r3, [r4, #4]
 8004622:	6123      	str	r3, [r4, #16]
 8004624:	2300      	movs	r3, #0
 8004626:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800462a:	e7a8      	b.n	800457e <_printf_i+0x152>
 800462c:	462a      	mov	r2, r5
 800462e:	4649      	mov	r1, r9
 8004630:	4640      	mov	r0, r8
 8004632:	6923      	ldr	r3, [r4, #16]
 8004634:	47d0      	blx	sl
 8004636:	3001      	adds	r0, #1
 8004638:	d0ab      	beq.n	8004592 <_printf_i+0x166>
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	079b      	lsls	r3, r3, #30
 800463e:	d413      	bmi.n	8004668 <_printf_i+0x23c>
 8004640:	68e0      	ldr	r0, [r4, #12]
 8004642:	9b03      	ldr	r3, [sp, #12]
 8004644:	4298      	cmp	r0, r3
 8004646:	bfb8      	it	lt
 8004648:	4618      	movlt	r0, r3
 800464a:	e7a4      	b.n	8004596 <_printf_i+0x16a>
 800464c:	2301      	movs	r3, #1
 800464e:	4632      	mov	r2, r6
 8004650:	4649      	mov	r1, r9
 8004652:	4640      	mov	r0, r8
 8004654:	47d0      	blx	sl
 8004656:	3001      	adds	r0, #1
 8004658:	d09b      	beq.n	8004592 <_printf_i+0x166>
 800465a:	3501      	adds	r5, #1
 800465c:	68e3      	ldr	r3, [r4, #12]
 800465e:	9903      	ldr	r1, [sp, #12]
 8004660:	1a5b      	subs	r3, r3, r1
 8004662:	42ab      	cmp	r3, r5
 8004664:	dcf2      	bgt.n	800464c <_printf_i+0x220>
 8004666:	e7eb      	b.n	8004640 <_printf_i+0x214>
 8004668:	2500      	movs	r5, #0
 800466a:	f104 0619 	add.w	r6, r4, #25
 800466e:	e7f5      	b.n	800465c <_printf_i+0x230>
 8004670:	0800735a 	.word	0x0800735a
 8004674:	0800736b 	.word	0x0800736b

08004678 <siprintf>:
 8004678:	b40e      	push	{r1, r2, r3}
 800467a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800467e:	b500      	push	{lr}
 8004680:	b09c      	sub	sp, #112	; 0x70
 8004682:	ab1d      	add	r3, sp, #116	; 0x74
 8004684:	9002      	str	r0, [sp, #8]
 8004686:	9006      	str	r0, [sp, #24]
 8004688:	9107      	str	r1, [sp, #28]
 800468a:	9104      	str	r1, [sp, #16]
 800468c:	4808      	ldr	r0, [pc, #32]	; (80046b0 <siprintf+0x38>)
 800468e:	4909      	ldr	r1, [pc, #36]	; (80046b4 <siprintf+0x3c>)
 8004690:	f853 2b04 	ldr.w	r2, [r3], #4
 8004694:	9105      	str	r1, [sp, #20]
 8004696:	6800      	ldr	r0, [r0, #0]
 8004698:	a902      	add	r1, sp, #8
 800469a:	9301      	str	r3, [sp, #4]
 800469c:	f001 fb7c 	bl	8005d98 <_svfiprintf_r>
 80046a0:	2200      	movs	r2, #0
 80046a2:	9b02      	ldr	r3, [sp, #8]
 80046a4:	701a      	strb	r2, [r3, #0]
 80046a6:	b01c      	add	sp, #112	; 0x70
 80046a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046ac:	b003      	add	sp, #12
 80046ae:	4770      	bx	lr
 80046b0:	20000044 	.word	0x20000044
 80046b4:	ffff0208 	.word	0xffff0208

080046b8 <quorem>:
 80046b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046bc:	6903      	ldr	r3, [r0, #16]
 80046be:	690c      	ldr	r4, [r1, #16]
 80046c0:	4607      	mov	r7, r0
 80046c2:	42a3      	cmp	r3, r4
 80046c4:	f2c0 8082 	blt.w	80047cc <quorem+0x114>
 80046c8:	3c01      	subs	r4, #1
 80046ca:	f100 0514 	add.w	r5, r0, #20
 80046ce:	f101 0814 	add.w	r8, r1, #20
 80046d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80046d6:	9301      	str	r3, [sp, #4]
 80046d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80046dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046e0:	3301      	adds	r3, #1
 80046e2:	429a      	cmp	r2, r3
 80046e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80046e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80046ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80046f0:	d331      	bcc.n	8004756 <quorem+0x9e>
 80046f2:	f04f 0e00 	mov.w	lr, #0
 80046f6:	4640      	mov	r0, r8
 80046f8:	46ac      	mov	ip, r5
 80046fa:	46f2      	mov	sl, lr
 80046fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8004700:	b293      	uxth	r3, r2
 8004702:	fb06 e303 	mla	r3, r6, r3, lr
 8004706:	0c12      	lsrs	r2, r2, #16
 8004708:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800470c:	b29b      	uxth	r3, r3
 800470e:	fb06 e202 	mla	r2, r6, r2, lr
 8004712:	ebaa 0303 	sub.w	r3, sl, r3
 8004716:	f8dc a000 	ldr.w	sl, [ip]
 800471a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800471e:	fa1f fa8a 	uxth.w	sl, sl
 8004722:	4453      	add	r3, sl
 8004724:	f8dc a000 	ldr.w	sl, [ip]
 8004728:	b292      	uxth	r2, r2
 800472a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800472e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004732:	b29b      	uxth	r3, r3
 8004734:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004738:	4581      	cmp	r9, r0
 800473a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800473e:	f84c 3b04 	str.w	r3, [ip], #4
 8004742:	d2db      	bcs.n	80046fc <quorem+0x44>
 8004744:	f855 300b 	ldr.w	r3, [r5, fp]
 8004748:	b92b      	cbnz	r3, 8004756 <quorem+0x9e>
 800474a:	9b01      	ldr	r3, [sp, #4]
 800474c:	3b04      	subs	r3, #4
 800474e:	429d      	cmp	r5, r3
 8004750:	461a      	mov	r2, r3
 8004752:	d32f      	bcc.n	80047b4 <quorem+0xfc>
 8004754:	613c      	str	r4, [r7, #16]
 8004756:	4638      	mov	r0, r7
 8004758:	f001 f8ce 	bl	80058f8 <__mcmp>
 800475c:	2800      	cmp	r0, #0
 800475e:	db25      	blt.n	80047ac <quorem+0xf4>
 8004760:	4628      	mov	r0, r5
 8004762:	f04f 0c00 	mov.w	ip, #0
 8004766:	3601      	adds	r6, #1
 8004768:	f858 1b04 	ldr.w	r1, [r8], #4
 800476c:	f8d0 e000 	ldr.w	lr, [r0]
 8004770:	b28b      	uxth	r3, r1
 8004772:	ebac 0303 	sub.w	r3, ip, r3
 8004776:	fa1f f28e 	uxth.w	r2, lr
 800477a:	4413      	add	r3, r2
 800477c:	0c0a      	lsrs	r2, r1, #16
 800477e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004782:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004786:	b29b      	uxth	r3, r3
 8004788:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800478c:	45c1      	cmp	r9, r8
 800478e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004792:	f840 3b04 	str.w	r3, [r0], #4
 8004796:	d2e7      	bcs.n	8004768 <quorem+0xb0>
 8004798:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800479c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80047a0:	b922      	cbnz	r2, 80047ac <quorem+0xf4>
 80047a2:	3b04      	subs	r3, #4
 80047a4:	429d      	cmp	r5, r3
 80047a6:	461a      	mov	r2, r3
 80047a8:	d30a      	bcc.n	80047c0 <quorem+0x108>
 80047aa:	613c      	str	r4, [r7, #16]
 80047ac:	4630      	mov	r0, r6
 80047ae:	b003      	add	sp, #12
 80047b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047b4:	6812      	ldr	r2, [r2, #0]
 80047b6:	3b04      	subs	r3, #4
 80047b8:	2a00      	cmp	r2, #0
 80047ba:	d1cb      	bne.n	8004754 <quorem+0x9c>
 80047bc:	3c01      	subs	r4, #1
 80047be:	e7c6      	b.n	800474e <quorem+0x96>
 80047c0:	6812      	ldr	r2, [r2, #0]
 80047c2:	3b04      	subs	r3, #4
 80047c4:	2a00      	cmp	r2, #0
 80047c6:	d1f0      	bne.n	80047aa <quorem+0xf2>
 80047c8:	3c01      	subs	r4, #1
 80047ca:	e7eb      	b.n	80047a4 <quorem+0xec>
 80047cc:	2000      	movs	r0, #0
 80047ce:	e7ee      	b.n	80047ae <quorem+0xf6>

080047d0 <_dtoa_r>:
 80047d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d4:	4616      	mov	r6, r2
 80047d6:	461f      	mov	r7, r3
 80047d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80047da:	b099      	sub	sp, #100	; 0x64
 80047dc:	4605      	mov	r5, r0
 80047de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80047e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80047e6:	b974      	cbnz	r4, 8004806 <_dtoa_r+0x36>
 80047e8:	2010      	movs	r0, #16
 80047ea:	f000 fde3 	bl	80053b4 <malloc>
 80047ee:	4602      	mov	r2, r0
 80047f0:	6268      	str	r0, [r5, #36]	; 0x24
 80047f2:	b920      	cbnz	r0, 80047fe <_dtoa_r+0x2e>
 80047f4:	21ea      	movs	r1, #234	; 0xea
 80047f6:	4ba8      	ldr	r3, [pc, #672]	; (8004a98 <_dtoa_r+0x2c8>)
 80047f8:	48a8      	ldr	r0, [pc, #672]	; (8004a9c <_dtoa_r+0x2cc>)
 80047fa:	f001 fbdd 	bl	8005fb8 <__assert_func>
 80047fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004802:	6004      	str	r4, [r0, #0]
 8004804:	60c4      	str	r4, [r0, #12]
 8004806:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004808:	6819      	ldr	r1, [r3, #0]
 800480a:	b151      	cbz	r1, 8004822 <_dtoa_r+0x52>
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	2301      	movs	r3, #1
 8004810:	4093      	lsls	r3, r2
 8004812:	604a      	str	r2, [r1, #4]
 8004814:	608b      	str	r3, [r1, #8]
 8004816:	4628      	mov	r0, r5
 8004818:	f000 fe30 	bl	800547c <_Bfree>
 800481c:	2200      	movs	r2, #0
 800481e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	1e3b      	subs	r3, r7, #0
 8004824:	bfaf      	iteee	ge
 8004826:	2300      	movge	r3, #0
 8004828:	2201      	movlt	r2, #1
 800482a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800482e:	9305      	strlt	r3, [sp, #20]
 8004830:	bfa8      	it	ge
 8004832:	f8c8 3000 	strge.w	r3, [r8]
 8004836:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800483a:	4b99      	ldr	r3, [pc, #612]	; (8004aa0 <_dtoa_r+0x2d0>)
 800483c:	bfb8      	it	lt
 800483e:	f8c8 2000 	strlt.w	r2, [r8]
 8004842:	ea33 0309 	bics.w	r3, r3, r9
 8004846:	d119      	bne.n	800487c <_dtoa_r+0xac>
 8004848:	f242 730f 	movw	r3, #9999	; 0x270f
 800484c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800484e:	6013      	str	r3, [r2, #0]
 8004850:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004854:	4333      	orrs	r3, r6
 8004856:	f000 857f 	beq.w	8005358 <_dtoa_r+0xb88>
 800485a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800485c:	b953      	cbnz	r3, 8004874 <_dtoa_r+0xa4>
 800485e:	4b91      	ldr	r3, [pc, #580]	; (8004aa4 <_dtoa_r+0x2d4>)
 8004860:	e022      	b.n	80048a8 <_dtoa_r+0xd8>
 8004862:	4b91      	ldr	r3, [pc, #580]	; (8004aa8 <_dtoa_r+0x2d8>)
 8004864:	9303      	str	r3, [sp, #12]
 8004866:	3308      	adds	r3, #8
 8004868:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	9803      	ldr	r0, [sp, #12]
 800486e:	b019      	add	sp, #100	; 0x64
 8004870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004874:	4b8b      	ldr	r3, [pc, #556]	; (8004aa4 <_dtoa_r+0x2d4>)
 8004876:	9303      	str	r3, [sp, #12]
 8004878:	3303      	adds	r3, #3
 800487a:	e7f5      	b.n	8004868 <_dtoa_r+0x98>
 800487c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004880:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004884:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004888:	2200      	movs	r2, #0
 800488a:	2300      	movs	r3, #0
 800488c:	f7fc f8ec 	bl	8000a68 <__aeabi_dcmpeq>
 8004890:	4680      	mov	r8, r0
 8004892:	b158      	cbz	r0, 80048ac <_dtoa_r+0xdc>
 8004894:	2301      	movs	r3, #1
 8004896:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 8558 	beq.w	8005352 <_dtoa_r+0xb82>
 80048a2:	4882      	ldr	r0, [pc, #520]	; (8004aac <_dtoa_r+0x2dc>)
 80048a4:	6018      	str	r0, [r3, #0]
 80048a6:	1e43      	subs	r3, r0, #1
 80048a8:	9303      	str	r3, [sp, #12]
 80048aa:	e7df      	b.n	800486c <_dtoa_r+0x9c>
 80048ac:	ab16      	add	r3, sp, #88	; 0x58
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	ab17      	add	r3, sp, #92	; 0x5c
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	4628      	mov	r0, r5
 80048b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80048ba:	f001 f8c5 	bl	8005a48 <__d2b>
 80048be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80048c2:	4683      	mov	fp, r0
 80048c4:	2c00      	cmp	r4, #0
 80048c6:	d07f      	beq.n	80049c8 <_dtoa_r+0x1f8>
 80048c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80048cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048ce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80048d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80048da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80048de:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80048e2:	2200      	movs	r2, #0
 80048e4:	4b72      	ldr	r3, [pc, #456]	; (8004ab0 <_dtoa_r+0x2e0>)
 80048e6:	f7fb fc9f 	bl	8000228 <__aeabi_dsub>
 80048ea:	a365      	add	r3, pc, #404	; (adr r3, 8004a80 <_dtoa_r+0x2b0>)
 80048ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f0:	f7fb fe52 	bl	8000598 <__aeabi_dmul>
 80048f4:	a364      	add	r3, pc, #400	; (adr r3, 8004a88 <_dtoa_r+0x2b8>)
 80048f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fa:	f7fb fc97 	bl	800022c <__adddf3>
 80048fe:	4606      	mov	r6, r0
 8004900:	4620      	mov	r0, r4
 8004902:	460f      	mov	r7, r1
 8004904:	f7fb fdde 	bl	80004c4 <__aeabi_i2d>
 8004908:	a361      	add	r3, pc, #388	; (adr r3, 8004a90 <_dtoa_r+0x2c0>)
 800490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490e:	f7fb fe43 	bl	8000598 <__aeabi_dmul>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4630      	mov	r0, r6
 8004918:	4639      	mov	r1, r7
 800491a:	f7fb fc87 	bl	800022c <__adddf3>
 800491e:	4606      	mov	r6, r0
 8004920:	460f      	mov	r7, r1
 8004922:	f7fc f8e9 	bl	8000af8 <__aeabi_d2iz>
 8004926:	2200      	movs	r2, #0
 8004928:	4682      	mov	sl, r0
 800492a:	2300      	movs	r3, #0
 800492c:	4630      	mov	r0, r6
 800492e:	4639      	mov	r1, r7
 8004930:	f7fc f8a4 	bl	8000a7c <__aeabi_dcmplt>
 8004934:	b148      	cbz	r0, 800494a <_dtoa_r+0x17a>
 8004936:	4650      	mov	r0, sl
 8004938:	f7fb fdc4 	bl	80004c4 <__aeabi_i2d>
 800493c:	4632      	mov	r2, r6
 800493e:	463b      	mov	r3, r7
 8004940:	f7fc f892 	bl	8000a68 <__aeabi_dcmpeq>
 8004944:	b908      	cbnz	r0, 800494a <_dtoa_r+0x17a>
 8004946:	f10a 3aff 	add.w	sl, sl, #4294967295
 800494a:	f1ba 0f16 	cmp.w	sl, #22
 800494e:	d858      	bhi.n	8004a02 <_dtoa_r+0x232>
 8004950:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004954:	4b57      	ldr	r3, [pc, #348]	; (8004ab4 <_dtoa_r+0x2e4>)
 8004956:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495e:	f7fc f88d 	bl	8000a7c <__aeabi_dcmplt>
 8004962:	2800      	cmp	r0, #0
 8004964:	d04f      	beq.n	8004a06 <_dtoa_r+0x236>
 8004966:	2300      	movs	r3, #0
 8004968:	f10a 3aff 	add.w	sl, sl, #4294967295
 800496c:	930f      	str	r3, [sp, #60]	; 0x3c
 800496e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004970:	1b1c      	subs	r4, r3, r4
 8004972:	1e63      	subs	r3, r4, #1
 8004974:	9309      	str	r3, [sp, #36]	; 0x24
 8004976:	bf49      	itett	mi
 8004978:	f1c4 0301 	rsbmi	r3, r4, #1
 800497c:	2300      	movpl	r3, #0
 800497e:	9306      	strmi	r3, [sp, #24]
 8004980:	2300      	movmi	r3, #0
 8004982:	bf54      	ite	pl
 8004984:	9306      	strpl	r3, [sp, #24]
 8004986:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004988:	f1ba 0f00 	cmp.w	sl, #0
 800498c:	db3d      	blt.n	8004a0a <_dtoa_r+0x23a>
 800498e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004990:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004994:	4453      	add	r3, sl
 8004996:	9309      	str	r3, [sp, #36]	; 0x24
 8004998:	2300      	movs	r3, #0
 800499a:	930a      	str	r3, [sp, #40]	; 0x28
 800499c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800499e:	2b09      	cmp	r3, #9
 80049a0:	f200 808c 	bhi.w	8004abc <_dtoa_r+0x2ec>
 80049a4:	2b05      	cmp	r3, #5
 80049a6:	bfc4      	itt	gt
 80049a8:	3b04      	subgt	r3, #4
 80049aa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80049ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049ae:	bfc8      	it	gt
 80049b0:	2400      	movgt	r4, #0
 80049b2:	f1a3 0302 	sub.w	r3, r3, #2
 80049b6:	bfd8      	it	le
 80049b8:	2401      	movle	r4, #1
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	f200 808a 	bhi.w	8004ad4 <_dtoa_r+0x304>
 80049c0:	e8df f003 	tbb	[pc, r3]
 80049c4:	5b4d4f2d 	.word	0x5b4d4f2d
 80049c8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80049cc:	441c      	add	r4, r3
 80049ce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80049d2:	2b20      	cmp	r3, #32
 80049d4:	bfc3      	ittte	gt
 80049d6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80049da:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80049de:	fa09 f303 	lslgt.w	r3, r9, r3
 80049e2:	f1c3 0320 	rsble	r3, r3, #32
 80049e6:	bfc6      	itte	gt
 80049e8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80049ec:	4318      	orrgt	r0, r3
 80049ee:	fa06 f003 	lslle.w	r0, r6, r3
 80049f2:	f7fb fd57 	bl	80004a4 <__aeabi_ui2d>
 80049f6:	2301      	movs	r3, #1
 80049f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80049fc:	3c01      	subs	r4, #1
 80049fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a00:	e76f      	b.n	80048e2 <_dtoa_r+0x112>
 8004a02:	2301      	movs	r3, #1
 8004a04:	e7b2      	b.n	800496c <_dtoa_r+0x19c>
 8004a06:	900f      	str	r0, [sp, #60]	; 0x3c
 8004a08:	e7b1      	b.n	800496e <_dtoa_r+0x19e>
 8004a0a:	9b06      	ldr	r3, [sp, #24]
 8004a0c:	eba3 030a 	sub.w	r3, r3, sl
 8004a10:	9306      	str	r3, [sp, #24]
 8004a12:	f1ca 0300 	rsb	r3, sl, #0
 8004a16:	930a      	str	r3, [sp, #40]	; 0x28
 8004a18:	2300      	movs	r3, #0
 8004a1a:	930e      	str	r3, [sp, #56]	; 0x38
 8004a1c:	e7be      	b.n	800499c <_dtoa_r+0x1cc>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	dc58      	bgt.n	8004ada <_dtoa_r+0x30a>
 8004a28:	f04f 0901 	mov.w	r9, #1
 8004a2c:	464b      	mov	r3, r9
 8004a2e:	f8cd 9020 	str.w	r9, [sp, #32]
 8004a32:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004a36:	2200      	movs	r2, #0
 8004a38:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004a3a:	6042      	str	r2, [r0, #4]
 8004a3c:	2204      	movs	r2, #4
 8004a3e:	f102 0614 	add.w	r6, r2, #20
 8004a42:	429e      	cmp	r6, r3
 8004a44:	6841      	ldr	r1, [r0, #4]
 8004a46:	d94e      	bls.n	8004ae6 <_dtoa_r+0x316>
 8004a48:	4628      	mov	r0, r5
 8004a4a:	f000 fcd7 	bl	80053fc <_Balloc>
 8004a4e:	9003      	str	r0, [sp, #12]
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d14c      	bne.n	8004aee <_dtoa_r+0x31e>
 8004a54:	4602      	mov	r2, r0
 8004a56:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004a5a:	4b17      	ldr	r3, [pc, #92]	; (8004ab8 <_dtoa_r+0x2e8>)
 8004a5c:	e6cc      	b.n	80047f8 <_dtoa_r+0x28>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e7de      	b.n	8004a20 <_dtoa_r+0x250>
 8004a62:	2300      	movs	r3, #0
 8004a64:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a68:	eb0a 0903 	add.w	r9, sl, r3
 8004a6c:	f109 0301 	add.w	r3, r9, #1
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	9308      	str	r3, [sp, #32]
 8004a74:	bfb8      	it	lt
 8004a76:	2301      	movlt	r3, #1
 8004a78:	e7dd      	b.n	8004a36 <_dtoa_r+0x266>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e7f2      	b.n	8004a64 <_dtoa_r+0x294>
 8004a7e:	bf00      	nop
 8004a80:	636f4361 	.word	0x636f4361
 8004a84:	3fd287a7 	.word	0x3fd287a7
 8004a88:	8b60c8b3 	.word	0x8b60c8b3
 8004a8c:	3fc68a28 	.word	0x3fc68a28
 8004a90:	509f79fb 	.word	0x509f79fb
 8004a94:	3fd34413 	.word	0x3fd34413
 8004a98:	08007389 	.word	0x08007389
 8004a9c:	080073a0 	.word	0x080073a0
 8004aa0:	7ff00000 	.word	0x7ff00000
 8004aa4:	08007385 	.word	0x08007385
 8004aa8:	0800737c 	.word	0x0800737c
 8004aac:	08007359 	.word	0x08007359
 8004ab0:	3ff80000 	.word	0x3ff80000
 8004ab4:	08007490 	.word	0x08007490
 8004ab8:	080073fb 	.word	0x080073fb
 8004abc:	2401      	movs	r4, #1
 8004abe:	2300      	movs	r3, #0
 8004ac0:	940b      	str	r4, [sp, #44]	; 0x2c
 8004ac2:	9322      	str	r3, [sp, #136]	; 0x88
 8004ac4:	f04f 39ff 	mov.w	r9, #4294967295
 8004ac8:	2200      	movs	r2, #0
 8004aca:	2312      	movs	r3, #18
 8004acc:	f8cd 9020 	str.w	r9, [sp, #32]
 8004ad0:	9223      	str	r2, [sp, #140]	; 0x8c
 8004ad2:	e7b0      	b.n	8004a36 <_dtoa_r+0x266>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ad8:	e7f4      	b.n	8004ac4 <_dtoa_r+0x2f4>
 8004ada:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004ade:	464b      	mov	r3, r9
 8004ae0:	f8cd 9020 	str.w	r9, [sp, #32]
 8004ae4:	e7a7      	b.n	8004a36 <_dtoa_r+0x266>
 8004ae6:	3101      	adds	r1, #1
 8004ae8:	6041      	str	r1, [r0, #4]
 8004aea:	0052      	lsls	r2, r2, #1
 8004aec:	e7a7      	b.n	8004a3e <_dtoa_r+0x26e>
 8004aee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004af0:	9a03      	ldr	r2, [sp, #12]
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	9b08      	ldr	r3, [sp, #32]
 8004af6:	2b0e      	cmp	r3, #14
 8004af8:	f200 80a8 	bhi.w	8004c4c <_dtoa_r+0x47c>
 8004afc:	2c00      	cmp	r4, #0
 8004afe:	f000 80a5 	beq.w	8004c4c <_dtoa_r+0x47c>
 8004b02:	f1ba 0f00 	cmp.w	sl, #0
 8004b06:	dd34      	ble.n	8004b72 <_dtoa_r+0x3a2>
 8004b08:	4a9a      	ldr	r2, [pc, #616]	; (8004d74 <_dtoa_r+0x5a4>)
 8004b0a:	f00a 030f 	and.w	r3, sl, #15
 8004b0e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004b12:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004b16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b1a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004b1e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004b22:	d016      	beq.n	8004b52 <_dtoa_r+0x382>
 8004b24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b28:	4b93      	ldr	r3, [pc, #588]	; (8004d78 <_dtoa_r+0x5a8>)
 8004b2a:	2703      	movs	r7, #3
 8004b2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b30:	f7fb fe5c 	bl	80007ec <__aeabi_ddiv>
 8004b34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b38:	f004 040f 	and.w	r4, r4, #15
 8004b3c:	4e8e      	ldr	r6, [pc, #568]	; (8004d78 <_dtoa_r+0x5a8>)
 8004b3e:	b954      	cbnz	r4, 8004b56 <_dtoa_r+0x386>
 8004b40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004b44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b48:	f7fb fe50 	bl	80007ec <__aeabi_ddiv>
 8004b4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b50:	e029      	b.n	8004ba6 <_dtoa_r+0x3d6>
 8004b52:	2702      	movs	r7, #2
 8004b54:	e7f2      	b.n	8004b3c <_dtoa_r+0x36c>
 8004b56:	07e1      	lsls	r1, r4, #31
 8004b58:	d508      	bpl.n	8004b6c <_dtoa_r+0x39c>
 8004b5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b62:	f7fb fd19 	bl	8000598 <__aeabi_dmul>
 8004b66:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b6a:	3701      	adds	r7, #1
 8004b6c:	1064      	asrs	r4, r4, #1
 8004b6e:	3608      	adds	r6, #8
 8004b70:	e7e5      	b.n	8004b3e <_dtoa_r+0x36e>
 8004b72:	f000 80a5 	beq.w	8004cc0 <_dtoa_r+0x4f0>
 8004b76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b7a:	f1ca 0400 	rsb	r4, sl, #0
 8004b7e:	4b7d      	ldr	r3, [pc, #500]	; (8004d74 <_dtoa_r+0x5a4>)
 8004b80:	f004 020f 	and.w	r2, r4, #15
 8004b84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8c:	f7fb fd04 	bl	8000598 <__aeabi_dmul>
 8004b90:	2702      	movs	r7, #2
 8004b92:	2300      	movs	r3, #0
 8004b94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b98:	4e77      	ldr	r6, [pc, #476]	; (8004d78 <_dtoa_r+0x5a8>)
 8004b9a:	1124      	asrs	r4, r4, #4
 8004b9c:	2c00      	cmp	r4, #0
 8004b9e:	f040 8084 	bne.w	8004caa <_dtoa_r+0x4da>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1d2      	bne.n	8004b4c <_dtoa_r+0x37c>
 8004ba6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 808b 	beq.w	8004cc4 <_dtoa_r+0x4f4>
 8004bae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004bb2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004bb6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004bba:	2200      	movs	r2, #0
 8004bbc:	4b6f      	ldr	r3, [pc, #444]	; (8004d7c <_dtoa_r+0x5ac>)
 8004bbe:	f7fb ff5d 	bl	8000a7c <__aeabi_dcmplt>
 8004bc2:	2800      	cmp	r0, #0
 8004bc4:	d07e      	beq.n	8004cc4 <_dtoa_r+0x4f4>
 8004bc6:	9b08      	ldr	r3, [sp, #32]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d07b      	beq.n	8004cc4 <_dtoa_r+0x4f4>
 8004bcc:	f1b9 0f00 	cmp.w	r9, #0
 8004bd0:	dd38      	ble.n	8004c44 <_dtoa_r+0x474>
 8004bd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	4b69      	ldr	r3, [pc, #420]	; (8004d80 <_dtoa_r+0x5b0>)
 8004bda:	f7fb fcdd 	bl	8000598 <__aeabi_dmul>
 8004bde:	464c      	mov	r4, r9
 8004be0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004be4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004be8:	3701      	adds	r7, #1
 8004bea:	4638      	mov	r0, r7
 8004bec:	f7fb fc6a 	bl	80004c4 <__aeabi_i2d>
 8004bf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bf4:	f7fb fcd0 	bl	8000598 <__aeabi_dmul>
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	4b62      	ldr	r3, [pc, #392]	; (8004d84 <_dtoa_r+0x5b4>)
 8004bfc:	f7fb fb16 	bl	800022c <__adddf3>
 8004c00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004c04:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c08:	9611      	str	r6, [sp, #68]	; 0x44
 8004c0a:	2c00      	cmp	r4, #0
 8004c0c:	d15d      	bne.n	8004cca <_dtoa_r+0x4fa>
 8004c0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c12:	2200      	movs	r2, #0
 8004c14:	4b5c      	ldr	r3, [pc, #368]	; (8004d88 <_dtoa_r+0x5b8>)
 8004c16:	f7fb fb07 	bl	8000228 <__aeabi_dsub>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c22:	4633      	mov	r3, r6
 8004c24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c26:	f7fb ff47 	bl	8000ab8 <__aeabi_dcmpgt>
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	f040 829c 	bne.w	8005168 <_dtoa_r+0x998>
 8004c30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c36:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004c3a:	f7fb ff1f 	bl	8000a7c <__aeabi_dcmplt>
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	f040 8290 	bne.w	8005164 <_dtoa_r+0x994>
 8004c44:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004c48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f2c0 8152 	blt.w	8004ef8 <_dtoa_r+0x728>
 8004c54:	f1ba 0f0e 	cmp.w	sl, #14
 8004c58:	f300 814e 	bgt.w	8004ef8 <_dtoa_r+0x728>
 8004c5c:	4b45      	ldr	r3, [pc, #276]	; (8004d74 <_dtoa_r+0x5a4>)
 8004c5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004c62:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c66:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004c6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f280 80db 	bge.w	8004e28 <_dtoa_r+0x658>
 8004c72:	9b08      	ldr	r3, [sp, #32]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f300 80d7 	bgt.w	8004e28 <_dtoa_r+0x658>
 8004c7a:	f040 8272 	bne.w	8005162 <_dtoa_r+0x992>
 8004c7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c82:	2200      	movs	r2, #0
 8004c84:	4b40      	ldr	r3, [pc, #256]	; (8004d88 <_dtoa_r+0x5b8>)
 8004c86:	f7fb fc87 	bl	8000598 <__aeabi_dmul>
 8004c8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c8e:	f7fb ff09 	bl	8000aa4 <__aeabi_dcmpge>
 8004c92:	9c08      	ldr	r4, [sp, #32]
 8004c94:	4626      	mov	r6, r4
 8004c96:	2800      	cmp	r0, #0
 8004c98:	f040 8248 	bne.w	800512c <_dtoa_r+0x95c>
 8004c9c:	2331      	movs	r3, #49	; 0x31
 8004c9e:	9f03      	ldr	r7, [sp, #12]
 8004ca0:	f10a 0a01 	add.w	sl, sl, #1
 8004ca4:	f807 3b01 	strb.w	r3, [r7], #1
 8004ca8:	e244      	b.n	8005134 <_dtoa_r+0x964>
 8004caa:	07e2      	lsls	r2, r4, #31
 8004cac:	d505      	bpl.n	8004cba <_dtoa_r+0x4ea>
 8004cae:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004cb2:	f7fb fc71 	bl	8000598 <__aeabi_dmul>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	3701      	adds	r7, #1
 8004cba:	1064      	asrs	r4, r4, #1
 8004cbc:	3608      	adds	r6, #8
 8004cbe:	e76d      	b.n	8004b9c <_dtoa_r+0x3cc>
 8004cc0:	2702      	movs	r7, #2
 8004cc2:	e770      	b.n	8004ba6 <_dtoa_r+0x3d6>
 8004cc4:	46d0      	mov	r8, sl
 8004cc6:	9c08      	ldr	r4, [sp, #32]
 8004cc8:	e78f      	b.n	8004bea <_dtoa_r+0x41a>
 8004cca:	9903      	ldr	r1, [sp, #12]
 8004ccc:	4b29      	ldr	r3, [pc, #164]	; (8004d74 <_dtoa_r+0x5a4>)
 8004cce:	4421      	add	r1, r4
 8004cd0:	9112      	str	r1, [sp, #72]	; 0x48
 8004cd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cd4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004cd8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004cdc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004ce0:	2900      	cmp	r1, #0
 8004ce2:	d055      	beq.n	8004d90 <_dtoa_r+0x5c0>
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	4929      	ldr	r1, [pc, #164]	; (8004d8c <_dtoa_r+0x5bc>)
 8004ce8:	f7fb fd80 	bl	80007ec <__aeabi_ddiv>
 8004cec:	463b      	mov	r3, r7
 8004cee:	4632      	mov	r2, r6
 8004cf0:	f7fb fa9a 	bl	8000228 <__aeabi_dsub>
 8004cf4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004cf8:	9f03      	ldr	r7, [sp, #12]
 8004cfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cfe:	f7fb fefb 	bl	8000af8 <__aeabi_d2iz>
 8004d02:	4604      	mov	r4, r0
 8004d04:	f7fb fbde 	bl	80004c4 <__aeabi_i2d>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d10:	f7fb fa8a 	bl	8000228 <__aeabi_dsub>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	3430      	adds	r4, #48	; 0x30
 8004d1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d22:	f807 4b01 	strb.w	r4, [r7], #1
 8004d26:	f7fb fea9 	bl	8000a7c <__aeabi_dcmplt>
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d174      	bne.n	8004e18 <_dtoa_r+0x648>
 8004d2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d32:	2000      	movs	r0, #0
 8004d34:	4911      	ldr	r1, [pc, #68]	; (8004d7c <_dtoa_r+0x5ac>)
 8004d36:	f7fb fa77 	bl	8000228 <__aeabi_dsub>
 8004d3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d3e:	f7fb fe9d 	bl	8000a7c <__aeabi_dcmplt>
 8004d42:	2800      	cmp	r0, #0
 8004d44:	f040 80b7 	bne.w	8004eb6 <_dtoa_r+0x6e6>
 8004d48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d4a:	429f      	cmp	r7, r3
 8004d4c:	f43f af7a 	beq.w	8004c44 <_dtoa_r+0x474>
 8004d50:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d54:	2200      	movs	r2, #0
 8004d56:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <_dtoa_r+0x5b0>)
 8004d58:	f7fb fc1e 	bl	8000598 <__aeabi_dmul>
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d66:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <_dtoa_r+0x5b0>)
 8004d68:	f7fb fc16 	bl	8000598 <__aeabi_dmul>
 8004d6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d70:	e7c3      	b.n	8004cfa <_dtoa_r+0x52a>
 8004d72:	bf00      	nop
 8004d74:	08007490 	.word	0x08007490
 8004d78:	08007468 	.word	0x08007468
 8004d7c:	3ff00000 	.word	0x3ff00000
 8004d80:	40240000 	.word	0x40240000
 8004d84:	401c0000 	.word	0x401c0000
 8004d88:	40140000 	.word	0x40140000
 8004d8c:	3fe00000 	.word	0x3fe00000
 8004d90:	4630      	mov	r0, r6
 8004d92:	4639      	mov	r1, r7
 8004d94:	f7fb fc00 	bl	8000598 <__aeabi_dmul>
 8004d98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d9e:	9c03      	ldr	r4, [sp, #12]
 8004da0:	9314      	str	r3, [sp, #80]	; 0x50
 8004da2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004da6:	f7fb fea7 	bl	8000af8 <__aeabi_d2iz>
 8004daa:	9015      	str	r0, [sp, #84]	; 0x54
 8004dac:	f7fb fb8a 	bl	80004c4 <__aeabi_i2d>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004db8:	f7fb fa36 	bl	8000228 <__aeabi_dsub>
 8004dbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004dbe:	4606      	mov	r6, r0
 8004dc0:	3330      	adds	r3, #48	; 0x30
 8004dc2:	f804 3b01 	strb.w	r3, [r4], #1
 8004dc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004dc8:	460f      	mov	r7, r1
 8004dca:	429c      	cmp	r4, r3
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	d124      	bne.n	8004e1c <_dtoa_r+0x64c>
 8004dd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004dd6:	4bb0      	ldr	r3, [pc, #704]	; (8005098 <_dtoa_r+0x8c8>)
 8004dd8:	f7fb fa28 	bl	800022c <__adddf3>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4630      	mov	r0, r6
 8004de2:	4639      	mov	r1, r7
 8004de4:	f7fb fe68 	bl	8000ab8 <__aeabi_dcmpgt>
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d163      	bne.n	8004eb4 <_dtoa_r+0x6e4>
 8004dec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004df0:	2000      	movs	r0, #0
 8004df2:	49a9      	ldr	r1, [pc, #676]	; (8005098 <_dtoa_r+0x8c8>)
 8004df4:	f7fb fa18 	bl	8000228 <__aeabi_dsub>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	4639      	mov	r1, r7
 8004e00:	f7fb fe3c 	bl	8000a7c <__aeabi_dcmplt>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	f43f af1d 	beq.w	8004c44 <_dtoa_r+0x474>
 8004e0a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004e0c:	1e7b      	subs	r3, r7, #1
 8004e0e:	9314      	str	r3, [sp, #80]	; 0x50
 8004e10:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004e14:	2b30      	cmp	r3, #48	; 0x30
 8004e16:	d0f8      	beq.n	8004e0a <_dtoa_r+0x63a>
 8004e18:	46c2      	mov	sl, r8
 8004e1a:	e03b      	b.n	8004e94 <_dtoa_r+0x6c4>
 8004e1c:	4b9f      	ldr	r3, [pc, #636]	; (800509c <_dtoa_r+0x8cc>)
 8004e1e:	f7fb fbbb 	bl	8000598 <__aeabi_dmul>
 8004e22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e26:	e7bc      	b.n	8004da2 <_dtoa_r+0x5d2>
 8004e28:	9f03      	ldr	r7, [sp, #12]
 8004e2a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004e2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e32:	4640      	mov	r0, r8
 8004e34:	4649      	mov	r1, r9
 8004e36:	f7fb fcd9 	bl	80007ec <__aeabi_ddiv>
 8004e3a:	f7fb fe5d 	bl	8000af8 <__aeabi_d2iz>
 8004e3e:	4604      	mov	r4, r0
 8004e40:	f7fb fb40 	bl	80004c4 <__aeabi_i2d>
 8004e44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e48:	f7fb fba6 	bl	8000598 <__aeabi_dmul>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4640      	mov	r0, r8
 8004e52:	4649      	mov	r1, r9
 8004e54:	f7fb f9e8 	bl	8000228 <__aeabi_dsub>
 8004e58:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004e5c:	f807 6b01 	strb.w	r6, [r7], #1
 8004e60:	9e03      	ldr	r6, [sp, #12]
 8004e62:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004e66:	1bbe      	subs	r6, r7, r6
 8004e68:	45b4      	cmp	ip, r6
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	d136      	bne.n	8004ede <_dtoa_r+0x70e>
 8004e70:	f7fb f9dc 	bl	800022c <__adddf3>
 8004e74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e78:	4680      	mov	r8, r0
 8004e7a:	4689      	mov	r9, r1
 8004e7c:	f7fb fe1c 	bl	8000ab8 <__aeabi_dcmpgt>
 8004e80:	bb58      	cbnz	r0, 8004eda <_dtoa_r+0x70a>
 8004e82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e86:	4640      	mov	r0, r8
 8004e88:	4649      	mov	r1, r9
 8004e8a:	f7fb fded 	bl	8000a68 <__aeabi_dcmpeq>
 8004e8e:	b108      	cbz	r0, 8004e94 <_dtoa_r+0x6c4>
 8004e90:	07e1      	lsls	r1, r4, #31
 8004e92:	d422      	bmi.n	8004eda <_dtoa_r+0x70a>
 8004e94:	4628      	mov	r0, r5
 8004e96:	4659      	mov	r1, fp
 8004e98:	f000 faf0 	bl	800547c <_Bfree>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	703b      	strb	r3, [r7, #0]
 8004ea0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004ea2:	f10a 0001 	add.w	r0, sl, #1
 8004ea6:	6018      	str	r0, [r3, #0]
 8004ea8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f43f acde 	beq.w	800486c <_dtoa_r+0x9c>
 8004eb0:	601f      	str	r7, [r3, #0]
 8004eb2:	e4db      	b.n	800486c <_dtoa_r+0x9c>
 8004eb4:	4627      	mov	r7, r4
 8004eb6:	463b      	mov	r3, r7
 8004eb8:	461f      	mov	r7, r3
 8004eba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004ebe:	2a39      	cmp	r2, #57	; 0x39
 8004ec0:	d107      	bne.n	8004ed2 <_dtoa_r+0x702>
 8004ec2:	9a03      	ldr	r2, [sp, #12]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d1f7      	bne.n	8004eb8 <_dtoa_r+0x6e8>
 8004ec8:	2230      	movs	r2, #48	; 0x30
 8004eca:	9903      	ldr	r1, [sp, #12]
 8004ecc:	f108 0801 	add.w	r8, r8, #1
 8004ed0:	700a      	strb	r2, [r1, #0]
 8004ed2:	781a      	ldrb	r2, [r3, #0]
 8004ed4:	3201      	adds	r2, #1
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	e79e      	b.n	8004e18 <_dtoa_r+0x648>
 8004eda:	46d0      	mov	r8, sl
 8004edc:	e7eb      	b.n	8004eb6 <_dtoa_r+0x6e6>
 8004ede:	2200      	movs	r2, #0
 8004ee0:	4b6e      	ldr	r3, [pc, #440]	; (800509c <_dtoa_r+0x8cc>)
 8004ee2:	f7fb fb59 	bl	8000598 <__aeabi_dmul>
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2300      	movs	r3, #0
 8004eea:	4680      	mov	r8, r0
 8004eec:	4689      	mov	r9, r1
 8004eee:	f7fb fdbb 	bl	8000a68 <__aeabi_dcmpeq>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d09b      	beq.n	8004e2e <_dtoa_r+0x65e>
 8004ef6:	e7cd      	b.n	8004e94 <_dtoa_r+0x6c4>
 8004ef8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004efa:	2a00      	cmp	r2, #0
 8004efc:	f000 80d0 	beq.w	80050a0 <_dtoa_r+0x8d0>
 8004f00:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004f02:	2a01      	cmp	r2, #1
 8004f04:	f300 80ae 	bgt.w	8005064 <_dtoa_r+0x894>
 8004f08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004f0a:	2a00      	cmp	r2, #0
 8004f0c:	f000 80a6 	beq.w	800505c <_dtoa_r+0x88c>
 8004f10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004f14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004f16:	9f06      	ldr	r7, [sp, #24]
 8004f18:	9a06      	ldr	r2, [sp, #24]
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	441a      	add	r2, r3
 8004f1e:	9206      	str	r2, [sp, #24]
 8004f20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f22:	4628      	mov	r0, r5
 8004f24:	441a      	add	r2, r3
 8004f26:	9209      	str	r2, [sp, #36]	; 0x24
 8004f28:	f000 fb5e 	bl	80055e8 <__i2b>
 8004f2c:	4606      	mov	r6, r0
 8004f2e:	2f00      	cmp	r7, #0
 8004f30:	dd0c      	ble.n	8004f4c <_dtoa_r+0x77c>
 8004f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	dd09      	ble.n	8004f4c <_dtoa_r+0x77c>
 8004f38:	42bb      	cmp	r3, r7
 8004f3a:	bfa8      	it	ge
 8004f3c:	463b      	movge	r3, r7
 8004f3e:	9a06      	ldr	r2, [sp, #24]
 8004f40:	1aff      	subs	r7, r7, r3
 8004f42:	1ad2      	subs	r2, r2, r3
 8004f44:	9206      	str	r2, [sp, #24]
 8004f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f4e:	b1f3      	cbz	r3, 8004f8e <_dtoa_r+0x7be>
 8004f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 80a8 	beq.w	80050a8 <_dtoa_r+0x8d8>
 8004f58:	2c00      	cmp	r4, #0
 8004f5a:	dd10      	ble.n	8004f7e <_dtoa_r+0x7ae>
 8004f5c:	4631      	mov	r1, r6
 8004f5e:	4622      	mov	r2, r4
 8004f60:	4628      	mov	r0, r5
 8004f62:	f000 fbff 	bl	8005764 <__pow5mult>
 8004f66:	465a      	mov	r2, fp
 8004f68:	4601      	mov	r1, r0
 8004f6a:	4606      	mov	r6, r0
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	f000 fb51 	bl	8005614 <__multiply>
 8004f72:	4680      	mov	r8, r0
 8004f74:	4659      	mov	r1, fp
 8004f76:	4628      	mov	r0, r5
 8004f78:	f000 fa80 	bl	800547c <_Bfree>
 8004f7c:	46c3      	mov	fp, r8
 8004f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f80:	1b1a      	subs	r2, r3, r4
 8004f82:	d004      	beq.n	8004f8e <_dtoa_r+0x7be>
 8004f84:	4659      	mov	r1, fp
 8004f86:	4628      	mov	r0, r5
 8004f88:	f000 fbec 	bl	8005764 <__pow5mult>
 8004f8c:	4683      	mov	fp, r0
 8004f8e:	2101      	movs	r1, #1
 8004f90:	4628      	mov	r0, r5
 8004f92:	f000 fb29 	bl	80055e8 <__i2b>
 8004f96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f98:	4604      	mov	r4, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f340 8086 	ble.w	80050ac <_dtoa_r+0x8dc>
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	4601      	mov	r1, r0
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	f000 fbdd 	bl	8005764 <__pow5mult>
 8004faa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fac:	4604      	mov	r4, r0
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	dd7f      	ble.n	80050b2 <_dtoa_r+0x8e2>
 8004fb2:	f04f 0800 	mov.w	r8, #0
 8004fb6:	6923      	ldr	r3, [r4, #16]
 8004fb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004fbc:	6918      	ldr	r0, [r3, #16]
 8004fbe:	f000 fac5 	bl	800554c <__hi0bits>
 8004fc2:	f1c0 0020 	rsb	r0, r0, #32
 8004fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fc8:	4418      	add	r0, r3
 8004fca:	f010 001f 	ands.w	r0, r0, #31
 8004fce:	f000 8092 	beq.w	80050f6 <_dtoa_r+0x926>
 8004fd2:	f1c0 0320 	rsb	r3, r0, #32
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	f340 808a 	ble.w	80050f0 <_dtoa_r+0x920>
 8004fdc:	f1c0 001c 	rsb	r0, r0, #28
 8004fe0:	9b06      	ldr	r3, [sp, #24]
 8004fe2:	4407      	add	r7, r0
 8004fe4:	4403      	add	r3, r0
 8004fe6:	9306      	str	r3, [sp, #24]
 8004fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fea:	4403      	add	r3, r0
 8004fec:	9309      	str	r3, [sp, #36]	; 0x24
 8004fee:	9b06      	ldr	r3, [sp, #24]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	dd05      	ble.n	8005000 <_dtoa_r+0x830>
 8004ff4:	4659      	mov	r1, fp
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	f000 fc0d 	bl	8005818 <__lshift>
 8004ffe:	4683      	mov	fp, r0
 8005000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005002:	2b00      	cmp	r3, #0
 8005004:	dd05      	ble.n	8005012 <_dtoa_r+0x842>
 8005006:	4621      	mov	r1, r4
 8005008:	461a      	mov	r2, r3
 800500a:	4628      	mov	r0, r5
 800500c:	f000 fc04 	bl	8005818 <__lshift>
 8005010:	4604      	mov	r4, r0
 8005012:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005014:	2b00      	cmp	r3, #0
 8005016:	d070      	beq.n	80050fa <_dtoa_r+0x92a>
 8005018:	4621      	mov	r1, r4
 800501a:	4658      	mov	r0, fp
 800501c:	f000 fc6c 	bl	80058f8 <__mcmp>
 8005020:	2800      	cmp	r0, #0
 8005022:	da6a      	bge.n	80050fa <_dtoa_r+0x92a>
 8005024:	2300      	movs	r3, #0
 8005026:	4659      	mov	r1, fp
 8005028:	220a      	movs	r2, #10
 800502a:	4628      	mov	r0, r5
 800502c:	f000 fa48 	bl	80054c0 <__multadd>
 8005030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005032:	4683      	mov	fp, r0
 8005034:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 8194 	beq.w	8005366 <_dtoa_r+0xb96>
 800503e:	4631      	mov	r1, r6
 8005040:	2300      	movs	r3, #0
 8005042:	220a      	movs	r2, #10
 8005044:	4628      	mov	r0, r5
 8005046:	f000 fa3b 	bl	80054c0 <__multadd>
 800504a:	f1b9 0f00 	cmp.w	r9, #0
 800504e:	4606      	mov	r6, r0
 8005050:	f300 8093 	bgt.w	800517a <_dtoa_r+0x9aa>
 8005054:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005056:	2b02      	cmp	r3, #2
 8005058:	dc57      	bgt.n	800510a <_dtoa_r+0x93a>
 800505a:	e08e      	b.n	800517a <_dtoa_r+0x9aa>
 800505c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800505e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005062:	e757      	b.n	8004f14 <_dtoa_r+0x744>
 8005064:	9b08      	ldr	r3, [sp, #32]
 8005066:	1e5c      	subs	r4, r3, #1
 8005068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800506a:	42a3      	cmp	r3, r4
 800506c:	bfb7      	itett	lt
 800506e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005070:	1b1c      	subge	r4, r3, r4
 8005072:	1ae2      	sublt	r2, r4, r3
 8005074:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005076:	bfbe      	ittt	lt
 8005078:	940a      	strlt	r4, [sp, #40]	; 0x28
 800507a:	189b      	addlt	r3, r3, r2
 800507c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800507e:	9b08      	ldr	r3, [sp, #32]
 8005080:	bfb8      	it	lt
 8005082:	2400      	movlt	r4, #0
 8005084:	2b00      	cmp	r3, #0
 8005086:	bfbb      	ittet	lt
 8005088:	9b06      	ldrlt	r3, [sp, #24]
 800508a:	9a08      	ldrlt	r2, [sp, #32]
 800508c:	9f06      	ldrge	r7, [sp, #24]
 800508e:	1a9f      	sublt	r7, r3, r2
 8005090:	bfac      	ite	ge
 8005092:	9b08      	ldrge	r3, [sp, #32]
 8005094:	2300      	movlt	r3, #0
 8005096:	e73f      	b.n	8004f18 <_dtoa_r+0x748>
 8005098:	3fe00000 	.word	0x3fe00000
 800509c:	40240000 	.word	0x40240000
 80050a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80050a2:	9f06      	ldr	r7, [sp, #24]
 80050a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80050a6:	e742      	b.n	8004f2e <_dtoa_r+0x75e>
 80050a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050aa:	e76b      	b.n	8004f84 <_dtoa_r+0x7b4>
 80050ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	dc19      	bgt.n	80050e6 <_dtoa_r+0x916>
 80050b2:	9b04      	ldr	r3, [sp, #16]
 80050b4:	b9bb      	cbnz	r3, 80050e6 <_dtoa_r+0x916>
 80050b6:	9b05      	ldr	r3, [sp, #20]
 80050b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050bc:	b99b      	cbnz	r3, 80050e6 <_dtoa_r+0x916>
 80050be:	9b05      	ldr	r3, [sp, #20]
 80050c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050c4:	0d1b      	lsrs	r3, r3, #20
 80050c6:	051b      	lsls	r3, r3, #20
 80050c8:	b183      	cbz	r3, 80050ec <_dtoa_r+0x91c>
 80050ca:	f04f 0801 	mov.w	r8, #1
 80050ce:	9b06      	ldr	r3, [sp, #24]
 80050d0:	3301      	adds	r3, #1
 80050d2:	9306      	str	r3, [sp, #24]
 80050d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050d6:	3301      	adds	r3, #1
 80050d8:	9309      	str	r3, [sp, #36]	; 0x24
 80050da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f47f af6a 	bne.w	8004fb6 <_dtoa_r+0x7e6>
 80050e2:	2001      	movs	r0, #1
 80050e4:	e76f      	b.n	8004fc6 <_dtoa_r+0x7f6>
 80050e6:	f04f 0800 	mov.w	r8, #0
 80050ea:	e7f6      	b.n	80050da <_dtoa_r+0x90a>
 80050ec:	4698      	mov	r8, r3
 80050ee:	e7f4      	b.n	80050da <_dtoa_r+0x90a>
 80050f0:	f43f af7d 	beq.w	8004fee <_dtoa_r+0x81e>
 80050f4:	4618      	mov	r0, r3
 80050f6:	301c      	adds	r0, #28
 80050f8:	e772      	b.n	8004fe0 <_dtoa_r+0x810>
 80050fa:	9b08      	ldr	r3, [sp, #32]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	dc36      	bgt.n	800516e <_dtoa_r+0x99e>
 8005100:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005102:	2b02      	cmp	r3, #2
 8005104:	dd33      	ble.n	800516e <_dtoa_r+0x99e>
 8005106:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800510a:	f1b9 0f00 	cmp.w	r9, #0
 800510e:	d10d      	bne.n	800512c <_dtoa_r+0x95c>
 8005110:	4621      	mov	r1, r4
 8005112:	464b      	mov	r3, r9
 8005114:	2205      	movs	r2, #5
 8005116:	4628      	mov	r0, r5
 8005118:	f000 f9d2 	bl	80054c0 <__multadd>
 800511c:	4601      	mov	r1, r0
 800511e:	4604      	mov	r4, r0
 8005120:	4658      	mov	r0, fp
 8005122:	f000 fbe9 	bl	80058f8 <__mcmp>
 8005126:	2800      	cmp	r0, #0
 8005128:	f73f adb8 	bgt.w	8004c9c <_dtoa_r+0x4cc>
 800512c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800512e:	9f03      	ldr	r7, [sp, #12]
 8005130:	ea6f 0a03 	mvn.w	sl, r3
 8005134:	f04f 0800 	mov.w	r8, #0
 8005138:	4621      	mov	r1, r4
 800513a:	4628      	mov	r0, r5
 800513c:	f000 f99e 	bl	800547c <_Bfree>
 8005140:	2e00      	cmp	r6, #0
 8005142:	f43f aea7 	beq.w	8004e94 <_dtoa_r+0x6c4>
 8005146:	f1b8 0f00 	cmp.w	r8, #0
 800514a:	d005      	beq.n	8005158 <_dtoa_r+0x988>
 800514c:	45b0      	cmp	r8, r6
 800514e:	d003      	beq.n	8005158 <_dtoa_r+0x988>
 8005150:	4641      	mov	r1, r8
 8005152:	4628      	mov	r0, r5
 8005154:	f000 f992 	bl	800547c <_Bfree>
 8005158:	4631      	mov	r1, r6
 800515a:	4628      	mov	r0, r5
 800515c:	f000 f98e 	bl	800547c <_Bfree>
 8005160:	e698      	b.n	8004e94 <_dtoa_r+0x6c4>
 8005162:	2400      	movs	r4, #0
 8005164:	4626      	mov	r6, r4
 8005166:	e7e1      	b.n	800512c <_dtoa_r+0x95c>
 8005168:	46c2      	mov	sl, r8
 800516a:	4626      	mov	r6, r4
 800516c:	e596      	b.n	8004c9c <_dtoa_r+0x4cc>
 800516e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005170:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 80fd 	beq.w	8005374 <_dtoa_r+0xba4>
 800517a:	2f00      	cmp	r7, #0
 800517c:	dd05      	ble.n	800518a <_dtoa_r+0x9ba>
 800517e:	4631      	mov	r1, r6
 8005180:	463a      	mov	r2, r7
 8005182:	4628      	mov	r0, r5
 8005184:	f000 fb48 	bl	8005818 <__lshift>
 8005188:	4606      	mov	r6, r0
 800518a:	f1b8 0f00 	cmp.w	r8, #0
 800518e:	d05c      	beq.n	800524a <_dtoa_r+0xa7a>
 8005190:	4628      	mov	r0, r5
 8005192:	6871      	ldr	r1, [r6, #4]
 8005194:	f000 f932 	bl	80053fc <_Balloc>
 8005198:	4607      	mov	r7, r0
 800519a:	b928      	cbnz	r0, 80051a8 <_dtoa_r+0x9d8>
 800519c:	4602      	mov	r2, r0
 800519e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80051a2:	4b7f      	ldr	r3, [pc, #508]	; (80053a0 <_dtoa_r+0xbd0>)
 80051a4:	f7ff bb28 	b.w	80047f8 <_dtoa_r+0x28>
 80051a8:	6932      	ldr	r2, [r6, #16]
 80051aa:	f106 010c 	add.w	r1, r6, #12
 80051ae:	3202      	adds	r2, #2
 80051b0:	0092      	lsls	r2, r2, #2
 80051b2:	300c      	adds	r0, #12
 80051b4:	f000 f914 	bl	80053e0 <memcpy>
 80051b8:	2201      	movs	r2, #1
 80051ba:	4639      	mov	r1, r7
 80051bc:	4628      	mov	r0, r5
 80051be:	f000 fb2b 	bl	8005818 <__lshift>
 80051c2:	46b0      	mov	r8, r6
 80051c4:	4606      	mov	r6, r0
 80051c6:	9b03      	ldr	r3, [sp, #12]
 80051c8:	3301      	adds	r3, #1
 80051ca:	9308      	str	r3, [sp, #32]
 80051cc:	9b03      	ldr	r3, [sp, #12]
 80051ce:	444b      	add	r3, r9
 80051d0:	930a      	str	r3, [sp, #40]	; 0x28
 80051d2:	9b04      	ldr	r3, [sp, #16]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	9309      	str	r3, [sp, #36]	; 0x24
 80051da:	9b08      	ldr	r3, [sp, #32]
 80051dc:	4621      	mov	r1, r4
 80051de:	3b01      	subs	r3, #1
 80051e0:	4658      	mov	r0, fp
 80051e2:	9304      	str	r3, [sp, #16]
 80051e4:	f7ff fa68 	bl	80046b8 <quorem>
 80051e8:	4603      	mov	r3, r0
 80051ea:	4641      	mov	r1, r8
 80051ec:	3330      	adds	r3, #48	; 0x30
 80051ee:	9006      	str	r0, [sp, #24]
 80051f0:	4658      	mov	r0, fp
 80051f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80051f4:	f000 fb80 	bl	80058f8 <__mcmp>
 80051f8:	4632      	mov	r2, r6
 80051fa:	4681      	mov	r9, r0
 80051fc:	4621      	mov	r1, r4
 80051fe:	4628      	mov	r0, r5
 8005200:	f000 fb96 	bl	8005930 <__mdiff>
 8005204:	68c2      	ldr	r2, [r0, #12]
 8005206:	4607      	mov	r7, r0
 8005208:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800520a:	bb02      	cbnz	r2, 800524e <_dtoa_r+0xa7e>
 800520c:	4601      	mov	r1, r0
 800520e:	4658      	mov	r0, fp
 8005210:	f000 fb72 	bl	80058f8 <__mcmp>
 8005214:	4602      	mov	r2, r0
 8005216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005218:	4639      	mov	r1, r7
 800521a:	4628      	mov	r0, r5
 800521c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005220:	f000 f92c 	bl	800547c <_Bfree>
 8005224:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005226:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005228:	9f08      	ldr	r7, [sp, #32]
 800522a:	ea43 0102 	orr.w	r1, r3, r2
 800522e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005230:	430b      	orrs	r3, r1
 8005232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005234:	d10d      	bne.n	8005252 <_dtoa_r+0xa82>
 8005236:	2b39      	cmp	r3, #57	; 0x39
 8005238:	d029      	beq.n	800528e <_dtoa_r+0xabe>
 800523a:	f1b9 0f00 	cmp.w	r9, #0
 800523e:	dd01      	ble.n	8005244 <_dtoa_r+0xa74>
 8005240:	9b06      	ldr	r3, [sp, #24]
 8005242:	3331      	adds	r3, #49	; 0x31
 8005244:	9a04      	ldr	r2, [sp, #16]
 8005246:	7013      	strb	r3, [r2, #0]
 8005248:	e776      	b.n	8005138 <_dtoa_r+0x968>
 800524a:	4630      	mov	r0, r6
 800524c:	e7b9      	b.n	80051c2 <_dtoa_r+0x9f2>
 800524e:	2201      	movs	r2, #1
 8005250:	e7e2      	b.n	8005218 <_dtoa_r+0xa48>
 8005252:	f1b9 0f00 	cmp.w	r9, #0
 8005256:	db06      	blt.n	8005266 <_dtoa_r+0xa96>
 8005258:	9922      	ldr	r1, [sp, #136]	; 0x88
 800525a:	ea41 0909 	orr.w	r9, r1, r9
 800525e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005260:	ea59 0101 	orrs.w	r1, r9, r1
 8005264:	d120      	bne.n	80052a8 <_dtoa_r+0xad8>
 8005266:	2a00      	cmp	r2, #0
 8005268:	ddec      	ble.n	8005244 <_dtoa_r+0xa74>
 800526a:	4659      	mov	r1, fp
 800526c:	2201      	movs	r2, #1
 800526e:	4628      	mov	r0, r5
 8005270:	9308      	str	r3, [sp, #32]
 8005272:	f000 fad1 	bl	8005818 <__lshift>
 8005276:	4621      	mov	r1, r4
 8005278:	4683      	mov	fp, r0
 800527a:	f000 fb3d 	bl	80058f8 <__mcmp>
 800527e:	2800      	cmp	r0, #0
 8005280:	9b08      	ldr	r3, [sp, #32]
 8005282:	dc02      	bgt.n	800528a <_dtoa_r+0xaba>
 8005284:	d1de      	bne.n	8005244 <_dtoa_r+0xa74>
 8005286:	07da      	lsls	r2, r3, #31
 8005288:	d5dc      	bpl.n	8005244 <_dtoa_r+0xa74>
 800528a:	2b39      	cmp	r3, #57	; 0x39
 800528c:	d1d8      	bne.n	8005240 <_dtoa_r+0xa70>
 800528e:	2339      	movs	r3, #57	; 0x39
 8005290:	9a04      	ldr	r2, [sp, #16]
 8005292:	7013      	strb	r3, [r2, #0]
 8005294:	463b      	mov	r3, r7
 8005296:	461f      	mov	r7, r3
 8005298:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800529c:	3b01      	subs	r3, #1
 800529e:	2a39      	cmp	r2, #57	; 0x39
 80052a0:	d050      	beq.n	8005344 <_dtoa_r+0xb74>
 80052a2:	3201      	adds	r2, #1
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	e747      	b.n	8005138 <_dtoa_r+0x968>
 80052a8:	2a00      	cmp	r2, #0
 80052aa:	dd03      	ble.n	80052b4 <_dtoa_r+0xae4>
 80052ac:	2b39      	cmp	r3, #57	; 0x39
 80052ae:	d0ee      	beq.n	800528e <_dtoa_r+0xabe>
 80052b0:	3301      	adds	r3, #1
 80052b2:	e7c7      	b.n	8005244 <_dtoa_r+0xa74>
 80052b4:	9a08      	ldr	r2, [sp, #32]
 80052b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80052b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80052bc:	428a      	cmp	r2, r1
 80052be:	d02a      	beq.n	8005316 <_dtoa_r+0xb46>
 80052c0:	4659      	mov	r1, fp
 80052c2:	2300      	movs	r3, #0
 80052c4:	220a      	movs	r2, #10
 80052c6:	4628      	mov	r0, r5
 80052c8:	f000 f8fa 	bl	80054c0 <__multadd>
 80052cc:	45b0      	cmp	r8, r6
 80052ce:	4683      	mov	fp, r0
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	f04f 020a 	mov.w	r2, #10
 80052d8:	4641      	mov	r1, r8
 80052da:	4628      	mov	r0, r5
 80052dc:	d107      	bne.n	80052ee <_dtoa_r+0xb1e>
 80052de:	f000 f8ef 	bl	80054c0 <__multadd>
 80052e2:	4680      	mov	r8, r0
 80052e4:	4606      	mov	r6, r0
 80052e6:	9b08      	ldr	r3, [sp, #32]
 80052e8:	3301      	adds	r3, #1
 80052ea:	9308      	str	r3, [sp, #32]
 80052ec:	e775      	b.n	80051da <_dtoa_r+0xa0a>
 80052ee:	f000 f8e7 	bl	80054c0 <__multadd>
 80052f2:	4631      	mov	r1, r6
 80052f4:	4680      	mov	r8, r0
 80052f6:	2300      	movs	r3, #0
 80052f8:	220a      	movs	r2, #10
 80052fa:	4628      	mov	r0, r5
 80052fc:	f000 f8e0 	bl	80054c0 <__multadd>
 8005300:	4606      	mov	r6, r0
 8005302:	e7f0      	b.n	80052e6 <_dtoa_r+0xb16>
 8005304:	f1b9 0f00 	cmp.w	r9, #0
 8005308:	bfcc      	ite	gt
 800530a:	464f      	movgt	r7, r9
 800530c:	2701      	movle	r7, #1
 800530e:	f04f 0800 	mov.w	r8, #0
 8005312:	9a03      	ldr	r2, [sp, #12]
 8005314:	4417      	add	r7, r2
 8005316:	4659      	mov	r1, fp
 8005318:	2201      	movs	r2, #1
 800531a:	4628      	mov	r0, r5
 800531c:	9308      	str	r3, [sp, #32]
 800531e:	f000 fa7b 	bl	8005818 <__lshift>
 8005322:	4621      	mov	r1, r4
 8005324:	4683      	mov	fp, r0
 8005326:	f000 fae7 	bl	80058f8 <__mcmp>
 800532a:	2800      	cmp	r0, #0
 800532c:	dcb2      	bgt.n	8005294 <_dtoa_r+0xac4>
 800532e:	d102      	bne.n	8005336 <_dtoa_r+0xb66>
 8005330:	9b08      	ldr	r3, [sp, #32]
 8005332:	07db      	lsls	r3, r3, #31
 8005334:	d4ae      	bmi.n	8005294 <_dtoa_r+0xac4>
 8005336:	463b      	mov	r3, r7
 8005338:	461f      	mov	r7, r3
 800533a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800533e:	2a30      	cmp	r2, #48	; 0x30
 8005340:	d0fa      	beq.n	8005338 <_dtoa_r+0xb68>
 8005342:	e6f9      	b.n	8005138 <_dtoa_r+0x968>
 8005344:	9a03      	ldr	r2, [sp, #12]
 8005346:	429a      	cmp	r2, r3
 8005348:	d1a5      	bne.n	8005296 <_dtoa_r+0xac6>
 800534a:	2331      	movs	r3, #49	; 0x31
 800534c:	f10a 0a01 	add.w	sl, sl, #1
 8005350:	e779      	b.n	8005246 <_dtoa_r+0xa76>
 8005352:	4b14      	ldr	r3, [pc, #80]	; (80053a4 <_dtoa_r+0xbd4>)
 8005354:	f7ff baa8 	b.w	80048a8 <_dtoa_r+0xd8>
 8005358:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800535a:	2b00      	cmp	r3, #0
 800535c:	f47f aa81 	bne.w	8004862 <_dtoa_r+0x92>
 8005360:	4b11      	ldr	r3, [pc, #68]	; (80053a8 <_dtoa_r+0xbd8>)
 8005362:	f7ff baa1 	b.w	80048a8 <_dtoa_r+0xd8>
 8005366:	f1b9 0f00 	cmp.w	r9, #0
 800536a:	dc03      	bgt.n	8005374 <_dtoa_r+0xba4>
 800536c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800536e:	2b02      	cmp	r3, #2
 8005370:	f73f aecb 	bgt.w	800510a <_dtoa_r+0x93a>
 8005374:	9f03      	ldr	r7, [sp, #12]
 8005376:	4621      	mov	r1, r4
 8005378:	4658      	mov	r0, fp
 800537a:	f7ff f99d 	bl	80046b8 <quorem>
 800537e:	9a03      	ldr	r2, [sp, #12]
 8005380:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005384:	f807 3b01 	strb.w	r3, [r7], #1
 8005388:	1aba      	subs	r2, r7, r2
 800538a:	4591      	cmp	r9, r2
 800538c:	ddba      	ble.n	8005304 <_dtoa_r+0xb34>
 800538e:	4659      	mov	r1, fp
 8005390:	2300      	movs	r3, #0
 8005392:	220a      	movs	r2, #10
 8005394:	4628      	mov	r0, r5
 8005396:	f000 f893 	bl	80054c0 <__multadd>
 800539a:	4683      	mov	fp, r0
 800539c:	e7eb      	b.n	8005376 <_dtoa_r+0xba6>
 800539e:	bf00      	nop
 80053a0:	080073fb 	.word	0x080073fb
 80053a4:	08007358 	.word	0x08007358
 80053a8:	0800737c 	.word	0x0800737c

080053ac <_localeconv_r>:
 80053ac:	4800      	ldr	r0, [pc, #0]	; (80053b0 <_localeconv_r+0x4>)
 80053ae:	4770      	bx	lr
 80053b0:	20000198 	.word	0x20000198

080053b4 <malloc>:
 80053b4:	4b02      	ldr	r3, [pc, #8]	; (80053c0 <malloc+0xc>)
 80053b6:	4601      	mov	r1, r0
 80053b8:	6818      	ldr	r0, [r3, #0]
 80053ba:	f000 bc1d 	b.w	8005bf8 <_malloc_r>
 80053be:	bf00      	nop
 80053c0:	20000044 	.word	0x20000044

080053c4 <memchr>:
 80053c4:	4603      	mov	r3, r0
 80053c6:	b510      	push	{r4, lr}
 80053c8:	b2c9      	uxtb	r1, r1
 80053ca:	4402      	add	r2, r0
 80053cc:	4293      	cmp	r3, r2
 80053ce:	4618      	mov	r0, r3
 80053d0:	d101      	bne.n	80053d6 <memchr+0x12>
 80053d2:	2000      	movs	r0, #0
 80053d4:	e003      	b.n	80053de <memchr+0x1a>
 80053d6:	7804      	ldrb	r4, [r0, #0]
 80053d8:	3301      	adds	r3, #1
 80053da:	428c      	cmp	r4, r1
 80053dc:	d1f6      	bne.n	80053cc <memchr+0x8>
 80053de:	bd10      	pop	{r4, pc}

080053e0 <memcpy>:
 80053e0:	440a      	add	r2, r1
 80053e2:	4291      	cmp	r1, r2
 80053e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80053e8:	d100      	bne.n	80053ec <memcpy+0xc>
 80053ea:	4770      	bx	lr
 80053ec:	b510      	push	{r4, lr}
 80053ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053f2:	4291      	cmp	r1, r2
 80053f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053f8:	d1f9      	bne.n	80053ee <memcpy+0xe>
 80053fa:	bd10      	pop	{r4, pc}

080053fc <_Balloc>:
 80053fc:	b570      	push	{r4, r5, r6, lr}
 80053fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005400:	4604      	mov	r4, r0
 8005402:	460d      	mov	r5, r1
 8005404:	b976      	cbnz	r6, 8005424 <_Balloc+0x28>
 8005406:	2010      	movs	r0, #16
 8005408:	f7ff ffd4 	bl	80053b4 <malloc>
 800540c:	4602      	mov	r2, r0
 800540e:	6260      	str	r0, [r4, #36]	; 0x24
 8005410:	b920      	cbnz	r0, 800541c <_Balloc+0x20>
 8005412:	2166      	movs	r1, #102	; 0x66
 8005414:	4b17      	ldr	r3, [pc, #92]	; (8005474 <_Balloc+0x78>)
 8005416:	4818      	ldr	r0, [pc, #96]	; (8005478 <_Balloc+0x7c>)
 8005418:	f000 fdce 	bl	8005fb8 <__assert_func>
 800541c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005420:	6006      	str	r6, [r0, #0]
 8005422:	60c6      	str	r6, [r0, #12]
 8005424:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005426:	68f3      	ldr	r3, [r6, #12]
 8005428:	b183      	cbz	r3, 800544c <_Balloc+0x50>
 800542a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005432:	b9b8      	cbnz	r0, 8005464 <_Balloc+0x68>
 8005434:	2101      	movs	r1, #1
 8005436:	fa01 f605 	lsl.w	r6, r1, r5
 800543a:	1d72      	adds	r2, r6, #5
 800543c:	4620      	mov	r0, r4
 800543e:	0092      	lsls	r2, r2, #2
 8005440:	f000 fb5e 	bl	8005b00 <_calloc_r>
 8005444:	b160      	cbz	r0, 8005460 <_Balloc+0x64>
 8005446:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800544a:	e00e      	b.n	800546a <_Balloc+0x6e>
 800544c:	2221      	movs	r2, #33	; 0x21
 800544e:	2104      	movs	r1, #4
 8005450:	4620      	mov	r0, r4
 8005452:	f000 fb55 	bl	8005b00 <_calloc_r>
 8005456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005458:	60f0      	str	r0, [r6, #12]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1e4      	bne.n	800542a <_Balloc+0x2e>
 8005460:	2000      	movs	r0, #0
 8005462:	bd70      	pop	{r4, r5, r6, pc}
 8005464:	6802      	ldr	r2, [r0, #0]
 8005466:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800546a:	2300      	movs	r3, #0
 800546c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005470:	e7f7      	b.n	8005462 <_Balloc+0x66>
 8005472:	bf00      	nop
 8005474:	08007389 	.word	0x08007389
 8005478:	0800740c 	.word	0x0800740c

0800547c <_Bfree>:
 800547c:	b570      	push	{r4, r5, r6, lr}
 800547e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005480:	4605      	mov	r5, r0
 8005482:	460c      	mov	r4, r1
 8005484:	b976      	cbnz	r6, 80054a4 <_Bfree+0x28>
 8005486:	2010      	movs	r0, #16
 8005488:	f7ff ff94 	bl	80053b4 <malloc>
 800548c:	4602      	mov	r2, r0
 800548e:	6268      	str	r0, [r5, #36]	; 0x24
 8005490:	b920      	cbnz	r0, 800549c <_Bfree+0x20>
 8005492:	218a      	movs	r1, #138	; 0x8a
 8005494:	4b08      	ldr	r3, [pc, #32]	; (80054b8 <_Bfree+0x3c>)
 8005496:	4809      	ldr	r0, [pc, #36]	; (80054bc <_Bfree+0x40>)
 8005498:	f000 fd8e 	bl	8005fb8 <__assert_func>
 800549c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054a0:	6006      	str	r6, [r0, #0]
 80054a2:	60c6      	str	r6, [r0, #12]
 80054a4:	b13c      	cbz	r4, 80054b6 <_Bfree+0x3a>
 80054a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80054a8:	6862      	ldr	r2, [r4, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054b0:	6021      	str	r1, [r4, #0]
 80054b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80054b6:	bd70      	pop	{r4, r5, r6, pc}
 80054b8:	08007389 	.word	0x08007389
 80054bc:	0800740c 	.word	0x0800740c

080054c0 <__multadd>:
 80054c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054c4:	4607      	mov	r7, r0
 80054c6:	460c      	mov	r4, r1
 80054c8:	461e      	mov	r6, r3
 80054ca:	2000      	movs	r0, #0
 80054cc:	690d      	ldr	r5, [r1, #16]
 80054ce:	f101 0c14 	add.w	ip, r1, #20
 80054d2:	f8dc 3000 	ldr.w	r3, [ip]
 80054d6:	3001      	adds	r0, #1
 80054d8:	b299      	uxth	r1, r3
 80054da:	fb02 6101 	mla	r1, r2, r1, r6
 80054de:	0c1e      	lsrs	r6, r3, #16
 80054e0:	0c0b      	lsrs	r3, r1, #16
 80054e2:	fb02 3306 	mla	r3, r2, r6, r3
 80054e6:	b289      	uxth	r1, r1
 80054e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80054ec:	4285      	cmp	r5, r0
 80054ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80054f2:	f84c 1b04 	str.w	r1, [ip], #4
 80054f6:	dcec      	bgt.n	80054d2 <__multadd+0x12>
 80054f8:	b30e      	cbz	r6, 800553e <__multadd+0x7e>
 80054fa:	68a3      	ldr	r3, [r4, #8]
 80054fc:	42ab      	cmp	r3, r5
 80054fe:	dc19      	bgt.n	8005534 <__multadd+0x74>
 8005500:	6861      	ldr	r1, [r4, #4]
 8005502:	4638      	mov	r0, r7
 8005504:	3101      	adds	r1, #1
 8005506:	f7ff ff79 	bl	80053fc <_Balloc>
 800550a:	4680      	mov	r8, r0
 800550c:	b928      	cbnz	r0, 800551a <__multadd+0x5a>
 800550e:	4602      	mov	r2, r0
 8005510:	21b5      	movs	r1, #181	; 0xb5
 8005512:	4b0c      	ldr	r3, [pc, #48]	; (8005544 <__multadd+0x84>)
 8005514:	480c      	ldr	r0, [pc, #48]	; (8005548 <__multadd+0x88>)
 8005516:	f000 fd4f 	bl	8005fb8 <__assert_func>
 800551a:	6922      	ldr	r2, [r4, #16]
 800551c:	f104 010c 	add.w	r1, r4, #12
 8005520:	3202      	adds	r2, #2
 8005522:	0092      	lsls	r2, r2, #2
 8005524:	300c      	adds	r0, #12
 8005526:	f7ff ff5b 	bl	80053e0 <memcpy>
 800552a:	4621      	mov	r1, r4
 800552c:	4638      	mov	r0, r7
 800552e:	f7ff ffa5 	bl	800547c <_Bfree>
 8005532:	4644      	mov	r4, r8
 8005534:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005538:	3501      	adds	r5, #1
 800553a:	615e      	str	r6, [r3, #20]
 800553c:	6125      	str	r5, [r4, #16]
 800553e:	4620      	mov	r0, r4
 8005540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005544:	080073fb 	.word	0x080073fb
 8005548:	0800740c 	.word	0x0800740c

0800554c <__hi0bits>:
 800554c:	0c02      	lsrs	r2, r0, #16
 800554e:	0412      	lsls	r2, r2, #16
 8005550:	4603      	mov	r3, r0
 8005552:	b9ca      	cbnz	r2, 8005588 <__hi0bits+0x3c>
 8005554:	0403      	lsls	r3, r0, #16
 8005556:	2010      	movs	r0, #16
 8005558:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800555c:	bf04      	itt	eq
 800555e:	021b      	lsleq	r3, r3, #8
 8005560:	3008      	addeq	r0, #8
 8005562:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005566:	bf04      	itt	eq
 8005568:	011b      	lsleq	r3, r3, #4
 800556a:	3004      	addeq	r0, #4
 800556c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005570:	bf04      	itt	eq
 8005572:	009b      	lsleq	r3, r3, #2
 8005574:	3002      	addeq	r0, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	db05      	blt.n	8005586 <__hi0bits+0x3a>
 800557a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800557e:	f100 0001 	add.w	r0, r0, #1
 8005582:	bf08      	it	eq
 8005584:	2020      	moveq	r0, #32
 8005586:	4770      	bx	lr
 8005588:	2000      	movs	r0, #0
 800558a:	e7e5      	b.n	8005558 <__hi0bits+0xc>

0800558c <__lo0bits>:
 800558c:	6803      	ldr	r3, [r0, #0]
 800558e:	4602      	mov	r2, r0
 8005590:	f013 0007 	ands.w	r0, r3, #7
 8005594:	d00b      	beq.n	80055ae <__lo0bits+0x22>
 8005596:	07d9      	lsls	r1, r3, #31
 8005598:	d421      	bmi.n	80055de <__lo0bits+0x52>
 800559a:	0798      	lsls	r0, r3, #30
 800559c:	bf49      	itett	mi
 800559e:	085b      	lsrmi	r3, r3, #1
 80055a0:	089b      	lsrpl	r3, r3, #2
 80055a2:	2001      	movmi	r0, #1
 80055a4:	6013      	strmi	r3, [r2, #0]
 80055a6:	bf5c      	itt	pl
 80055a8:	2002      	movpl	r0, #2
 80055aa:	6013      	strpl	r3, [r2, #0]
 80055ac:	4770      	bx	lr
 80055ae:	b299      	uxth	r1, r3
 80055b0:	b909      	cbnz	r1, 80055b6 <__lo0bits+0x2a>
 80055b2:	2010      	movs	r0, #16
 80055b4:	0c1b      	lsrs	r3, r3, #16
 80055b6:	b2d9      	uxtb	r1, r3
 80055b8:	b909      	cbnz	r1, 80055be <__lo0bits+0x32>
 80055ba:	3008      	adds	r0, #8
 80055bc:	0a1b      	lsrs	r3, r3, #8
 80055be:	0719      	lsls	r1, r3, #28
 80055c0:	bf04      	itt	eq
 80055c2:	091b      	lsreq	r3, r3, #4
 80055c4:	3004      	addeq	r0, #4
 80055c6:	0799      	lsls	r1, r3, #30
 80055c8:	bf04      	itt	eq
 80055ca:	089b      	lsreq	r3, r3, #2
 80055cc:	3002      	addeq	r0, #2
 80055ce:	07d9      	lsls	r1, r3, #31
 80055d0:	d403      	bmi.n	80055da <__lo0bits+0x4e>
 80055d2:	085b      	lsrs	r3, r3, #1
 80055d4:	f100 0001 	add.w	r0, r0, #1
 80055d8:	d003      	beq.n	80055e2 <__lo0bits+0x56>
 80055da:	6013      	str	r3, [r2, #0]
 80055dc:	4770      	bx	lr
 80055de:	2000      	movs	r0, #0
 80055e0:	4770      	bx	lr
 80055e2:	2020      	movs	r0, #32
 80055e4:	4770      	bx	lr
	...

080055e8 <__i2b>:
 80055e8:	b510      	push	{r4, lr}
 80055ea:	460c      	mov	r4, r1
 80055ec:	2101      	movs	r1, #1
 80055ee:	f7ff ff05 	bl	80053fc <_Balloc>
 80055f2:	4602      	mov	r2, r0
 80055f4:	b928      	cbnz	r0, 8005602 <__i2b+0x1a>
 80055f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80055fa:	4b04      	ldr	r3, [pc, #16]	; (800560c <__i2b+0x24>)
 80055fc:	4804      	ldr	r0, [pc, #16]	; (8005610 <__i2b+0x28>)
 80055fe:	f000 fcdb 	bl	8005fb8 <__assert_func>
 8005602:	2301      	movs	r3, #1
 8005604:	6144      	str	r4, [r0, #20]
 8005606:	6103      	str	r3, [r0, #16]
 8005608:	bd10      	pop	{r4, pc}
 800560a:	bf00      	nop
 800560c:	080073fb 	.word	0x080073fb
 8005610:	0800740c 	.word	0x0800740c

08005614 <__multiply>:
 8005614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005618:	4691      	mov	r9, r2
 800561a:	690a      	ldr	r2, [r1, #16]
 800561c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005620:	460c      	mov	r4, r1
 8005622:	429a      	cmp	r2, r3
 8005624:	bfbe      	ittt	lt
 8005626:	460b      	movlt	r3, r1
 8005628:	464c      	movlt	r4, r9
 800562a:	4699      	movlt	r9, r3
 800562c:	6927      	ldr	r7, [r4, #16]
 800562e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005632:	68a3      	ldr	r3, [r4, #8]
 8005634:	6861      	ldr	r1, [r4, #4]
 8005636:	eb07 060a 	add.w	r6, r7, sl
 800563a:	42b3      	cmp	r3, r6
 800563c:	b085      	sub	sp, #20
 800563e:	bfb8      	it	lt
 8005640:	3101      	addlt	r1, #1
 8005642:	f7ff fedb 	bl	80053fc <_Balloc>
 8005646:	b930      	cbnz	r0, 8005656 <__multiply+0x42>
 8005648:	4602      	mov	r2, r0
 800564a:	f240 115d 	movw	r1, #349	; 0x15d
 800564e:	4b43      	ldr	r3, [pc, #268]	; (800575c <__multiply+0x148>)
 8005650:	4843      	ldr	r0, [pc, #268]	; (8005760 <__multiply+0x14c>)
 8005652:	f000 fcb1 	bl	8005fb8 <__assert_func>
 8005656:	f100 0514 	add.w	r5, r0, #20
 800565a:	462b      	mov	r3, r5
 800565c:	2200      	movs	r2, #0
 800565e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005662:	4543      	cmp	r3, r8
 8005664:	d321      	bcc.n	80056aa <__multiply+0x96>
 8005666:	f104 0314 	add.w	r3, r4, #20
 800566a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800566e:	f109 0314 	add.w	r3, r9, #20
 8005672:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005676:	9202      	str	r2, [sp, #8]
 8005678:	1b3a      	subs	r2, r7, r4
 800567a:	3a15      	subs	r2, #21
 800567c:	f022 0203 	bic.w	r2, r2, #3
 8005680:	3204      	adds	r2, #4
 8005682:	f104 0115 	add.w	r1, r4, #21
 8005686:	428f      	cmp	r7, r1
 8005688:	bf38      	it	cc
 800568a:	2204      	movcc	r2, #4
 800568c:	9201      	str	r2, [sp, #4]
 800568e:	9a02      	ldr	r2, [sp, #8]
 8005690:	9303      	str	r3, [sp, #12]
 8005692:	429a      	cmp	r2, r3
 8005694:	d80c      	bhi.n	80056b0 <__multiply+0x9c>
 8005696:	2e00      	cmp	r6, #0
 8005698:	dd03      	ble.n	80056a2 <__multiply+0x8e>
 800569a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d059      	beq.n	8005756 <__multiply+0x142>
 80056a2:	6106      	str	r6, [r0, #16]
 80056a4:	b005      	add	sp, #20
 80056a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056aa:	f843 2b04 	str.w	r2, [r3], #4
 80056ae:	e7d8      	b.n	8005662 <__multiply+0x4e>
 80056b0:	f8b3 a000 	ldrh.w	sl, [r3]
 80056b4:	f1ba 0f00 	cmp.w	sl, #0
 80056b8:	d023      	beq.n	8005702 <__multiply+0xee>
 80056ba:	46a9      	mov	r9, r5
 80056bc:	f04f 0c00 	mov.w	ip, #0
 80056c0:	f104 0e14 	add.w	lr, r4, #20
 80056c4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80056c8:	f8d9 1000 	ldr.w	r1, [r9]
 80056cc:	fa1f fb82 	uxth.w	fp, r2
 80056d0:	b289      	uxth	r1, r1
 80056d2:	fb0a 110b 	mla	r1, sl, fp, r1
 80056d6:	4461      	add	r1, ip
 80056d8:	f8d9 c000 	ldr.w	ip, [r9]
 80056dc:	0c12      	lsrs	r2, r2, #16
 80056de:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80056e2:	fb0a c202 	mla	r2, sl, r2, ip
 80056e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80056ea:	b289      	uxth	r1, r1
 80056ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80056f0:	4577      	cmp	r7, lr
 80056f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80056f6:	f849 1b04 	str.w	r1, [r9], #4
 80056fa:	d8e3      	bhi.n	80056c4 <__multiply+0xb0>
 80056fc:	9a01      	ldr	r2, [sp, #4]
 80056fe:	f845 c002 	str.w	ip, [r5, r2]
 8005702:	9a03      	ldr	r2, [sp, #12]
 8005704:	3304      	adds	r3, #4
 8005706:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800570a:	f1b9 0f00 	cmp.w	r9, #0
 800570e:	d020      	beq.n	8005752 <__multiply+0x13e>
 8005710:	46ae      	mov	lr, r5
 8005712:	f04f 0a00 	mov.w	sl, #0
 8005716:	6829      	ldr	r1, [r5, #0]
 8005718:	f104 0c14 	add.w	ip, r4, #20
 800571c:	f8bc b000 	ldrh.w	fp, [ip]
 8005720:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005724:	b289      	uxth	r1, r1
 8005726:	fb09 220b 	mla	r2, r9, fp, r2
 800572a:	4492      	add	sl, r2
 800572c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005730:	f84e 1b04 	str.w	r1, [lr], #4
 8005734:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005738:	f8be 1000 	ldrh.w	r1, [lr]
 800573c:	0c12      	lsrs	r2, r2, #16
 800573e:	fb09 1102 	mla	r1, r9, r2, r1
 8005742:	4567      	cmp	r7, ip
 8005744:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005748:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800574c:	d8e6      	bhi.n	800571c <__multiply+0x108>
 800574e:	9a01      	ldr	r2, [sp, #4]
 8005750:	50a9      	str	r1, [r5, r2]
 8005752:	3504      	adds	r5, #4
 8005754:	e79b      	b.n	800568e <__multiply+0x7a>
 8005756:	3e01      	subs	r6, #1
 8005758:	e79d      	b.n	8005696 <__multiply+0x82>
 800575a:	bf00      	nop
 800575c:	080073fb 	.word	0x080073fb
 8005760:	0800740c 	.word	0x0800740c

08005764 <__pow5mult>:
 8005764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005768:	4615      	mov	r5, r2
 800576a:	f012 0203 	ands.w	r2, r2, #3
 800576e:	4606      	mov	r6, r0
 8005770:	460f      	mov	r7, r1
 8005772:	d007      	beq.n	8005784 <__pow5mult+0x20>
 8005774:	4c25      	ldr	r4, [pc, #148]	; (800580c <__pow5mult+0xa8>)
 8005776:	3a01      	subs	r2, #1
 8005778:	2300      	movs	r3, #0
 800577a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800577e:	f7ff fe9f 	bl	80054c0 <__multadd>
 8005782:	4607      	mov	r7, r0
 8005784:	10ad      	asrs	r5, r5, #2
 8005786:	d03d      	beq.n	8005804 <__pow5mult+0xa0>
 8005788:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800578a:	b97c      	cbnz	r4, 80057ac <__pow5mult+0x48>
 800578c:	2010      	movs	r0, #16
 800578e:	f7ff fe11 	bl	80053b4 <malloc>
 8005792:	4602      	mov	r2, r0
 8005794:	6270      	str	r0, [r6, #36]	; 0x24
 8005796:	b928      	cbnz	r0, 80057a4 <__pow5mult+0x40>
 8005798:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800579c:	4b1c      	ldr	r3, [pc, #112]	; (8005810 <__pow5mult+0xac>)
 800579e:	481d      	ldr	r0, [pc, #116]	; (8005814 <__pow5mult+0xb0>)
 80057a0:	f000 fc0a 	bl	8005fb8 <__assert_func>
 80057a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057a8:	6004      	str	r4, [r0, #0]
 80057aa:	60c4      	str	r4, [r0, #12]
 80057ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80057b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80057b4:	b94c      	cbnz	r4, 80057ca <__pow5mult+0x66>
 80057b6:	f240 2171 	movw	r1, #625	; 0x271
 80057ba:	4630      	mov	r0, r6
 80057bc:	f7ff ff14 	bl	80055e8 <__i2b>
 80057c0:	2300      	movs	r3, #0
 80057c2:	4604      	mov	r4, r0
 80057c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80057c8:	6003      	str	r3, [r0, #0]
 80057ca:	f04f 0900 	mov.w	r9, #0
 80057ce:	07eb      	lsls	r3, r5, #31
 80057d0:	d50a      	bpl.n	80057e8 <__pow5mult+0x84>
 80057d2:	4639      	mov	r1, r7
 80057d4:	4622      	mov	r2, r4
 80057d6:	4630      	mov	r0, r6
 80057d8:	f7ff ff1c 	bl	8005614 <__multiply>
 80057dc:	4680      	mov	r8, r0
 80057de:	4639      	mov	r1, r7
 80057e0:	4630      	mov	r0, r6
 80057e2:	f7ff fe4b 	bl	800547c <_Bfree>
 80057e6:	4647      	mov	r7, r8
 80057e8:	106d      	asrs	r5, r5, #1
 80057ea:	d00b      	beq.n	8005804 <__pow5mult+0xa0>
 80057ec:	6820      	ldr	r0, [r4, #0]
 80057ee:	b938      	cbnz	r0, 8005800 <__pow5mult+0x9c>
 80057f0:	4622      	mov	r2, r4
 80057f2:	4621      	mov	r1, r4
 80057f4:	4630      	mov	r0, r6
 80057f6:	f7ff ff0d 	bl	8005614 <__multiply>
 80057fa:	6020      	str	r0, [r4, #0]
 80057fc:	f8c0 9000 	str.w	r9, [r0]
 8005800:	4604      	mov	r4, r0
 8005802:	e7e4      	b.n	80057ce <__pow5mult+0x6a>
 8005804:	4638      	mov	r0, r7
 8005806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800580a:	bf00      	nop
 800580c:	08007558 	.word	0x08007558
 8005810:	08007389 	.word	0x08007389
 8005814:	0800740c 	.word	0x0800740c

08005818 <__lshift>:
 8005818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800581c:	460c      	mov	r4, r1
 800581e:	4607      	mov	r7, r0
 8005820:	4691      	mov	r9, r2
 8005822:	6923      	ldr	r3, [r4, #16]
 8005824:	6849      	ldr	r1, [r1, #4]
 8005826:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800582a:	68a3      	ldr	r3, [r4, #8]
 800582c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005830:	f108 0601 	add.w	r6, r8, #1
 8005834:	42b3      	cmp	r3, r6
 8005836:	db0b      	blt.n	8005850 <__lshift+0x38>
 8005838:	4638      	mov	r0, r7
 800583a:	f7ff fddf 	bl	80053fc <_Balloc>
 800583e:	4605      	mov	r5, r0
 8005840:	b948      	cbnz	r0, 8005856 <__lshift+0x3e>
 8005842:	4602      	mov	r2, r0
 8005844:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005848:	4b29      	ldr	r3, [pc, #164]	; (80058f0 <__lshift+0xd8>)
 800584a:	482a      	ldr	r0, [pc, #168]	; (80058f4 <__lshift+0xdc>)
 800584c:	f000 fbb4 	bl	8005fb8 <__assert_func>
 8005850:	3101      	adds	r1, #1
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	e7ee      	b.n	8005834 <__lshift+0x1c>
 8005856:	2300      	movs	r3, #0
 8005858:	f100 0114 	add.w	r1, r0, #20
 800585c:	f100 0210 	add.w	r2, r0, #16
 8005860:	4618      	mov	r0, r3
 8005862:	4553      	cmp	r3, sl
 8005864:	db37      	blt.n	80058d6 <__lshift+0xbe>
 8005866:	6920      	ldr	r0, [r4, #16]
 8005868:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800586c:	f104 0314 	add.w	r3, r4, #20
 8005870:	f019 091f 	ands.w	r9, r9, #31
 8005874:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005878:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800587c:	d02f      	beq.n	80058de <__lshift+0xc6>
 800587e:	468a      	mov	sl, r1
 8005880:	f04f 0c00 	mov.w	ip, #0
 8005884:	f1c9 0e20 	rsb	lr, r9, #32
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	fa02 f209 	lsl.w	r2, r2, r9
 800588e:	ea42 020c 	orr.w	r2, r2, ip
 8005892:	f84a 2b04 	str.w	r2, [sl], #4
 8005896:	f853 2b04 	ldr.w	r2, [r3], #4
 800589a:	4298      	cmp	r0, r3
 800589c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80058a0:	d8f2      	bhi.n	8005888 <__lshift+0x70>
 80058a2:	1b03      	subs	r3, r0, r4
 80058a4:	3b15      	subs	r3, #21
 80058a6:	f023 0303 	bic.w	r3, r3, #3
 80058aa:	3304      	adds	r3, #4
 80058ac:	f104 0215 	add.w	r2, r4, #21
 80058b0:	4290      	cmp	r0, r2
 80058b2:	bf38      	it	cc
 80058b4:	2304      	movcc	r3, #4
 80058b6:	f841 c003 	str.w	ip, [r1, r3]
 80058ba:	f1bc 0f00 	cmp.w	ip, #0
 80058be:	d001      	beq.n	80058c4 <__lshift+0xac>
 80058c0:	f108 0602 	add.w	r6, r8, #2
 80058c4:	3e01      	subs	r6, #1
 80058c6:	4638      	mov	r0, r7
 80058c8:	4621      	mov	r1, r4
 80058ca:	612e      	str	r6, [r5, #16]
 80058cc:	f7ff fdd6 	bl	800547c <_Bfree>
 80058d0:	4628      	mov	r0, r5
 80058d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80058da:	3301      	adds	r3, #1
 80058dc:	e7c1      	b.n	8005862 <__lshift+0x4a>
 80058de:	3904      	subs	r1, #4
 80058e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80058e4:	4298      	cmp	r0, r3
 80058e6:	f841 2f04 	str.w	r2, [r1, #4]!
 80058ea:	d8f9      	bhi.n	80058e0 <__lshift+0xc8>
 80058ec:	e7ea      	b.n	80058c4 <__lshift+0xac>
 80058ee:	bf00      	nop
 80058f0:	080073fb 	.word	0x080073fb
 80058f4:	0800740c 	.word	0x0800740c

080058f8 <__mcmp>:
 80058f8:	4603      	mov	r3, r0
 80058fa:	690a      	ldr	r2, [r1, #16]
 80058fc:	6900      	ldr	r0, [r0, #16]
 80058fe:	b530      	push	{r4, r5, lr}
 8005900:	1a80      	subs	r0, r0, r2
 8005902:	d10d      	bne.n	8005920 <__mcmp+0x28>
 8005904:	3314      	adds	r3, #20
 8005906:	3114      	adds	r1, #20
 8005908:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800590c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005910:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005914:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005918:	4295      	cmp	r5, r2
 800591a:	d002      	beq.n	8005922 <__mcmp+0x2a>
 800591c:	d304      	bcc.n	8005928 <__mcmp+0x30>
 800591e:	2001      	movs	r0, #1
 8005920:	bd30      	pop	{r4, r5, pc}
 8005922:	42a3      	cmp	r3, r4
 8005924:	d3f4      	bcc.n	8005910 <__mcmp+0x18>
 8005926:	e7fb      	b.n	8005920 <__mcmp+0x28>
 8005928:	f04f 30ff 	mov.w	r0, #4294967295
 800592c:	e7f8      	b.n	8005920 <__mcmp+0x28>
	...

08005930 <__mdiff>:
 8005930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005934:	460d      	mov	r5, r1
 8005936:	4607      	mov	r7, r0
 8005938:	4611      	mov	r1, r2
 800593a:	4628      	mov	r0, r5
 800593c:	4614      	mov	r4, r2
 800593e:	f7ff ffdb 	bl	80058f8 <__mcmp>
 8005942:	1e06      	subs	r6, r0, #0
 8005944:	d111      	bne.n	800596a <__mdiff+0x3a>
 8005946:	4631      	mov	r1, r6
 8005948:	4638      	mov	r0, r7
 800594a:	f7ff fd57 	bl	80053fc <_Balloc>
 800594e:	4602      	mov	r2, r0
 8005950:	b928      	cbnz	r0, 800595e <__mdiff+0x2e>
 8005952:	f240 2132 	movw	r1, #562	; 0x232
 8005956:	4b3a      	ldr	r3, [pc, #232]	; (8005a40 <__mdiff+0x110>)
 8005958:	483a      	ldr	r0, [pc, #232]	; (8005a44 <__mdiff+0x114>)
 800595a:	f000 fb2d 	bl	8005fb8 <__assert_func>
 800595e:	2301      	movs	r3, #1
 8005960:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005964:	4610      	mov	r0, r2
 8005966:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596a:	bfa4      	itt	ge
 800596c:	4623      	movge	r3, r4
 800596e:	462c      	movge	r4, r5
 8005970:	4638      	mov	r0, r7
 8005972:	6861      	ldr	r1, [r4, #4]
 8005974:	bfa6      	itte	ge
 8005976:	461d      	movge	r5, r3
 8005978:	2600      	movge	r6, #0
 800597a:	2601      	movlt	r6, #1
 800597c:	f7ff fd3e 	bl	80053fc <_Balloc>
 8005980:	4602      	mov	r2, r0
 8005982:	b918      	cbnz	r0, 800598c <__mdiff+0x5c>
 8005984:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005988:	4b2d      	ldr	r3, [pc, #180]	; (8005a40 <__mdiff+0x110>)
 800598a:	e7e5      	b.n	8005958 <__mdiff+0x28>
 800598c:	f102 0814 	add.w	r8, r2, #20
 8005990:	46c2      	mov	sl, r8
 8005992:	f04f 0c00 	mov.w	ip, #0
 8005996:	6927      	ldr	r7, [r4, #16]
 8005998:	60c6      	str	r6, [r0, #12]
 800599a:	692e      	ldr	r6, [r5, #16]
 800599c:	f104 0014 	add.w	r0, r4, #20
 80059a0:	f105 0914 	add.w	r9, r5, #20
 80059a4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80059a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80059ac:	3410      	adds	r4, #16
 80059ae:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80059b2:	f859 3b04 	ldr.w	r3, [r9], #4
 80059b6:	fa1f f18b 	uxth.w	r1, fp
 80059ba:	448c      	add	ip, r1
 80059bc:	b299      	uxth	r1, r3
 80059be:	0c1b      	lsrs	r3, r3, #16
 80059c0:	ebac 0101 	sub.w	r1, ip, r1
 80059c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80059c8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80059cc:	b289      	uxth	r1, r1
 80059ce:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80059d2:	454e      	cmp	r6, r9
 80059d4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80059d8:	f84a 3b04 	str.w	r3, [sl], #4
 80059dc:	d8e7      	bhi.n	80059ae <__mdiff+0x7e>
 80059de:	1b73      	subs	r3, r6, r5
 80059e0:	3b15      	subs	r3, #21
 80059e2:	f023 0303 	bic.w	r3, r3, #3
 80059e6:	3515      	adds	r5, #21
 80059e8:	3304      	adds	r3, #4
 80059ea:	42ae      	cmp	r6, r5
 80059ec:	bf38      	it	cc
 80059ee:	2304      	movcc	r3, #4
 80059f0:	4418      	add	r0, r3
 80059f2:	4443      	add	r3, r8
 80059f4:	461e      	mov	r6, r3
 80059f6:	4605      	mov	r5, r0
 80059f8:	4575      	cmp	r5, lr
 80059fa:	d30e      	bcc.n	8005a1a <__mdiff+0xea>
 80059fc:	f10e 0103 	add.w	r1, lr, #3
 8005a00:	1a09      	subs	r1, r1, r0
 8005a02:	f021 0103 	bic.w	r1, r1, #3
 8005a06:	3803      	subs	r0, #3
 8005a08:	4586      	cmp	lr, r0
 8005a0a:	bf38      	it	cc
 8005a0c:	2100      	movcc	r1, #0
 8005a0e:	4419      	add	r1, r3
 8005a10:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005a14:	b18b      	cbz	r3, 8005a3a <__mdiff+0x10a>
 8005a16:	6117      	str	r7, [r2, #16]
 8005a18:	e7a4      	b.n	8005964 <__mdiff+0x34>
 8005a1a:	f855 8b04 	ldr.w	r8, [r5], #4
 8005a1e:	fa1f f188 	uxth.w	r1, r8
 8005a22:	4461      	add	r1, ip
 8005a24:	140c      	asrs	r4, r1, #16
 8005a26:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005a2a:	b289      	uxth	r1, r1
 8005a2c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005a30:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005a34:	f846 1b04 	str.w	r1, [r6], #4
 8005a38:	e7de      	b.n	80059f8 <__mdiff+0xc8>
 8005a3a:	3f01      	subs	r7, #1
 8005a3c:	e7e8      	b.n	8005a10 <__mdiff+0xe0>
 8005a3e:	bf00      	nop
 8005a40:	080073fb 	.word	0x080073fb
 8005a44:	0800740c 	.word	0x0800740c

08005a48 <__d2b>:
 8005a48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005a52:	4690      	mov	r8, r2
 8005a54:	461d      	mov	r5, r3
 8005a56:	f7ff fcd1 	bl	80053fc <_Balloc>
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	b930      	cbnz	r0, 8005a6c <__d2b+0x24>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	f240 310a 	movw	r1, #778	; 0x30a
 8005a64:	4b24      	ldr	r3, [pc, #144]	; (8005af8 <__d2b+0xb0>)
 8005a66:	4825      	ldr	r0, [pc, #148]	; (8005afc <__d2b+0xb4>)
 8005a68:	f000 faa6 	bl	8005fb8 <__assert_func>
 8005a6c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005a70:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005a74:	bb2d      	cbnz	r5, 8005ac2 <__d2b+0x7a>
 8005a76:	9301      	str	r3, [sp, #4]
 8005a78:	f1b8 0300 	subs.w	r3, r8, #0
 8005a7c:	d026      	beq.n	8005acc <__d2b+0x84>
 8005a7e:	4668      	mov	r0, sp
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	f7ff fd83 	bl	800558c <__lo0bits>
 8005a86:	9900      	ldr	r1, [sp, #0]
 8005a88:	b1f0      	cbz	r0, 8005ac8 <__d2b+0x80>
 8005a8a:	9a01      	ldr	r2, [sp, #4]
 8005a8c:	f1c0 0320 	rsb	r3, r0, #32
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	430b      	orrs	r3, r1
 8005a96:	40c2      	lsrs	r2, r0
 8005a98:	6163      	str	r3, [r4, #20]
 8005a9a:	9201      	str	r2, [sp, #4]
 8005a9c:	9b01      	ldr	r3, [sp, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	bf14      	ite	ne
 8005aa2:	2102      	movne	r1, #2
 8005aa4:	2101      	moveq	r1, #1
 8005aa6:	61a3      	str	r3, [r4, #24]
 8005aa8:	6121      	str	r1, [r4, #16]
 8005aaa:	b1c5      	cbz	r5, 8005ade <__d2b+0x96>
 8005aac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005ab0:	4405      	add	r5, r0
 8005ab2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ab6:	603d      	str	r5, [r7, #0]
 8005ab8:	6030      	str	r0, [r6, #0]
 8005aba:	4620      	mov	r0, r4
 8005abc:	b002      	add	sp, #8
 8005abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ac2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ac6:	e7d6      	b.n	8005a76 <__d2b+0x2e>
 8005ac8:	6161      	str	r1, [r4, #20]
 8005aca:	e7e7      	b.n	8005a9c <__d2b+0x54>
 8005acc:	a801      	add	r0, sp, #4
 8005ace:	f7ff fd5d 	bl	800558c <__lo0bits>
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	9b01      	ldr	r3, [sp, #4]
 8005ad6:	6121      	str	r1, [r4, #16]
 8005ad8:	6163      	str	r3, [r4, #20]
 8005ada:	3020      	adds	r0, #32
 8005adc:	e7e5      	b.n	8005aaa <__d2b+0x62>
 8005ade:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005ae2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005ae6:	6038      	str	r0, [r7, #0]
 8005ae8:	6918      	ldr	r0, [r3, #16]
 8005aea:	f7ff fd2f 	bl	800554c <__hi0bits>
 8005aee:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005af2:	6031      	str	r1, [r6, #0]
 8005af4:	e7e1      	b.n	8005aba <__d2b+0x72>
 8005af6:	bf00      	nop
 8005af8:	080073fb 	.word	0x080073fb
 8005afc:	0800740c 	.word	0x0800740c

08005b00 <_calloc_r>:
 8005b00:	b570      	push	{r4, r5, r6, lr}
 8005b02:	fba1 5402 	umull	r5, r4, r1, r2
 8005b06:	b934      	cbnz	r4, 8005b16 <_calloc_r+0x16>
 8005b08:	4629      	mov	r1, r5
 8005b0a:	f000 f875 	bl	8005bf8 <_malloc_r>
 8005b0e:	4606      	mov	r6, r0
 8005b10:	b928      	cbnz	r0, 8005b1e <_calloc_r+0x1e>
 8005b12:	4630      	mov	r0, r6
 8005b14:	bd70      	pop	{r4, r5, r6, pc}
 8005b16:	220c      	movs	r2, #12
 8005b18:	2600      	movs	r6, #0
 8005b1a:	6002      	str	r2, [r0, #0]
 8005b1c:	e7f9      	b.n	8005b12 <_calloc_r+0x12>
 8005b1e:	462a      	mov	r2, r5
 8005b20:	4621      	mov	r1, r4
 8005b22:	f7fe f941 	bl	8003da8 <memset>
 8005b26:	e7f4      	b.n	8005b12 <_calloc_r+0x12>

08005b28 <_free_r>:
 8005b28:	b538      	push	{r3, r4, r5, lr}
 8005b2a:	4605      	mov	r5, r0
 8005b2c:	2900      	cmp	r1, #0
 8005b2e:	d040      	beq.n	8005bb2 <_free_r+0x8a>
 8005b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b34:	1f0c      	subs	r4, r1, #4
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	bfb8      	it	lt
 8005b3a:	18e4      	addlt	r4, r4, r3
 8005b3c:	f000 fa98 	bl	8006070 <__malloc_lock>
 8005b40:	4a1c      	ldr	r2, [pc, #112]	; (8005bb4 <_free_r+0x8c>)
 8005b42:	6813      	ldr	r3, [r2, #0]
 8005b44:	b933      	cbnz	r3, 8005b54 <_free_r+0x2c>
 8005b46:	6063      	str	r3, [r4, #4]
 8005b48:	6014      	str	r4, [r2, #0]
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b50:	f000 ba94 	b.w	800607c <__malloc_unlock>
 8005b54:	42a3      	cmp	r3, r4
 8005b56:	d908      	bls.n	8005b6a <_free_r+0x42>
 8005b58:	6820      	ldr	r0, [r4, #0]
 8005b5a:	1821      	adds	r1, r4, r0
 8005b5c:	428b      	cmp	r3, r1
 8005b5e:	bf01      	itttt	eq
 8005b60:	6819      	ldreq	r1, [r3, #0]
 8005b62:	685b      	ldreq	r3, [r3, #4]
 8005b64:	1809      	addeq	r1, r1, r0
 8005b66:	6021      	streq	r1, [r4, #0]
 8005b68:	e7ed      	b.n	8005b46 <_free_r+0x1e>
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	b10b      	cbz	r3, 8005b74 <_free_r+0x4c>
 8005b70:	42a3      	cmp	r3, r4
 8005b72:	d9fa      	bls.n	8005b6a <_free_r+0x42>
 8005b74:	6811      	ldr	r1, [r2, #0]
 8005b76:	1850      	adds	r0, r2, r1
 8005b78:	42a0      	cmp	r0, r4
 8005b7a:	d10b      	bne.n	8005b94 <_free_r+0x6c>
 8005b7c:	6820      	ldr	r0, [r4, #0]
 8005b7e:	4401      	add	r1, r0
 8005b80:	1850      	adds	r0, r2, r1
 8005b82:	4283      	cmp	r3, r0
 8005b84:	6011      	str	r1, [r2, #0]
 8005b86:	d1e0      	bne.n	8005b4a <_free_r+0x22>
 8005b88:	6818      	ldr	r0, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	4401      	add	r1, r0
 8005b8e:	6011      	str	r1, [r2, #0]
 8005b90:	6053      	str	r3, [r2, #4]
 8005b92:	e7da      	b.n	8005b4a <_free_r+0x22>
 8005b94:	d902      	bls.n	8005b9c <_free_r+0x74>
 8005b96:	230c      	movs	r3, #12
 8005b98:	602b      	str	r3, [r5, #0]
 8005b9a:	e7d6      	b.n	8005b4a <_free_r+0x22>
 8005b9c:	6820      	ldr	r0, [r4, #0]
 8005b9e:	1821      	adds	r1, r4, r0
 8005ba0:	428b      	cmp	r3, r1
 8005ba2:	bf01      	itttt	eq
 8005ba4:	6819      	ldreq	r1, [r3, #0]
 8005ba6:	685b      	ldreq	r3, [r3, #4]
 8005ba8:	1809      	addeq	r1, r1, r0
 8005baa:	6021      	streq	r1, [r4, #0]
 8005bac:	6063      	str	r3, [r4, #4]
 8005bae:	6054      	str	r4, [r2, #4]
 8005bb0:	e7cb      	b.n	8005b4a <_free_r+0x22>
 8005bb2:	bd38      	pop	{r3, r4, r5, pc}
 8005bb4:	20000778 	.word	0x20000778

08005bb8 <sbrk_aligned>:
 8005bb8:	b570      	push	{r4, r5, r6, lr}
 8005bba:	4e0e      	ldr	r6, [pc, #56]	; (8005bf4 <sbrk_aligned+0x3c>)
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	6831      	ldr	r1, [r6, #0]
 8005bc0:	4605      	mov	r5, r0
 8005bc2:	b911      	cbnz	r1, 8005bca <sbrk_aligned+0x12>
 8005bc4:	f000 f9e8 	bl	8005f98 <_sbrk_r>
 8005bc8:	6030      	str	r0, [r6, #0]
 8005bca:	4621      	mov	r1, r4
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f000 f9e3 	bl	8005f98 <_sbrk_r>
 8005bd2:	1c43      	adds	r3, r0, #1
 8005bd4:	d00a      	beq.n	8005bec <sbrk_aligned+0x34>
 8005bd6:	1cc4      	adds	r4, r0, #3
 8005bd8:	f024 0403 	bic.w	r4, r4, #3
 8005bdc:	42a0      	cmp	r0, r4
 8005bde:	d007      	beq.n	8005bf0 <sbrk_aligned+0x38>
 8005be0:	1a21      	subs	r1, r4, r0
 8005be2:	4628      	mov	r0, r5
 8005be4:	f000 f9d8 	bl	8005f98 <_sbrk_r>
 8005be8:	3001      	adds	r0, #1
 8005bea:	d101      	bne.n	8005bf0 <sbrk_aligned+0x38>
 8005bec:	f04f 34ff 	mov.w	r4, #4294967295
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	bd70      	pop	{r4, r5, r6, pc}
 8005bf4:	2000077c 	.word	0x2000077c

08005bf8 <_malloc_r>:
 8005bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bfc:	1ccd      	adds	r5, r1, #3
 8005bfe:	f025 0503 	bic.w	r5, r5, #3
 8005c02:	3508      	adds	r5, #8
 8005c04:	2d0c      	cmp	r5, #12
 8005c06:	bf38      	it	cc
 8005c08:	250c      	movcc	r5, #12
 8005c0a:	2d00      	cmp	r5, #0
 8005c0c:	4607      	mov	r7, r0
 8005c0e:	db01      	blt.n	8005c14 <_malloc_r+0x1c>
 8005c10:	42a9      	cmp	r1, r5
 8005c12:	d905      	bls.n	8005c20 <_malloc_r+0x28>
 8005c14:	230c      	movs	r3, #12
 8005c16:	2600      	movs	r6, #0
 8005c18:	603b      	str	r3, [r7, #0]
 8005c1a:	4630      	mov	r0, r6
 8005c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c20:	4e2e      	ldr	r6, [pc, #184]	; (8005cdc <_malloc_r+0xe4>)
 8005c22:	f000 fa25 	bl	8006070 <__malloc_lock>
 8005c26:	6833      	ldr	r3, [r6, #0]
 8005c28:	461c      	mov	r4, r3
 8005c2a:	bb34      	cbnz	r4, 8005c7a <_malloc_r+0x82>
 8005c2c:	4629      	mov	r1, r5
 8005c2e:	4638      	mov	r0, r7
 8005c30:	f7ff ffc2 	bl	8005bb8 <sbrk_aligned>
 8005c34:	1c43      	adds	r3, r0, #1
 8005c36:	4604      	mov	r4, r0
 8005c38:	d14d      	bne.n	8005cd6 <_malloc_r+0xde>
 8005c3a:	6834      	ldr	r4, [r6, #0]
 8005c3c:	4626      	mov	r6, r4
 8005c3e:	2e00      	cmp	r6, #0
 8005c40:	d140      	bne.n	8005cc4 <_malloc_r+0xcc>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	4631      	mov	r1, r6
 8005c46:	4638      	mov	r0, r7
 8005c48:	eb04 0803 	add.w	r8, r4, r3
 8005c4c:	f000 f9a4 	bl	8005f98 <_sbrk_r>
 8005c50:	4580      	cmp	r8, r0
 8005c52:	d13a      	bne.n	8005cca <_malloc_r+0xd2>
 8005c54:	6821      	ldr	r1, [r4, #0]
 8005c56:	3503      	adds	r5, #3
 8005c58:	1a6d      	subs	r5, r5, r1
 8005c5a:	f025 0503 	bic.w	r5, r5, #3
 8005c5e:	3508      	adds	r5, #8
 8005c60:	2d0c      	cmp	r5, #12
 8005c62:	bf38      	it	cc
 8005c64:	250c      	movcc	r5, #12
 8005c66:	4638      	mov	r0, r7
 8005c68:	4629      	mov	r1, r5
 8005c6a:	f7ff ffa5 	bl	8005bb8 <sbrk_aligned>
 8005c6e:	3001      	adds	r0, #1
 8005c70:	d02b      	beq.n	8005cca <_malloc_r+0xd2>
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	442b      	add	r3, r5
 8005c76:	6023      	str	r3, [r4, #0]
 8005c78:	e00e      	b.n	8005c98 <_malloc_r+0xa0>
 8005c7a:	6822      	ldr	r2, [r4, #0]
 8005c7c:	1b52      	subs	r2, r2, r5
 8005c7e:	d41e      	bmi.n	8005cbe <_malloc_r+0xc6>
 8005c80:	2a0b      	cmp	r2, #11
 8005c82:	d916      	bls.n	8005cb2 <_malloc_r+0xba>
 8005c84:	1961      	adds	r1, r4, r5
 8005c86:	42a3      	cmp	r3, r4
 8005c88:	6025      	str	r5, [r4, #0]
 8005c8a:	bf18      	it	ne
 8005c8c:	6059      	strne	r1, [r3, #4]
 8005c8e:	6863      	ldr	r3, [r4, #4]
 8005c90:	bf08      	it	eq
 8005c92:	6031      	streq	r1, [r6, #0]
 8005c94:	5162      	str	r2, [r4, r5]
 8005c96:	604b      	str	r3, [r1, #4]
 8005c98:	4638      	mov	r0, r7
 8005c9a:	f104 060b 	add.w	r6, r4, #11
 8005c9e:	f000 f9ed 	bl	800607c <__malloc_unlock>
 8005ca2:	f026 0607 	bic.w	r6, r6, #7
 8005ca6:	1d23      	adds	r3, r4, #4
 8005ca8:	1af2      	subs	r2, r6, r3
 8005caa:	d0b6      	beq.n	8005c1a <_malloc_r+0x22>
 8005cac:	1b9b      	subs	r3, r3, r6
 8005cae:	50a3      	str	r3, [r4, r2]
 8005cb0:	e7b3      	b.n	8005c1a <_malloc_r+0x22>
 8005cb2:	6862      	ldr	r2, [r4, #4]
 8005cb4:	42a3      	cmp	r3, r4
 8005cb6:	bf0c      	ite	eq
 8005cb8:	6032      	streq	r2, [r6, #0]
 8005cba:	605a      	strne	r2, [r3, #4]
 8005cbc:	e7ec      	b.n	8005c98 <_malloc_r+0xa0>
 8005cbe:	4623      	mov	r3, r4
 8005cc0:	6864      	ldr	r4, [r4, #4]
 8005cc2:	e7b2      	b.n	8005c2a <_malloc_r+0x32>
 8005cc4:	4634      	mov	r4, r6
 8005cc6:	6876      	ldr	r6, [r6, #4]
 8005cc8:	e7b9      	b.n	8005c3e <_malloc_r+0x46>
 8005cca:	230c      	movs	r3, #12
 8005ccc:	4638      	mov	r0, r7
 8005cce:	603b      	str	r3, [r7, #0]
 8005cd0:	f000 f9d4 	bl	800607c <__malloc_unlock>
 8005cd4:	e7a1      	b.n	8005c1a <_malloc_r+0x22>
 8005cd6:	6025      	str	r5, [r4, #0]
 8005cd8:	e7de      	b.n	8005c98 <_malloc_r+0xa0>
 8005cda:	bf00      	nop
 8005cdc:	20000778 	.word	0x20000778

08005ce0 <__ssputs_r>:
 8005ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce4:	688e      	ldr	r6, [r1, #8]
 8005ce6:	4682      	mov	sl, r0
 8005ce8:	429e      	cmp	r6, r3
 8005cea:	460c      	mov	r4, r1
 8005cec:	4690      	mov	r8, r2
 8005cee:	461f      	mov	r7, r3
 8005cf0:	d838      	bhi.n	8005d64 <__ssputs_r+0x84>
 8005cf2:	898a      	ldrh	r2, [r1, #12]
 8005cf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005cf8:	d032      	beq.n	8005d60 <__ssputs_r+0x80>
 8005cfa:	6825      	ldr	r5, [r4, #0]
 8005cfc:	6909      	ldr	r1, [r1, #16]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	eba5 0901 	sub.w	r9, r5, r1
 8005d04:	6965      	ldr	r5, [r4, #20]
 8005d06:	444b      	add	r3, r9
 8005d08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d10:	106d      	asrs	r5, r5, #1
 8005d12:	429d      	cmp	r5, r3
 8005d14:	bf38      	it	cc
 8005d16:	461d      	movcc	r5, r3
 8005d18:	0553      	lsls	r3, r2, #21
 8005d1a:	d531      	bpl.n	8005d80 <__ssputs_r+0xa0>
 8005d1c:	4629      	mov	r1, r5
 8005d1e:	f7ff ff6b 	bl	8005bf8 <_malloc_r>
 8005d22:	4606      	mov	r6, r0
 8005d24:	b950      	cbnz	r0, 8005d3c <__ssputs_r+0x5c>
 8005d26:	230c      	movs	r3, #12
 8005d28:	f04f 30ff 	mov.w	r0, #4294967295
 8005d2c:	f8ca 3000 	str.w	r3, [sl]
 8005d30:	89a3      	ldrh	r3, [r4, #12]
 8005d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d36:	81a3      	strh	r3, [r4, #12]
 8005d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d3c:	464a      	mov	r2, r9
 8005d3e:	6921      	ldr	r1, [r4, #16]
 8005d40:	f7ff fb4e 	bl	80053e0 <memcpy>
 8005d44:	89a3      	ldrh	r3, [r4, #12]
 8005d46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d4e:	81a3      	strh	r3, [r4, #12]
 8005d50:	6126      	str	r6, [r4, #16]
 8005d52:	444e      	add	r6, r9
 8005d54:	6026      	str	r6, [r4, #0]
 8005d56:	463e      	mov	r6, r7
 8005d58:	6165      	str	r5, [r4, #20]
 8005d5a:	eba5 0509 	sub.w	r5, r5, r9
 8005d5e:	60a5      	str	r5, [r4, #8]
 8005d60:	42be      	cmp	r6, r7
 8005d62:	d900      	bls.n	8005d66 <__ssputs_r+0x86>
 8005d64:	463e      	mov	r6, r7
 8005d66:	4632      	mov	r2, r6
 8005d68:	4641      	mov	r1, r8
 8005d6a:	6820      	ldr	r0, [r4, #0]
 8005d6c:	f000 f966 	bl	800603c <memmove>
 8005d70:	68a3      	ldr	r3, [r4, #8]
 8005d72:	2000      	movs	r0, #0
 8005d74:	1b9b      	subs	r3, r3, r6
 8005d76:	60a3      	str	r3, [r4, #8]
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	4433      	add	r3, r6
 8005d7c:	6023      	str	r3, [r4, #0]
 8005d7e:	e7db      	b.n	8005d38 <__ssputs_r+0x58>
 8005d80:	462a      	mov	r2, r5
 8005d82:	f000 f981 	bl	8006088 <_realloc_r>
 8005d86:	4606      	mov	r6, r0
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d1e1      	bne.n	8005d50 <__ssputs_r+0x70>
 8005d8c:	4650      	mov	r0, sl
 8005d8e:	6921      	ldr	r1, [r4, #16]
 8005d90:	f7ff feca 	bl	8005b28 <_free_r>
 8005d94:	e7c7      	b.n	8005d26 <__ssputs_r+0x46>
	...

08005d98 <_svfiprintf_r>:
 8005d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9c:	4698      	mov	r8, r3
 8005d9e:	898b      	ldrh	r3, [r1, #12]
 8005da0:	4607      	mov	r7, r0
 8005da2:	061b      	lsls	r3, r3, #24
 8005da4:	460d      	mov	r5, r1
 8005da6:	4614      	mov	r4, r2
 8005da8:	b09d      	sub	sp, #116	; 0x74
 8005daa:	d50e      	bpl.n	8005dca <_svfiprintf_r+0x32>
 8005dac:	690b      	ldr	r3, [r1, #16]
 8005dae:	b963      	cbnz	r3, 8005dca <_svfiprintf_r+0x32>
 8005db0:	2140      	movs	r1, #64	; 0x40
 8005db2:	f7ff ff21 	bl	8005bf8 <_malloc_r>
 8005db6:	6028      	str	r0, [r5, #0]
 8005db8:	6128      	str	r0, [r5, #16]
 8005dba:	b920      	cbnz	r0, 8005dc6 <_svfiprintf_r+0x2e>
 8005dbc:	230c      	movs	r3, #12
 8005dbe:	603b      	str	r3, [r7, #0]
 8005dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc4:	e0d1      	b.n	8005f6a <_svfiprintf_r+0x1d2>
 8005dc6:	2340      	movs	r3, #64	; 0x40
 8005dc8:	616b      	str	r3, [r5, #20]
 8005dca:	2300      	movs	r3, #0
 8005dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8005dce:	2320      	movs	r3, #32
 8005dd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dd4:	2330      	movs	r3, #48	; 0x30
 8005dd6:	f04f 0901 	mov.w	r9, #1
 8005dda:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dde:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005f84 <_svfiprintf_r+0x1ec>
 8005de2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005de6:	4623      	mov	r3, r4
 8005de8:	469a      	mov	sl, r3
 8005dea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dee:	b10a      	cbz	r2, 8005df4 <_svfiprintf_r+0x5c>
 8005df0:	2a25      	cmp	r2, #37	; 0x25
 8005df2:	d1f9      	bne.n	8005de8 <_svfiprintf_r+0x50>
 8005df4:	ebba 0b04 	subs.w	fp, sl, r4
 8005df8:	d00b      	beq.n	8005e12 <_svfiprintf_r+0x7a>
 8005dfa:	465b      	mov	r3, fp
 8005dfc:	4622      	mov	r2, r4
 8005dfe:	4629      	mov	r1, r5
 8005e00:	4638      	mov	r0, r7
 8005e02:	f7ff ff6d 	bl	8005ce0 <__ssputs_r>
 8005e06:	3001      	adds	r0, #1
 8005e08:	f000 80aa 	beq.w	8005f60 <_svfiprintf_r+0x1c8>
 8005e0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e0e:	445a      	add	r2, fp
 8005e10:	9209      	str	r2, [sp, #36]	; 0x24
 8005e12:	f89a 3000 	ldrb.w	r3, [sl]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 80a2 	beq.w	8005f60 <_svfiprintf_r+0x1c8>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e26:	f10a 0a01 	add.w	sl, sl, #1
 8005e2a:	9304      	str	r3, [sp, #16]
 8005e2c:	9307      	str	r3, [sp, #28]
 8005e2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e32:	931a      	str	r3, [sp, #104]	; 0x68
 8005e34:	4654      	mov	r4, sl
 8005e36:	2205      	movs	r2, #5
 8005e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e3c:	4851      	ldr	r0, [pc, #324]	; (8005f84 <_svfiprintf_r+0x1ec>)
 8005e3e:	f7ff fac1 	bl	80053c4 <memchr>
 8005e42:	9a04      	ldr	r2, [sp, #16]
 8005e44:	b9d8      	cbnz	r0, 8005e7e <_svfiprintf_r+0xe6>
 8005e46:	06d0      	lsls	r0, r2, #27
 8005e48:	bf44      	itt	mi
 8005e4a:	2320      	movmi	r3, #32
 8005e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e50:	0711      	lsls	r1, r2, #28
 8005e52:	bf44      	itt	mi
 8005e54:	232b      	movmi	r3, #43	; 0x2b
 8005e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e5e:	2b2a      	cmp	r3, #42	; 0x2a
 8005e60:	d015      	beq.n	8005e8e <_svfiprintf_r+0xf6>
 8005e62:	4654      	mov	r4, sl
 8005e64:	2000      	movs	r0, #0
 8005e66:	f04f 0c0a 	mov.w	ip, #10
 8005e6a:	9a07      	ldr	r2, [sp, #28]
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e72:	3b30      	subs	r3, #48	; 0x30
 8005e74:	2b09      	cmp	r3, #9
 8005e76:	d94e      	bls.n	8005f16 <_svfiprintf_r+0x17e>
 8005e78:	b1b0      	cbz	r0, 8005ea8 <_svfiprintf_r+0x110>
 8005e7a:	9207      	str	r2, [sp, #28]
 8005e7c:	e014      	b.n	8005ea8 <_svfiprintf_r+0x110>
 8005e7e:	eba0 0308 	sub.w	r3, r0, r8
 8005e82:	fa09 f303 	lsl.w	r3, r9, r3
 8005e86:	4313      	orrs	r3, r2
 8005e88:	46a2      	mov	sl, r4
 8005e8a:	9304      	str	r3, [sp, #16]
 8005e8c:	e7d2      	b.n	8005e34 <_svfiprintf_r+0x9c>
 8005e8e:	9b03      	ldr	r3, [sp, #12]
 8005e90:	1d19      	adds	r1, r3, #4
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	9103      	str	r1, [sp, #12]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	bfbb      	ittet	lt
 8005e9a:	425b      	neglt	r3, r3
 8005e9c:	f042 0202 	orrlt.w	r2, r2, #2
 8005ea0:	9307      	strge	r3, [sp, #28]
 8005ea2:	9307      	strlt	r3, [sp, #28]
 8005ea4:	bfb8      	it	lt
 8005ea6:	9204      	strlt	r2, [sp, #16]
 8005ea8:	7823      	ldrb	r3, [r4, #0]
 8005eaa:	2b2e      	cmp	r3, #46	; 0x2e
 8005eac:	d10c      	bne.n	8005ec8 <_svfiprintf_r+0x130>
 8005eae:	7863      	ldrb	r3, [r4, #1]
 8005eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8005eb2:	d135      	bne.n	8005f20 <_svfiprintf_r+0x188>
 8005eb4:	9b03      	ldr	r3, [sp, #12]
 8005eb6:	3402      	adds	r4, #2
 8005eb8:	1d1a      	adds	r2, r3, #4
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	9203      	str	r2, [sp, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	bfb8      	it	lt
 8005ec2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ec6:	9305      	str	r3, [sp, #20]
 8005ec8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005f88 <_svfiprintf_r+0x1f0>
 8005ecc:	2203      	movs	r2, #3
 8005ece:	4650      	mov	r0, sl
 8005ed0:	7821      	ldrb	r1, [r4, #0]
 8005ed2:	f7ff fa77 	bl	80053c4 <memchr>
 8005ed6:	b140      	cbz	r0, 8005eea <_svfiprintf_r+0x152>
 8005ed8:	2340      	movs	r3, #64	; 0x40
 8005eda:	eba0 000a 	sub.w	r0, r0, sl
 8005ede:	fa03 f000 	lsl.w	r0, r3, r0
 8005ee2:	9b04      	ldr	r3, [sp, #16]
 8005ee4:	3401      	adds	r4, #1
 8005ee6:	4303      	orrs	r3, r0
 8005ee8:	9304      	str	r3, [sp, #16]
 8005eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eee:	2206      	movs	r2, #6
 8005ef0:	4826      	ldr	r0, [pc, #152]	; (8005f8c <_svfiprintf_r+0x1f4>)
 8005ef2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ef6:	f7ff fa65 	bl	80053c4 <memchr>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	d038      	beq.n	8005f70 <_svfiprintf_r+0x1d8>
 8005efe:	4b24      	ldr	r3, [pc, #144]	; (8005f90 <_svfiprintf_r+0x1f8>)
 8005f00:	bb1b      	cbnz	r3, 8005f4a <_svfiprintf_r+0x1b2>
 8005f02:	9b03      	ldr	r3, [sp, #12]
 8005f04:	3307      	adds	r3, #7
 8005f06:	f023 0307 	bic.w	r3, r3, #7
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	9303      	str	r3, [sp, #12]
 8005f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f10:	4433      	add	r3, r6
 8005f12:	9309      	str	r3, [sp, #36]	; 0x24
 8005f14:	e767      	b.n	8005de6 <_svfiprintf_r+0x4e>
 8005f16:	460c      	mov	r4, r1
 8005f18:	2001      	movs	r0, #1
 8005f1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f1e:	e7a5      	b.n	8005e6c <_svfiprintf_r+0xd4>
 8005f20:	2300      	movs	r3, #0
 8005f22:	f04f 0c0a 	mov.w	ip, #10
 8005f26:	4619      	mov	r1, r3
 8005f28:	3401      	adds	r4, #1
 8005f2a:	9305      	str	r3, [sp, #20]
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f32:	3a30      	subs	r2, #48	; 0x30
 8005f34:	2a09      	cmp	r2, #9
 8005f36:	d903      	bls.n	8005f40 <_svfiprintf_r+0x1a8>
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0c5      	beq.n	8005ec8 <_svfiprintf_r+0x130>
 8005f3c:	9105      	str	r1, [sp, #20]
 8005f3e:	e7c3      	b.n	8005ec8 <_svfiprintf_r+0x130>
 8005f40:	4604      	mov	r4, r0
 8005f42:	2301      	movs	r3, #1
 8005f44:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f48:	e7f0      	b.n	8005f2c <_svfiprintf_r+0x194>
 8005f4a:	ab03      	add	r3, sp, #12
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	462a      	mov	r2, r5
 8005f50:	4638      	mov	r0, r7
 8005f52:	4b10      	ldr	r3, [pc, #64]	; (8005f94 <_svfiprintf_r+0x1fc>)
 8005f54:	a904      	add	r1, sp, #16
 8005f56:	f7fd ffcd 	bl	8003ef4 <_printf_float>
 8005f5a:	1c42      	adds	r2, r0, #1
 8005f5c:	4606      	mov	r6, r0
 8005f5e:	d1d6      	bne.n	8005f0e <_svfiprintf_r+0x176>
 8005f60:	89ab      	ldrh	r3, [r5, #12]
 8005f62:	065b      	lsls	r3, r3, #25
 8005f64:	f53f af2c 	bmi.w	8005dc0 <_svfiprintf_r+0x28>
 8005f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f6a:	b01d      	add	sp, #116	; 0x74
 8005f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f70:	ab03      	add	r3, sp, #12
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	462a      	mov	r2, r5
 8005f76:	4638      	mov	r0, r7
 8005f78:	4b06      	ldr	r3, [pc, #24]	; (8005f94 <_svfiprintf_r+0x1fc>)
 8005f7a:	a904      	add	r1, sp, #16
 8005f7c:	f7fe fa56 	bl	800442c <_printf_i>
 8005f80:	e7eb      	b.n	8005f5a <_svfiprintf_r+0x1c2>
 8005f82:	bf00      	nop
 8005f84:	08007564 	.word	0x08007564
 8005f88:	0800756a 	.word	0x0800756a
 8005f8c:	0800756e 	.word	0x0800756e
 8005f90:	08003ef5 	.word	0x08003ef5
 8005f94:	08005ce1 	.word	0x08005ce1

08005f98 <_sbrk_r>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	4d05      	ldr	r5, [pc, #20]	; (8005fb4 <_sbrk_r+0x1c>)
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	4608      	mov	r0, r1
 8005fa2:	602b      	str	r3, [r5, #0]
 8005fa4:	f7fb fcf2 	bl	800198c <_sbrk>
 8005fa8:	1c43      	adds	r3, r0, #1
 8005faa:	d102      	bne.n	8005fb2 <_sbrk_r+0x1a>
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	b103      	cbz	r3, 8005fb2 <_sbrk_r+0x1a>
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	20000780 	.word	0x20000780

08005fb8 <__assert_func>:
 8005fb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005fba:	4614      	mov	r4, r2
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	4b09      	ldr	r3, [pc, #36]	; (8005fe4 <__assert_func+0x2c>)
 8005fc0:	4605      	mov	r5, r0
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68d8      	ldr	r0, [r3, #12]
 8005fc6:	b14c      	cbz	r4, 8005fdc <__assert_func+0x24>
 8005fc8:	4b07      	ldr	r3, [pc, #28]	; (8005fe8 <__assert_func+0x30>)
 8005fca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005fce:	9100      	str	r1, [sp, #0]
 8005fd0:	462b      	mov	r3, r5
 8005fd2:	4906      	ldr	r1, [pc, #24]	; (8005fec <__assert_func+0x34>)
 8005fd4:	f000 f80e 	bl	8005ff4 <fiprintf>
 8005fd8:	f000 faaa 	bl	8006530 <abort>
 8005fdc:	4b04      	ldr	r3, [pc, #16]	; (8005ff0 <__assert_func+0x38>)
 8005fde:	461c      	mov	r4, r3
 8005fe0:	e7f3      	b.n	8005fca <__assert_func+0x12>
 8005fe2:	bf00      	nop
 8005fe4:	20000044 	.word	0x20000044
 8005fe8:	08007575 	.word	0x08007575
 8005fec:	08007582 	.word	0x08007582
 8005ff0:	080075b0 	.word	0x080075b0

08005ff4 <fiprintf>:
 8005ff4:	b40e      	push	{r1, r2, r3}
 8005ff6:	b503      	push	{r0, r1, lr}
 8005ff8:	4601      	mov	r1, r0
 8005ffa:	ab03      	add	r3, sp, #12
 8005ffc:	4805      	ldr	r0, [pc, #20]	; (8006014 <fiprintf+0x20>)
 8005ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006002:	6800      	ldr	r0, [r0, #0]
 8006004:	9301      	str	r3, [sp, #4]
 8006006:	f000 f895 	bl	8006134 <_vfiprintf_r>
 800600a:	b002      	add	sp, #8
 800600c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006010:	b003      	add	sp, #12
 8006012:	4770      	bx	lr
 8006014:	20000044 	.word	0x20000044

08006018 <__ascii_mbtowc>:
 8006018:	b082      	sub	sp, #8
 800601a:	b901      	cbnz	r1, 800601e <__ascii_mbtowc+0x6>
 800601c:	a901      	add	r1, sp, #4
 800601e:	b142      	cbz	r2, 8006032 <__ascii_mbtowc+0x1a>
 8006020:	b14b      	cbz	r3, 8006036 <__ascii_mbtowc+0x1e>
 8006022:	7813      	ldrb	r3, [r2, #0]
 8006024:	600b      	str	r3, [r1, #0]
 8006026:	7812      	ldrb	r2, [r2, #0]
 8006028:	1e10      	subs	r0, r2, #0
 800602a:	bf18      	it	ne
 800602c:	2001      	movne	r0, #1
 800602e:	b002      	add	sp, #8
 8006030:	4770      	bx	lr
 8006032:	4610      	mov	r0, r2
 8006034:	e7fb      	b.n	800602e <__ascii_mbtowc+0x16>
 8006036:	f06f 0001 	mvn.w	r0, #1
 800603a:	e7f8      	b.n	800602e <__ascii_mbtowc+0x16>

0800603c <memmove>:
 800603c:	4288      	cmp	r0, r1
 800603e:	b510      	push	{r4, lr}
 8006040:	eb01 0402 	add.w	r4, r1, r2
 8006044:	d902      	bls.n	800604c <memmove+0x10>
 8006046:	4284      	cmp	r4, r0
 8006048:	4623      	mov	r3, r4
 800604a:	d807      	bhi.n	800605c <memmove+0x20>
 800604c:	1e43      	subs	r3, r0, #1
 800604e:	42a1      	cmp	r1, r4
 8006050:	d008      	beq.n	8006064 <memmove+0x28>
 8006052:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006056:	f803 2f01 	strb.w	r2, [r3, #1]!
 800605a:	e7f8      	b.n	800604e <memmove+0x12>
 800605c:	4601      	mov	r1, r0
 800605e:	4402      	add	r2, r0
 8006060:	428a      	cmp	r2, r1
 8006062:	d100      	bne.n	8006066 <memmove+0x2a>
 8006064:	bd10      	pop	{r4, pc}
 8006066:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800606a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800606e:	e7f7      	b.n	8006060 <memmove+0x24>

08006070 <__malloc_lock>:
 8006070:	4801      	ldr	r0, [pc, #4]	; (8006078 <__malloc_lock+0x8>)
 8006072:	f000 bc19 	b.w	80068a8 <__retarget_lock_acquire_recursive>
 8006076:	bf00      	nop
 8006078:	20000784 	.word	0x20000784

0800607c <__malloc_unlock>:
 800607c:	4801      	ldr	r0, [pc, #4]	; (8006084 <__malloc_unlock+0x8>)
 800607e:	f000 bc14 	b.w	80068aa <__retarget_lock_release_recursive>
 8006082:	bf00      	nop
 8006084:	20000784 	.word	0x20000784

08006088 <_realloc_r>:
 8006088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800608c:	4680      	mov	r8, r0
 800608e:	4614      	mov	r4, r2
 8006090:	460e      	mov	r6, r1
 8006092:	b921      	cbnz	r1, 800609e <_realloc_r+0x16>
 8006094:	4611      	mov	r1, r2
 8006096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800609a:	f7ff bdad 	b.w	8005bf8 <_malloc_r>
 800609e:	b92a      	cbnz	r2, 80060ac <_realloc_r+0x24>
 80060a0:	f7ff fd42 	bl	8005b28 <_free_r>
 80060a4:	4625      	mov	r5, r4
 80060a6:	4628      	mov	r0, r5
 80060a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060ac:	f000 fc64 	bl	8006978 <_malloc_usable_size_r>
 80060b0:	4284      	cmp	r4, r0
 80060b2:	4607      	mov	r7, r0
 80060b4:	d802      	bhi.n	80060bc <_realloc_r+0x34>
 80060b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80060ba:	d812      	bhi.n	80060e2 <_realloc_r+0x5a>
 80060bc:	4621      	mov	r1, r4
 80060be:	4640      	mov	r0, r8
 80060c0:	f7ff fd9a 	bl	8005bf8 <_malloc_r>
 80060c4:	4605      	mov	r5, r0
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d0ed      	beq.n	80060a6 <_realloc_r+0x1e>
 80060ca:	42bc      	cmp	r4, r7
 80060cc:	4622      	mov	r2, r4
 80060ce:	4631      	mov	r1, r6
 80060d0:	bf28      	it	cs
 80060d2:	463a      	movcs	r2, r7
 80060d4:	f7ff f984 	bl	80053e0 <memcpy>
 80060d8:	4631      	mov	r1, r6
 80060da:	4640      	mov	r0, r8
 80060dc:	f7ff fd24 	bl	8005b28 <_free_r>
 80060e0:	e7e1      	b.n	80060a6 <_realloc_r+0x1e>
 80060e2:	4635      	mov	r5, r6
 80060e4:	e7df      	b.n	80060a6 <_realloc_r+0x1e>

080060e6 <__sfputc_r>:
 80060e6:	6893      	ldr	r3, [r2, #8]
 80060e8:	b410      	push	{r4}
 80060ea:	3b01      	subs	r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	6093      	str	r3, [r2, #8]
 80060f0:	da07      	bge.n	8006102 <__sfputc_r+0x1c>
 80060f2:	6994      	ldr	r4, [r2, #24]
 80060f4:	42a3      	cmp	r3, r4
 80060f6:	db01      	blt.n	80060fc <__sfputc_r+0x16>
 80060f8:	290a      	cmp	r1, #10
 80060fa:	d102      	bne.n	8006102 <__sfputc_r+0x1c>
 80060fc:	bc10      	pop	{r4}
 80060fe:	f000 b949 	b.w	8006394 <__swbuf_r>
 8006102:	6813      	ldr	r3, [r2, #0]
 8006104:	1c58      	adds	r0, r3, #1
 8006106:	6010      	str	r0, [r2, #0]
 8006108:	7019      	strb	r1, [r3, #0]
 800610a:	4608      	mov	r0, r1
 800610c:	bc10      	pop	{r4}
 800610e:	4770      	bx	lr

08006110 <__sfputs_r>:
 8006110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006112:	4606      	mov	r6, r0
 8006114:	460f      	mov	r7, r1
 8006116:	4614      	mov	r4, r2
 8006118:	18d5      	adds	r5, r2, r3
 800611a:	42ac      	cmp	r4, r5
 800611c:	d101      	bne.n	8006122 <__sfputs_r+0x12>
 800611e:	2000      	movs	r0, #0
 8006120:	e007      	b.n	8006132 <__sfputs_r+0x22>
 8006122:	463a      	mov	r2, r7
 8006124:	4630      	mov	r0, r6
 8006126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800612a:	f7ff ffdc 	bl	80060e6 <__sfputc_r>
 800612e:	1c43      	adds	r3, r0, #1
 8006130:	d1f3      	bne.n	800611a <__sfputs_r+0xa>
 8006132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006134 <_vfiprintf_r>:
 8006134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006138:	460d      	mov	r5, r1
 800613a:	4614      	mov	r4, r2
 800613c:	4698      	mov	r8, r3
 800613e:	4606      	mov	r6, r0
 8006140:	b09d      	sub	sp, #116	; 0x74
 8006142:	b118      	cbz	r0, 800614c <_vfiprintf_r+0x18>
 8006144:	6983      	ldr	r3, [r0, #24]
 8006146:	b90b      	cbnz	r3, 800614c <_vfiprintf_r+0x18>
 8006148:	f000 fb10 	bl	800676c <__sinit>
 800614c:	4b89      	ldr	r3, [pc, #548]	; (8006374 <_vfiprintf_r+0x240>)
 800614e:	429d      	cmp	r5, r3
 8006150:	d11b      	bne.n	800618a <_vfiprintf_r+0x56>
 8006152:	6875      	ldr	r5, [r6, #4]
 8006154:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006156:	07d9      	lsls	r1, r3, #31
 8006158:	d405      	bmi.n	8006166 <_vfiprintf_r+0x32>
 800615a:	89ab      	ldrh	r3, [r5, #12]
 800615c:	059a      	lsls	r2, r3, #22
 800615e:	d402      	bmi.n	8006166 <_vfiprintf_r+0x32>
 8006160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006162:	f000 fba1 	bl	80068a8 <__retarget_lock_acquire_recursive>
 8006166:	89ab      	ldrh	r3, [r5, #12]
 8006168:	071b      	lsls	r3, r3, #28
 800616a:	d501      	bpl.n	8006170 <_vfiprintf_r+0x3c>
 800616c:	692b      	ldr	r3, [r5, #16]
 800616e:	b9eb      	cbnz	r3, 80061ac <_vfiprintf_r+0x78>
 8006170:	4629      	mov	r1, r5
 8006172:	4630      	mov	r0, r6
 8006174:	f000 f96e 	bl	8006454 <__swsetup_r>
 8006178:	b1c0      	cbz	r0, 80061ac <_vfiprintf_r+0x78>
 800617a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800617c:	07dc      	lsls	r4, r3, #31
 800617e:	d50e      	bpl.n	800619e <_vfiprintf_r+0x6a>
 8006180:	f04f 30ff 	mov.w	r0, #4294967295
 8006184:	b01d      	add	sp, #116	; 0x74
 8006186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800618a:	4b7b      	ldr	r3, [pc, #492]	; (8006378 <_vfiprintf_r+0x244>)
 800618c:	429d      	cmp	r5, r3
 800618e:	d101      	bne.n	8006194 <_vfiprintf_r+0x60>
 8006190:	68b5      	ldr	r5, [r6, #8]
 8006192:	e7df      	b.n	8006154 <_vfiprintf_r+0x20>
 8006194:	4b79      	ldr	r3, [pc, #484]	; (800637c <_vfiprintf_r+0x248>)
 8006196:	429d      	cmp	r5, r3
 8006198:	bf08      	it	eq
 800619a:	68f5      	ldreq	r5, [r6, #12]
 800619c:	e7da      	b.n	8006154 <_vfiprintf_r+0x20>
 800619e:	89ab      	ldrh	r3, [r5, #12]
 80061a0:	0598      	lsls	r0, r3, #22
 80061a2:	d4ed      	bmi.n	8006180 <_vfiprintf_r+0x4c>
 80061a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061a6:	f000 fb80 	bl	80068aa <__retarget_lock_release_recursive>
 80061aa:	e7e9      	b.n	8006180 <_vfiprintf_r+0x4c>
 80061ac:	2300      	movs	r3, #0
 80061ae:	9309      	str	r3, [sp, #36]	; 0x24
 80061b0:	2320      	movs	r3, #32
 80061b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061b6:	2330      	movs	r3, #48	; 0x30
 80061b8:	f04f 0901 	mov.w	r9, #1
 80061bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80061c0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006380 <_vfiprintf_r+0x24c>
 80061c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061c8:	4623      	mov	r3, r4
 80061ca:	469a      	mov	sl, r3
 80061cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061d0:	b10a      	cbz	r2, 80061d6 <_vfiprintf_r+0xa2>
 80061d2:	2a25      	cmp	r2, #37	; 0x25
 80061d4:	d1f9      	bne.n	80061ca <_vfiprintf_r+0x96>
 80061d6:	ebba 0b04 	subs.w	fp, sl, r4
 80061da:	d00b      	beq.n	80061f4 <_vfiprintf_r+0xc0>
 80061dc:	465b      	mov	r3, fp
 80061de:	4622      	mov	r2, r4
 80061e0:	4629      	mov	r1, r5
 80061e2:	4630      	mov	r0, r6
 80061e4:	f7ff ff94 	bl	8006110 <__sfputs_r>
 80061e8:	3001      	adds	r0, #1
 80061ea:	f000 80aa 	beq.w	8006342 <_vfiprintf_r+0x20e>
 80061ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061f0:	445a      	add	r2, fp
 80061f2:	9209      	str	r2, [sp, #36]	; 0x24
 80061f4:	f89a 3000 	ldrb.w	r3, [sl]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 80a2 	beq.w	8006342 <_vfiprintf_r+0x20e>
 80061fe:	2300      	movs	r3, #0
 8006200:	f04f 32ff 	mov.w	r2, #4294967295
 8006204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006208:	f10a 0a01 	add.w	sl, sl, #1
 800620c:	9304      	str	r3, [sp, #16]
 800620e:	9307      	str	r3, [sp, #28]
 8006210:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006214:	931a      	str	r3, [sp, #104]	; 0x68
 8006216:	4654      	mov	r4, sl
 8006218:	2205      	movs	r2, #5
 800621a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800621e:	4858      	ldr	r0, [pc, #352]	; (8006380 <_vfiprintf_r+0x24c>)
 8006220:	f7ff f8d0 	bl	80053c4 <memchr>
 8006224:	9a04      	ldr	r2, [sp, #16]
 8006226:	b9d8      	cbnz	r0, 8006260 <_vfiprintf_r+0x12c>
 8006228:	06d1      	lsls	r1, r2, #27
 800622a:	bf44      	itt	mi
 800622c:	2320      	movmi	r3, #32
 800622e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006232:	0713      	lsls	r3, r2, #28
 8006234:	bf44      	itt	mi
 8006236:	232b      	movmi	r3, #43	; 0x2b
 8006238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800623c:	f89a 3000 	ldrb.w	r3, [sl]
 8006240:	2b2a      	cmp	r3, #42	; 0x2a
 8006242:	d015      	beq.n	8006270 <_vfiprintf_r+0x13c>
 8006244:	4654      	mov	r4, sl
 8006246:	2000      	movs	r0, #0
 8006248:	f04f 0c0a 	mov.w	ip, #10
 800624c:	9a07      	ldr	r2, [sp, #28]
 800624e:	4621      	mov	r1, r4
 8006250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006254:	3b30      	subs	r3, #48	; 0x30
 8006256:	2b09      	cmp	r3, #9
 8006258:	d94e      	bls.n	80062f8 <_vfiprintf_r+0x1c4>
 800625a:	b1b0      	cbz	r0, 800628a <_vfiprintf_r+0x156>
 800625c:	9207      	str	r2, [sp, #28]
 800625e:	e014      	b.n	800628a <_vfiprintf_r+0x156>
 8006260:	eba0 0308 	sub.w	r3, r0, r8
 8006264:	fa09 f303 	lsl.w	r3, r9, r3
 8006268:	4313      	orrs	r3, r2
 800626a:	46a2      	mov	sl, r4
 800626c:	9304      	str	r3, [sp, #16]
 800626e:	e7d2      	b.n	8006216 <_vfiprintf_r+0xe2>
 8006270:	9b03      	ldr	r3, [sp, #12]
 8006272:	1d19      	adds	r1, r3, #4
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	9103      	str	r1, [sp, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	bfbb      	ittet	lt
 800627c:	425b      	neglt	r3, r3
 800627e:	f042 0202 	orrlt.w	r2, r2, #2
 8006282:	9307      	strge	r3, [sp, #28]
 8006284:	9307      	strlt	r3, [sp, #28]
 8006286:	bfb8      	it	lt
 8006288:	9204      	strlt	r2, [sp, #16]
 800628a:	7823      	ldrb	r3, [r4, #0]
 800628c:	2b2e      	cmp	r3, #46	; 0x2e
 800628e:	d10c      	bne.n	80062aa <_vfiprintf_r+0x176>
 8006290:	7863      	ldrb	r3, [r4, #1]
 8006292:	2b2a      	cmp	r3, #42	; 0x2a
 8006294:	d135      	bne.n	8006302 <_vfiprintf_r+0x1ce>
 8006296:	9b03      	ldr	r3, [sp, #12]
 8006298:	3402      	adds	r4, #2
 800629a:	1d1a      	adds	r2, r3, #4
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	9203      	str	r2, [sp, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	bfb8      	it	lt
 80062a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80062a8:	9305      	str	r3, [sp, #20]
 80062aa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006384 <_vfiprintf_r+0x250>
 80062ae:	2203      	movs	r2, #3
 80062b0:	4650      	mov	r0, sl
 80062b2:	7821      	ldrb	r1, [r4, #0]
 80062b4:	f7ff f886 	bl	80053c4 <memchr>
 80062b8:	b140      	cbz	r0, 80062cc <_vfiprintf_r+0x198>
 80062ba:	2340      	movs	r3, #64	; 0x40
 80062bc:	eba0 000a 	sub.w	r0, r0, sl
 80062c0:	fa03 f000 	lsl.w	r0, r3, r0
 80062c4:	9b04      	ldr	r3, [sp, #16]
 80062c6:	3401      	adds	r4, #1
 80062c8:	4303      	orrs	r3, r0
 80062ca:	9304      	str	r3, [sp, #16]
 80062cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062d0:	2206      	movs	r2, #6
 80062d2:	482d      	ldr	r0, [pc, #180]	; (8006388 <_vfiprintf_r+0x254>)
 80062d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062d8:	f7ff f874 	bl	80053c4 <memchr>
 80062dc:	2800      	cmp	r0, #0
 80062de:	d03f      	beq.n	8006360 <_vfiprintf_r+0x22c>
 80062e0:	4b2a      	ldr	r3, [pc, #168]	; (800638c <_vfiprintf_r+0x258>)
 80062e2:	bb1b      	cbnz	r3, 800632c <_vfiprintf_r+0x1f8>
 80062e4:	9b03      	ldr	r3, [sp, #12]
 80062e6:	3307      	adds	r3, #7
 80062e8:	f023 0307 	bic.w	r3, r3, #7
 80062ec:	3308      	adds	r3, #8
 80062ee:	9303      	str	r3, [sp, #12]
 80062f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f2:	443b      	add	r3, r7
 80062f4:	9309      	str	r3, [sp, #36]	; 0x24
 80062f6:	e767      	b.n	80061c8 <_vfiprintf_r+0x94>
 80062f8:	460c      	mov	r4, r1
 80062fa:	2001      	movs	r0, #1
 80062fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006300:	e7a5      	b.n	800624e <_vfiprintf_r+0x11a>
 8006302:	2300      	movs	r3, #0
 8006304:	f04f 0c0a 	mov.w	ip, #10
 8006308:	4619      	mov	r1, r3
 800630a:	3401      	adds	r4, #1
 800630c:	9305      	str	r3, [sp, #20]
 800630e:	4620      	mov	r0, r4
 8006310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006314:	3a30      	subs	r2, #48	; 0x30
 8006316:	2a09      	cmp	r2, #9
 8006318:	d903      	bls.n	8006322 <_vfiprintf_r+0x1ee>
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0c5      	beq.n	80062aa <_vfiprintf_r+0x176>
 800631e:	9105      	str	r1, [sp, #20]
 8006320:	e7c3      	b.n	80062aa <_vfiprintf_r+0x176>
 8006322:	4604      	mov	r4, r0
 8006324:	2301      	movs	r3, #1
 8006326:	fb0c 2101 	mla	r1, ip, r1, r2
 800632a:	e7f0      	b.n	800630e <_vfiprintf_r+0x1da>
 800632c:	ab03      	add	r3, sp, #12
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	462a      	mov	r2, r5
 8006332:	4630      	mov	r0, r6
 8006334:	4b16      	ldr	r3, [pc, #88]	; (8006390 <_vfiprintf_r+0x25c>)
 8006336:	a904      	add	r1, sp, #16
 8006338:	f7fd fddc 	bl	8003ef4 <_printf_float>
 800633c:	4607      	mov	r7, r0
 800633e:	1c78      	adds	r0, r7, #1
 8006340:	d1d6      	bne.n	80062f0 <_vfiprintf_r+0x1bc>
 8006342:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006344:	07d9      	lsls	r1, r3, #31
 8006346:	d405      	bmi.n	8006354 <_vfiprintf_r+0x220>
 8006348:	89ab      	ldrh	r3, [r5, #12]
 800634a:	059a      	lsls	r2, r3, #22
 800634c:	d402      	bmi.n	8006354 <_vfiprintf_r+0x220>
 800634e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006350:	f000 faab 	bl	80068aa <__retarget_lock_release_recursive>
 8006354:	89ab      	ldrh	r3, [r5, #12]
 8006356:	065b      	lsls	r3, r3, #25
 8006358:	f53f af12 	bmi.w	8006180 <_vfiprintf_r+0x4c>
 800635c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800635e:	e711      	b.n	8006184 <_vfiprintf_r+0x50>
 8006360:	ab03      	add	r3, sp, #12
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	462a      	mov	r2, r5
 8006366:	4630      	mov	r0, r6
 8006368:	4b09      	ldr	r3, [pc, #36]	; (8006390 <_vfiprintf_r+0x25c>)
 800636a:	a904      	add	r1, sp, #16
 800636c:	f7fe f85e 	bl	800442c <_printf_i>
 8006370:	e7e4      	b.n	800633c <_vfiprintf_r+0x208>
 8006372:	bf00      	nop
 8006374:	080076dc 	.word	0x080076dc
 8006378:	080076fc 	.word	0x080076fc
 800637c:	080076bc 	.word	0x080076bc
 8006380:	08007564 	.word	0x08007564
 8006384:	0800756a 	.word	0x0800756a
 8006388:	0800756e 	.word	0x0800756e
 800638c:	08003ef5 	.word	0x08003ef5
 8006390:	08006111 	.word	0x08006111

08006394 <__swbuf_r>:
 8006394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006396:	460e      	mov	r6, r1
 8006398:	4614      	mov	r4, r2
 800639a:	4605      	mov	r5, r0
 800639c:	b118      	cbz	r0, 80063a6 <__swbuf_r+0x12>
 800639e:	6983      	ldr	r3, [r0, #24]
 80063a0:	b90b      	cbnz	r3, 80063a6 <__swbuf_r+0x12>
 80063a2:	f000 f9e3 	bl	800676c <__sinit>
 80063a6:	4b21      	ldr	r3, [pc, #132]	; (800642c <__swbuf_r+0x98>)
 80063a8:	429c      	cmp	r4, r3
 80063aa:	d12b      	bne.n	8006404 <__swbuf_r+0x70>
 80063ac:	686c      	ldr	r4, [r5, #4]
 80063ae:	69a3      	ldr	r3, [r4, #24]
 80063b0:	60a3      	str	r3, [r4, #8]
 80063b2:	89a3      	ldrh	r3, [r4, #12]
 80063b4:	071a      	lsls	r2, r3, #28
 80063b6:	d52f      	bpl.n	8006418 <__swbuf_r+0x84>
 80063b8:	6923      	ldr	r3, [r4, #16]
 80063ba:	b36b      	cbz	r3, 8006418 <__swbuf_r+0x84>
 80063bc:	6923      	ldr	r3, [r4, #16]
 80063be:	6820      	ldr	r0, [r4, #0]
 80063c0:	b2f6      	uxtb	r6, r6
 80063c2:	1ac0      	subs	r0, r0, r3
 80063c4:	6963      	ldr	r3, [r4, #20]
 80063c6:	4637      	mov	r7, r6
 80063c8:	4283      	cmp	r3, r0
 80063ca:	dc04      	bgt.n	80063d6 <__swbuf_r+0x42>
 80063cc:	4621      	mov	r1, r4
 80063ce:	4628      	mov	r0, r5
 80063d0:	f000 f938 	bl	8006644 <_fflush_r>
 80063d4:	bb30      	cbnz	r0, 8006424 <__swbuf_r+0x90>
 80063d6:	68a3      	ldr	r3, [r4, #8]
 80063d8:	3001      	adds	r0, #1
 80063da:	3b01      	subs	r3, #1
 80063dc:	60a3      	str	r3, [r4, #8]
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	6022      	str	r2, [r4, #0]
 80063e4:	701e      	strb	r6, [r3, #0]
 80063e6:	6963      	ldr	r3, [r4, #20]
 80063e8:	4283      	cmp	r3, r0
 80063ea:	d004      	beq.n	80063f6 <__swbuf_r+0x62>
 80063ec:	89a3      	ldrh	r3, [r4, #12]
 80063ee:	07db      	lsls	r3, r3, #31
 80063f0:	d506      	bpl.n	8006400 <__swbuf_r+0x6c>
 80063f2:	2e0a      	cmp	r6, #10
 80063f4:	d104      	bne.n	8006400 <__swbuf_r+0x6c>
 80063f6:	4621      	mov	r1, r4
 80063f8:	4628      	mov	r0, r5
 80063fa:	f000 f923 	bl	8006644 <_fflush_r>
 80063fe:	b988      	cbnz	r0, 8006424 <__swbuf_r+0x90>
 8006400:	4638      	mov	r0, r7
 8006402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006404:	4b0a      	ldr	r3, [pc, #40]	; (8006430 <__swbuf_r+0x9c>)
 8006406:	429c      	cmp	r4, r3
 8006408:	d101      	bne.n	800640e <__swbuf_r+0x7a>
 800640a:	68ac      	ldr	r4, [r5, #8]
 800640c:	e7cf      	b.n	80063ae <__swbuf_r+0x1a>
 800640e:	4b09      	ldr	r3, [pc, #36]	; (8006434 <__swbuf_r+0xa0>)
 8006410:	429c      	cmp	r4, r3
 8006412:	bf08      	it	eq
 8006414:	68ec      	ldreq	r4, [r5, #12]
 8006416:	e7ca      	b.n	80063ae <__swbuf_r+0x1a>
 8006418:	4621      	mov	r1, r4
 800641a:	4628      	mov	r0, r5
 800641c:	f000 f81a 	bl	8006454 <__swsetup_r>
 8006420:	2800      	cmp	r0, #0
 8006422:	d0cb      	beq.n	80063bc <__swbuf_r+0x28>
 8006424:	f04f 37ff 	mov.w	r7, #4294967295
 8006428:	e7ea      	b.n	8006400 <__swbuf_r+0x6c>
 800642a:	bf00      	nop
 800642c:	080076dc 	.word	0x080076dc
 8006430:	080076fc 	.word	0x080076fc
 8006434:	080076bc 	.word	0x080076bc

08006438 <__ascii_wctomb>:
 8006438:	4603      	mov	r3, r0
 800643a:	4608      	mov	r0, r1
 800643c:	b141      	cbz	r1, 8006450 <__ascii_wctomb+0x18>
 800643e:	2aff      	cmp	r2, #255	; 0xff
 8006440:	d904      	bls.n	800644c <__ascii_wctomb+0x14>
 8006442:	228a      	movs	r2, #138	; 0x8a
 8006444:	f04f 30ff 	mov.w	r0, #4294967295
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	4770      	bx	lr
 800644c:	2001      	movs	r0, #1
 800644e:	700a      	strb	r2, [r1, #0]
 8006450:	4770      	bx	lr
	...

08006454 <__swsetup_r>:
 8006454:	4b32      	ldr	r3, [pc, #200]	; (8006520 <__swsetup_r+0xcc>)
 8006456:	b570      	push	{r4, r5, r6, lr}
 8006458:	681d      	ldr	r5, [r3, #0]
 800645a:	4606      	mov	r6, r0
 800645c:	460c      	mov	r4, r1
 800645e:	b125      	cbz	r5, 800646a <__swsetup_r+0x16>
 8006460:	69ab      	ldr	r3, [r5, #24]
 8006462:	b913      	cbnz	r3, 800646a <__swsetup_r+0x16>
 8006464:	4628      	mov	r0, r5
 8006466:	f000 f981 	bl	800676c <__sinit>
 800646a:	4b2e      	ldr	r3, [pc, #184]	; (8006524 <__swsetup_r+0xd0>)
 800646c:	429c      	cmp	r4, r3
 800646e:	d10f      	bne.n	8006490 <__swsetup_r+0x3c>
 8006470:	686c      	ldr	r4, [r5, #4]
 8006472:	89a3      	ldrh	r3, [r4, #12]
 8006474:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006478:	0719      	lsls	r1, r3, #28
 800647a:	d42c      	bmi.n	80064d6 <__swsetup_r+0x82>
 800647c:	06dd      	lsls	r5, r3, #27
 800647e:	d411      	bmi.n	80064a4 <__swsetup_r+0x50>
 8006480:	2309      	movs	r3, #9
 8006482:	6033      	str	r3, [r6, #0]
 8006484:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006488:	f04f 30ff 	mov.w	r0, #4294967295
 800648c:	81a3      	strh	r3, [r4, #12]
 800648e:	e03e      	b.n	800650e <__swsetup_r+0xba>
 8006490:	4b25      	ldr	r3, [pc, #148]	; (8006528 <__swsetup_r+0xd4>)
 8006492:	429c      	cmp	r4, r3
 8006494:	d101      	bne.n	800649a <__swsetup_r+0x46>
 8006496:	68ac      	ldr	r4, [r5, #8]
 8006498:	e7eb      	b.n	8006472 <__swsetup_r+0x1e>
 800649a:	4b24      	ldr	r3, [pc, #144]	; (800652c <__swsetup_r+0xd8>)
 800649c:	429c      	cmp	r4, r3
 800649e:	bf08      	it	eq
 80064a0:	68ec      	ldreq	r4, [r5, #12]
 80064a2:	e7e6      	b.n	8006472 <__swsetup_r+0x1e>
 80064a4:	0758      	lsls	r0, r3, #29
 80064a6:	d512      	bpl.n	80064ce <__swsetup_r+0x7a>
 80064a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064aa:	b141      	cbz	r1, 80064be <__swsetup_r+0x6a>
 80064ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064b0:	4299      	cmp	r1, r3
 80064b2:	d002      	beq.n	80064ba <__swsetup_r+0x66>
 80064b4:	4630      	mov	r0, r6
 80064b6:	f7ff fb37 	bl	8005b28 <_free_r>
 80064ba:	2300      	movs	r3, #0
 80064bc:	6363      	str	r3, [r4, #52]	; 0x34
 80064be:	89a3      	ldrh	r3, [r4, #12]
 80064c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064c4:	81a3      	strh	r3, [r4, #12]
 80064c6:	2300      	movs	r3, #0
 80064c8:	6063      	str	r3, [r4, #4]
 80064ca:	6923      	ldr	r3, [r4, #16]
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	89a3      	ldrh	r3, [r4, #12]
 80064d0:	f043 0308 	orr.w	r3, r3, #8
 80064d4:	81a3      	strh	r3, [r4, #12]
 80064d6:	6923      	ldr	r3, [r4, #16]
 80064d8:	b94b      	cbnz	r3, 80064ee <__swsetup_r+0x9a>
 80064da:	89a3      	ldrh	r3, [r4, #12]
 80064dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064e4:	d003      	beq.n	80064ee <__swsetup_r+0x9a>
 80064e6:	4621      	mov	r1, r4
 80064e8:	4630      	mov	r0, r6
 80064ea:	f000 fa05 	bl	80068f8 <__smakebuf_r>
 80064ee:	89a0      	ldrh	r0, [r4, #12]
 80064f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064f4:	f010 0301 	ands.w	r3, r0, #1
 80064f8:	d00a      	beq.n	8006510 <__swsetup_r+0xbc>
 80064fa:	2300      	movs	r3, #0
 80064fc:	60a3      	str	r3, [r4, #8]
 80064fe:	6963      	ldr	r3, [r4, #20]
 8006500:	425b      	negs	r3, r3
 8006502:	61a3      	str	r3, [r4, #24]
 8006504:	6923      	ldr	r3, [r4, #16]
 8006506:	b943      	cbnz	r3, 800651a <__swsetup_r+0xc6>
 8006508:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800650c:	d1ba      	bne.n	8006484 <__swsetup_r+0x30>
 800650e:	bd70      	pop	{r4, r5, r6, pc}
 8006510:	0781      	lsls	r1, r0, #30
 8006512:	bf58      	it	pl
 8006514:	6963      	ldrpl	r3, [r4, #20]
 8006516:	60a3      	str	r3, [r4, #8]
 8006518:	e7f4      	b.n	8006504 <__swsetup_r+0xb0>
 800651a:	2000      	movs	r0, #0
 800651c:	e7f7      	b.n	800650e <__swsetup_r+0xba>
 800651e:	bf00      	nop
 8006520:	20000044 	.word	0x20000044
 8006524:	080076dc 	.word	0x080076dc
 8006528:	080076fc 	.word	0x080076fc
 800652c:	080076bc 	.word	0x080076bc

08006530 <abort>:
 8006530:	2006      	movs	r0, #6
 8006532:	b508      	push	{r3, lr}
 8006534:	f000 fa50 	bl	80069d8 <raise>
 8006538:	2001      	movs	r0, #1
 800653a:	f7fb f9b3 	bl	80018a4 <_exit>
	...

08006540 <__sflush_r>:
 8006540:	898a      	ldrh	r2, [r1, #12]
 8006542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006544:	4605      	mov	r5, r0
 8006546:	0710      	lsls	r0, r2, #28
 8006548:	460c      	mov	r4, r1
 800654a:	d457      	bmi.n	80065fc <__sflush_r+0xbc>
 800654c:	684b      	ldr	r3, [r1, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	dc04      	bgt.n	800655c <__sflush_r+0x1c>
 8006552:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006554:	2b00      	cmp	r3, #0
 8006556:	dc01      	bgt.n	800655c <__sflush_r+0x1c>
 8006558:	2000      	movs	r0, #0
 800655a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800655c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800655e:	2e00      	cmp	r6, #0
 8006560:	d0fa      	beq.n	8006558 <__sflush_r+0x18>
 8006562:	2300      	movs	r3, #0
 8006564:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006568:	682f      	ldr	r7, [r5, #0]
 800656a:	602b      	str	r3, [r5, #0]
 800656c:	d032      	beq.n	80065d4 <__sflush_r+0x94>
 800656e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006570:	89a3      	ldrh	r3, [r4, #12]
 8006572:	075a      	lsls	r2, r3, #29
 8006574:	d505      	bpl.n	8006582 <__sflush_r+0x42>
 8006576:	6863      	ldr	r3, [r4, #4]
 8006578:	1ac0      	subs	r0, r0, r3
 800657a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800657c:	b10b      	cbz	r3, 8006582 <__sflush_r+0x42>
 800657e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006580:	1ac0      	subs	r0, r0, r3
 8006582:	2300      	movs	r3, #0
 8006584:	4602      	mov	r2, r0
 8006586:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006588:	4628      	mov	r0, r5
 800658a:	6a21      	ldr	r1, [r4, #32]
 800658c:	47b0      	blx	r6
 800658e:	1c43      	adds	r3, r0, #1
 8006590:	89a3      	ldrh	r3, [r4, #12]
 8006592:	d106      	bne.n	80065a2 <__sflush_r+0x62>
 8006594:	6829      	ldr	r1, [r5, #0]
 8006596:	291d      	cmp	r1, #29
 8006598:	d82c      	bhi.n	80065f4 <__sflush_r+0xb4>
 800659a:	4a29      	ldr	r2, [pc, #164]	; (8006640 <__sflush_r+0x100>)
 800659c:	40ca      	lsrs	r2, r1
 800659e:	07d6      	lsls	r6, r2, #31
 80065a0:	d528      	bpl.n	80065f4 <__sflush_r+0xb4>
 80065a2:	2200      	movs	r2, #0
 80065a4:	6062      	str	r2, [r4, #4]
 80065a6:	6922      	ldr	r2, [r4, #16]
 80065a8:	04d9      	lsls	r1, r3, #19
 80065aa:	6022      	str	r2, [r4, #0]
 80065ac:	d504      	bpl.n	80065b8 <__sflush_r+0x78>
 80065ae:	1c42      	adds	r2, r0, #1
 80065b0:	d101      	bne.n	80065b6 <__sflush_r+0x76>
 80065b2:	682b      	ldr	r3, [r5, #0]
 80065b4:	b903      	cbnz	r3, 80065b8 <__sflush_r+0x78>
 80065b6:	6560      	str	r0, [r4, #84]	; 0x54
 80065b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065ba:	602f      	str	r7, [r5, #0]
 80065bc:	2900      	cmp	r1, #0
 80065be:	d0cb      	beq.n	8006558 <__sflush_r+0x18>
 80065c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065c4:	4299      	cmp	r1, r3
 80065c6:	d002      	beq.n	80065ce <__sflush_r+0x8e>
 80065c8:	4628      	mov	r0, r5
 80065ca:	f7ff faad 	bl	8005b28 <_free_r>
 80065ce:	2000      	movs	r0, #0
 80065d0:	6360      	str	r0, [r4, #52]	; 0x34
 80065d2:	e7c2      	b.n	800655a <__sflush_r+0x1a>
 80065d4:	6a21      	ldr	r1, [r4, #32]
 80065d6:	2301      	movs	r3, #1
 80065d8:	4628      	mov	r0, r5
 80065da:	47b0      	blx	r6
 80065dc:	1c41      	adds	r1, r0, #1
 80065de:	d1c7      	bne.n	8006570 <__sflush_r+0x30>
 80065e0:	682b      	ldr	r3, [r5, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0c4      	beq.n	8006570 <__sflush_r+0x30>
 80065e6:	2b1d      	cmp	r3, #29
 80065e8:	d001      	beq.n	80065ee <__sflush_r+0xae>
 80065ea:	2b16      	cmp	r3, #22
 80065ec:	d101      	bne.n	80065f2 <__sflush_r+0xb2>
 80065ee:	602f      	str	r7, [r5, #0]
 80065f0:	e7b2      	b.n	8006558 <__sflush_r+0x18>
 80065f2:	89a3      	ldrh	r3, [r4, #12]
 80065f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065f8:	81a3      	strh	r3, [r4, #12]
 80065fa:	e7ae      	b.n	800655a <__sflush_r+0x1a>
 80065fc:	690f      	ldr	r7, [r1, #16]
 80065fe:	2f00      	cmp	r7, #0
 8006600:	d0aa      	beq.n	8006558 <__sflush_r+0x18>
 8006602:	0793      	lsls	r3, r2, #30
 8006604:	bf18      	it	ne
 8006606:	2300      	movne	r3, #0
 8006608:	680e      	ldr	r6, [r1, #0]
 800660a:	bf08      	it	eq
 800660c:	694b      	ldreq	r3, [r1, #20]
 800660e:	1bf6      	subs	r6, r6, r7
 8006610:	600f      	str	r7, [r1, #0]
 8006612:	608b      	str	r3, [r1, #8]
 8006614:	2e00      	cmp	r6, #0
 8006616:	dd9f      	ble.n	8006558 <__sflush_r+0x18>
 8006618:	4633      	mov	r3, r6
 800661a:	463a      	mov	r2, r7
 800661c:	4628      	mov	r0, r5
 800661e:	6a21      	ldr	r1, [r4, #32]
 8006620:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006624:	47e0      	blx	ip
 8006626:	2800      	cmp	r0, #0
 8006628:	dc06      	bgt.n	8006638 <__sflush_r+0xf8>
 800662a:	89a3      	ldrh	r3, [r4, #12]
 800662c:	f04f 30ff 	mov.w	r0, #4294967295
 8006630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006634:	81a3      	strh	r3, [r4, #12]
 8006636:	e790      	b.n	800655a <__sflush_r+0x1a>
 8006638:	4407      	add	r7, r0
 800663a:	1a36      	subs	r6, r6, r0
 800663c:	e7ea      	b.n	8006614 <__sflush_r+0xd4>
 800663e:	bf00      	nop
 8006640:	20400001 	.word	0x20400001

08006644 <_fflush_r>:
 8006644:	b538      	push	{r3, r4, r5, lr}
 8006646:	690b      	ldr	r3, [r1, #16]
 8006648:	4605      	mov	r5, r0
 800664a:	460c      	mov	r4, r1
 800664c:	b913      	cbnz	r3, 8006654 <_fflush_r+0x10>
 800664e:	2500      	movs	r5, #0
 8006650:	4628      	mov	r0, r5
 8006652:	bd38      	pop	{r3, r4, r5, pc}
 8006654:	b118      	cbz	r0, 800665e <_fflush_r+0x1a>
 8006656:	6983      	ldr	r3, [r0, #24]
 8006658:	b90b      	cbnz	r3, 800665e <_fflush_r+0x1a>
 800665a:	f000 f887 	bl	800676c <__sinit>
 800665e:	4b14      	ldr	r3, [pc, #80]	; (80066b0 <_fflush_r+0x6c>)
 8006660:	429c      	cmp	r4, r3
 8006662:	d11b      	bne.n	800669c <_fflush_r+0x58>
 8006664:	686c      	ldr	r4, [r5, #4]
 8006666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d0ef      	beq.n	800664e <_fflush_r+0xa>
 800666e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006670:	07d0      	lsls	r0, r2, #31
 8006672:	d404      	bmi.n	800667e <_fflush_r+0x3a>
 8006674:	0599      	lsls	r1, r3, #22
 8006676:	d402      	bmi.n	800667e <_fflush_r+0x3a>
 8006678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800667a:	f000 f915 	bl	80068a8 <__retarget_lock_acquire_recursive>
 800667e:	4628      	mov	r0, r5
 8006680:	4621      	mov	r1, r4
 8006682:	f7ff ff5d 	bl	8006540 <__sflush_r>
 8006686:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006688:	4605      	mov	r5, r0
 800668a:	07da      	lsls	r2, r3, #31
 800668c:	d4e0      	bmi.n	8006650 <_fflush_r+0xc>
 800668e:	89a3      	ldrh	r3, [r4, #12]
 8006690:	059b      	lsls	r3, r3, #22
 8006692:	d4dd      	bmi.n	8006650 <_fflush_r+0xc>
 8006694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006696:	f000 f908 	bl	80068aa <__retarget_lock_release_recursive>
 800669a:	e7d9      	b.n	8006650 <_fflush_r+0xc>
 800669c:	4b05      	ldr	r3, [pc, #20]	; (80066b4 <_fflush_r+0x70>)
 800669e:	429c      	cmp	r4, r3
 80066a0:	d101      	bne.n	80066a6 <_fflush_r+0x62>
 80066a2:	68ac      	ldr	r4, [r5, #8]
 80066a4:	e7df      	b.n	8006666 <_fflush_r+0x22>
 80066a6:	4b04      	ldr	r3, [pc, #16]	; (80066b8 <_fflush_r+0x74>)
 80066a8:	429c      	cmp	r4, r3
 80066aa:	bf08      	it	eq
 80066ac:	68ec      	ldreq	r4, [r5, #12]
 80066ae:	e7da      	b.n	8006666 <_fflush_r+0x22>
 80066b0:	080076dc 	.word	0x080076dc
 80066b4:	080076fc 	.word	0x080076fc
 80066b8:	080076bc 	.word	0x080076bc

080066bc <std>:
 80066bc:	2300      	movs	r3, #0
 80066be:	b510      	push	{r4, lr}
 80066c0:	4604      	mov	r4, r0
 80066c2:	e9c0 3300 	strd	r3, r3, [r0]
 80066c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066ca:	6083      	str	r3, [r0, #8]
 80066cc:	8181      	strh	r1, [r0, #12]
 80066ce:	6643      	str	r3, [r0, #100]	; 0x64
 80066d0:	81c2      	strh	r2, [r0, #14]
 80066d2:	6183      	str	r3, [r0, #24]
 80066d4:	4619      	mov	r1, r3
 80066d6:	2208      	movs	r2, #8
 80066d8:	305c      	adds	r0, #92	; 0x5c
 80066da:	f7fd fb65 	bl	8003da8 <memset>
 80066de:	4b05      	ldr	r3, [pc, #20]	; (80066f4 <std+0x38>)
 80066e0:	6224      	str	r4, [r4, #32]
 80066e2:	6263      	str	r3, [r4, #36]	; 0x24
 80066e4:	4b04      	ldr	r3, [pc, #16]	; (80066f8 <std+0x3c>)
 80066e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80066e8:	4b04      	ldr	r3, [pc, #16]	; (80066fc <std+0x40>)
 80066ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066ec:	4b04      	ldr	r3, [pc, #16]	; (8006700 <std+0x44>)
 80066ee:	6323      	str	r3, [r4, #48]	; 0x30
 80066f0:	bd10      	pop	{r4, pc}
 80066f2:	bf00      	nop
 80066f4:	08006a11 	.word	0x08006a11
 80066f8:	08006a33 	.word	0x08006a33
 80066fc:	08006a6b 	.word	0x08006a6b
 8006700:	08006a8f 	.word	0x08006a8f

08006704 <_cleanup_r>:
 8006704:	4901      	ldr	r1, [pc, #4]	; (800670c <_cleanup_r+0x8>)
 8006706:	f000 b8af 	b.w	8006868 <_fwalk_reent>
 800670a:	bf00      	nop
 800670c:	08006645 	.word	0x08006645

08006710 <__sfmoreglue>:
 8006710:	2268      	movs	r2, #104	; 0x68
 8006712:	b570      	push	{r4, r5, r6, lr}
 8006714:	1e4d      	subs	r5, r1, #1
 8006716:	4355      	muls	r5, r2
 8006718:	460e      	mov	r6, r1
 800671a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800671e:	f7ff fa6b 	bl	8005bf8 <_malloc_r>
 8006722:	4604      	mov	r4, r0
 8006724:	b140      	cbz	r0, 8006738 <__sfmoreglue+0x28>
 8006726:	2100      	movs	r1, #0
 8006728:	e9c0 1600 	strd	r1, r6, [r0]
 800672c:	300c      	adds	r0, #12
 800672e:	60a0      	str	r0, [r4, #8]
 8006730:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006734:	f7fd fb38 	bl	8003da8 <memset>
 8006738:	4620      	mov	r0, r4
 800673a:	bd70      	pop	{r4, r5, r6, pc}

0800673c <__sfp_lock_acquire>:
 800673c:	4801      	ldr	r0, [pc, #4]	; (8006744 <__sfp_lock_acquire+0x8>)
 800673e:	f000 b8b3 	b.w	80068a8 <__retarget_lock_acquire_recursive>
 8006742:	bf00      	nop
 8006744:	20000785 	.word	0x20000785

08006748 <__sfp_lock_release>:
 8006748:	4801      	ldr	r0, [pc, #4]	; (8006750 <__sfp_lock_release+0x8>)
 800674a:	f000 b8ae 	b.w	80068aa <__retarget_lock_release_recursive>
 800674e:	bf00      	nop
 8006750:	20000785 	.word	0x20000785

08006754 <__sinit_lock_acquire>:
 8006754:	4801      	ldr	r0, [pc, #4]	; (800675c <__sinit_lock_acquire+0x8>)
 8006756:	f000 b8a7 	b.w	80068a8 <__retarget_lock_acquire_recursive>
 800675a:	bf00      	nop
 800675c:	20000786 	.word	0x20000786

08006760 <__sinit_lock_release>:
 8006760:	4801      	ldr	r0, [pc, #4]	; (8006768 <__sinit_lock_release+0x8>)
 8006762:	f000 b8a2 	b.w	80068aa <__retarget_lock_release_recursive>
 8006766:	bf00      	nop
 8006768:	20000786 	.word	0x20000786

0800676c <__sinit>:
 800676c:	b510      	push	{r4, lr}
 800676e:	4604      	mov	r4, r0
 8006770:	f7ff fff0 	bl	8006754 <__sinit_lock_acquire>
 8006774:	69a3      	ldr	r3, [r4, #24]
 8006776:	b11b      	cbz	r3, 8006780 <__sinit+0x14>
 8006778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800677c:	f7ff bff0 	b.w	8006760 <__sinit_lock_release>
 8006780:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006784:	6523      	str	r3, [r4, #80]	; 0x50
 8006786:	4b13      	ldr	r3, [pc, #76]	; (80067d4 <__sinit+0x68>)
 8006788:	4a13      	ldr	r2, [pc, #76]	; (80067d8 <__sinit+0x6c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	62a2      	str	r2, [r4, #40]	; 0x28
 800678e:	42a3      	cmp	r3, r4
 8006790:	bf08      	it	eq
 8006792:	2301      	moveq	r3, #1
 8006794:	4620      	mov	r0, r4
 8006796:	bf08      	it	eq
 8006798:	61a3      	streq	r3, [r4, #24]
 800679a:	f000 f81f 	bl	80067dc <__sfp>
 800679e:	6060      	str	r0, [r4, #4]
 80067a0:	4620      	mov	r0, r4
 80067a2:	f000 f81b 	bl	80067dc <__sfp>
 80067a6:	60a0      	str	r0, [r4, #8]
 80067a8:	4620      	mov	r0, r4
 80067aa:	f000 f817 	bl	80067dc <__sfp>
 80067ae:	2200      	movs	r2, #0
 80067b0:	2104      	movs	r1, #4
 80067b2:	60e0      	str	r0, [r4, #12]
 80067b4:	6860      	ldr	r0, [r4, #4]
 80067b6:	f7ff ff81 	bl	80066bc <std>
 80067ba:	2201      	movs	r2, #1
 80067bc:	2109      	movs	r1, #9
 80067be:	68a0      	ldr	r0, [r4, #8]
 80067c0:	f7ff ff7c 	bl	80066bc <std>
 80067c4:	2202      	movs	r2, #2
 80067c6:	2112      	movs	r1, #18
 80067c8:	68e0      	ldr	r0, [r4, #12]
 80067ca:	f7ff ff77 	bl	80066bc <std>
 80067ce:	2301      	movs	r3, #1
 80067d0:	61a3      	str	r3, [r4, #24]
 80067d2:	e7d1      	b.n	8006778 <__sinit+0xc>
 80067d4:	08007344 	.word	0x08007344
 80067d8:	08006705 	.word	0x08006705

080067dc <__sfp>:
 80067dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067de:	4607      	mov	r7, r0
 80067e0:	f7ff ffac 	bl	800673c <__sfp_lock_acquire>
 80067e4:	4b1e      	ldr	r3, [pc, #120]	; (8006860 <__sfp+0x84>)
 80067e6:	681e      	ldr	r6, [r3, #0]
 80067e8:	69b3      	ldr	r3, [r6, #24]
 80067ea:	b913      	cbnz	r3, 80067f2 <__sfp+0x16>
 80067ec:	4630      	mov	r0, r6
 80067ee:	f7ff ffbd 	bl	800676c <__sinit>
 80067f2:	3648      	adds	r6, #72	; 0x48
 80067f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	d503      	bpl.n	8006804 <__sfp+0x28>
 80067fc:	6833      	ldr	r3, [r6, #0]
 80067fe:	b30b      	cbz	r3, 8006844 <__sfp+0x68>
 8006800:	6836      	ldr	r6, [r6, #0]
 8006802:	e7f7      	b.n	80067f4 <__sfp+0x18>
 8006804:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006808:	b9d5      	cbnz	r5, 8006840 <__sfp+0x64>
 800680a:	4b16      	ldr	r3, [pc, #88]	; (8006864 <__sfp+0x88>)
 800680c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006810:	60e3      	str	r3, [r4, #12]
 8006812:	6665      	str	r5, [r4, #100]	; 0x64
 8006814:	f000 f847 	bl	80068a6 <__retarget_lock_init_recursive>
 8006818:	f7ff ff96 	bl	8006748 <__sfp_lock_release>
 800681c:	2208      	movs	r2, #8
 800681e:	4629      	mov	r1, r5
 8006820:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006824:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006828:	6025      	str	r5, [r4, #0]
 800682a:	61a5      	str	r5, [r4, #24]
 800682c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006830:	f7fd faba 	bl	8003da8 <memset>
 8006834:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006838:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800683c:	4620      	mov	r0, r4
 800683e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006840:	3468      	adds	r4, #104	; 0x68
 8006842:	e7d9      	b.n	80067f8 <__sfp+0x1c>
 8006844:	2104      	movs	r1, #4
 8006846:	4638      	mov	r0, r7
 8006848:	f7ff ff62 	bl	8006710 <__sfmoreglue>
 800684c:	4604      	mov	r4, r0
 800684e:	6030      	str	r0, [r6, #0]
 8006850:	2800      	cmp	r0, #0
 8006852:	d1d5      	bne.n	8006800 <__sfp+0x24>
 8006854:	f7ff ff78 	bl	8006748 <__sfp_lock_release>
 8006858:	230c      	movs	r3, #12
 800685a:	603b      	str	r3, [r7, #0]
 800685c:	e7ee      	b.n	800683c <__sfp+0x60>
 800685e:	bf00      	nop
 8006860:	08007344 	.word	0x08007344
 8006864:	ffff0001 	.word	0xffff0001

08006868 <_fwalk_reent>:
 8006868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800686c:	4606      	mov	r6, r0
 800686e:	4688      	mov	r8, r1
 8006870:	2700      	movs	r7, #0
 8006872:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006876:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800687a:	f1b9 0901 	subs.w	r9, r9, #1
 800687e:	d505      	bpl.n	800688c <_fwalk_reent+0x24>
 8006880:	6824      	ldr	r4, [r4, #0]
 8006882:	2c00      	cmp	r4, #0
 8006884:	d1f7      	bne.n	8006876 <_fwalk_reent+0xe>
 8006886:	4638      	mov	r0, r7
 8006888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800688c:	89ab      	ldrh	r3, [r5, #12]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d907      	bls.n	80068a2 <_fwalk_reent+0x3a>
 8006892:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006896:	3301      	adds	r3, #1
 8006898:	d003      	beq.n	80068a2 <_fwalk_reent+0x3a>
 800689a:	4629      	mov	r1, r5
 800689c:	4630      	mov	r0, r6
 800689e:	47c0      	blx	r8
 80068a0:	4307      	orrs	r7, r0
 80068a2:	3568      	adds	r5, #104	; 0x68
 80068a4:	e7e9      	b.n	800687a <_fwalk_reent+0x12>

080068a6 <__retarget_lock_init_recursive>:
 80068a6:	4770      	bx	lr

080068a8 <__retarget_lock_acquire_recursive>:
 80068a8:	4770      	bx	lr

080068aa <__retarget_lock_release_recursive>:
 80068aa:	4770      	bx	lr

080068ac <__swhatbuf_r>:
 80068ac:	b570      	push	{r4, r5, r6, lr}
 80068ae:	460e      	mov	r6, r1
 80068b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068b4:	4614      	mov	r4, r2
 80068b6:	2900      	cmp	r1, #0
 80068b8:	461d      	mov	r5, r3
 80068ba:	b096      	sub	sp, #88	; 0x58
 80068bc:	da08      	bge.n	80068d0 <__swhatbuf_r+0x24>
 80068be:	2200      	movs	r2, #0
 80068c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80068c4:	602a      	str	r2, [r5, #0]
 80068c6:	061a      	lsls	r2, r3, #24
 80068c8:	d410      	bmi.n	80068ec <__swhatbuf_r+0x40>
 80068ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068ce:	e00e      	b.n	80068ee <__swhatbuf_r+0x42>
 80068d0:	466a      	mov	r2, sp
 80068d2:	f000 f903 	bl	8006adc <_fstat_r>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	dbf1      	blt.n	80068be <__swhatbuf_r+0x12>
 80068da:	9a01      	ldr	r2, [sp, #4]
 80068dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80068e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80068e4:	425a      	negs	r2, r3
 80068e6:	415a      	adcs	r2, r3
 80068e8:	602a      	str	r2, [r5, #0]
 80068ea:	e7ee      	b.n	80068ca <__swhatbuf_r+0x1e>
 80068ec:	2340      	movs	r3, #64	; 0x40
 80068ee:	2000      	movs	r0, #0
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	b016      	add	sp, #88	; 0x58
 80068f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080068f8 <__smakebuf_r>:
 80068f8:	898b      	ldrh	r3, [r1, #12]
 80068fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068fc:	079d      	lsls	r5, r3, #30
 80068fe:	4606      	mov	r6, r0
 8006900:	460c      	mov	r4, r1
 8006902:	d507      	bpl.n	8006914 <__smakebuf_r+0x1c>
 8006904:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	6123      	str	r3, [r4, #16]
 800690c:	2301      	movs	r3, #1
 800690e:	6163      	str	r3, [r4, #20]
 8006910:	b002      	add	sp, #8
 8006912:	bd70      	pop	{r4, r5, r6, pc}
 8006914:	466a      	mov	r2, sp
 8006916:	ab01      	add	r3, sp, #4
 8006918:	f7ff ffc8 	bl	80068ac <__swhatbuf_r>
 800691c:	9900      	ldr	r1, [sp, #0]
 800691e:	4605      	mov	r5, r0
 8006920:	4630      	mov	r0, r6
 8006922:	f7ff f969 	bl	8005bf8 <_malloc_r>
 8006926:	b948      	cbnz	r0, 800693c <__smakebuf_r+0x44>
 8006928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800692c:	059a      	lsls	r2, r3, #22
 800692e:	d4ef      	bmi.n	8006910 <__smakebuf_r+0x18>
 8006930:	f023 0303 	bic.w	r3, r3, #3
 8006934:	f043 0302 	orr.w	r3, r3, #2
 8006938:	81a3      	strh	r3, [r4, #12]
 800693a:	e7e3      	b.n	8006904 <__smakebuf_r+0xc>
 800693c:	4b0d      	ldr	r3, [pc, #52]	; (8006974 <__smakebuf_r+0x7c>)
 800693e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006940:	89a3      	ldrh	r3, [r4, #12]
 8006942:	6020      	str	r0, [r4, #0]
 8006944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006948:	81a3      	strh	r3, [r4, #12]
 800694a:	9b00      	ldr	r3, [sp, #0]
 800694c:	6120      	str	r0, [r4, #16]
 800694e:	6163      	str	r3, [r4, #20]
 8006950:	9b01      	ldr	r3, [sp, #4]
 8006952:	b15b      	cbz	r3, 800696c <__smakebuf_r+0x74>
 8006954:	4630      	mov	r0, r6
 8006956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800695a:	f000 f8d1 	bl	8006b00 <_isatty_r>
 800695e:	b128      	cbz	r0, 800696c <__smakebuf_r+0x74>
 8006960:	89a3      	ldrh	r3, [r4, #12]
 8006962:	f023 0303 	bic.w	r3, r3, #3
 8006966:	f043 0301 	orr.w	r3, r3, #1
 800696a:	81a3      	strh	r3, [r4, #12]
 800696c:	89a0      	ldrh	r0, [r4, #12]
 800696e:	4305      	orrs	r5, r0
 8006970:	81a5      	strh	r5, [r4, #12]
 8006972:	e7cd      	b.n	8006910 <__smakebuf_r+0x18>
 8006974:	08006705 	.word	0x08006705

08006978 <_malloc_usable_size_r>:
 8006978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800697c:	1f18      	subs	r0, r3, #4
 800697e:	2b00      	cmp	r3, #0
 8006980:	bfbc      	itt	lt
 8006982:	580b      	ldrlt	r3, [r1, r0]
 8006984:	18c0      	addlt	r0, r0, r3
 8006986:	4770      	bx	lr

08006988 <_raise_r>:
 8006988:	291f      	cmp	r1, #31
 800698a:	b538      	push	{r3, r4, r5, lr}
 800698c:	4604      	mov	r4, r0
 800698e:	460d      	mov	r5, r1
 8006990:	d904      	bls.n	800699c <_raise_r+0x14>
 8006992:	2316      	movs	r3, #22
 8006994:	6003      	str	r3, [r0, #0]
 8006996:	f04f 30ff 	mov.w	r0, #4294967295
 800699a:	bd38      	pop	{r3, r4, r5, pc}
 800699c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800699e:	b112      	cbz	r2, 80069a6 <_raise_r+0x1e>
 80069a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069a4:	b94b      	cbnz	r3, 80069ba <_raise_r+0x32>
 80069a6:	4620      	mov	r0, r4
 80069a8:	f000 f830 	bl	8006a0c <_getpid_r>
 80069ac:	462a      	mov	r2, r5
 80069ae:	4601      	mov	r1, r0
 80069b0:	4620      	mov	r0, r4
 80069b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069b6:	f000 b817 	b.w	80069e8 <_kill_r>
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d00a      	beq.n	80069d4 <_raise_r+0x4c>
 80069be:	1c59      	adds	r1, r3, #1
 80069c0:	d103      	bne.n	80069ca <_raise_r+0x42>
 80069c2:	2316      	movs	r3, #22
 80069c4:	6003      	str	r3, [r0, #0]
 80069c6:	2001      	movs	r0, #1
 80069c8:	e7e7      	b.n	800699a <_raise_r+0x12>
 80069ca:	2400      	movs	r4, #0
 80069cc:	4628      	mov	r0, r5
 80069ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80069d2:	4798      	blx	r3
 80069d4:	2000      	movs	r0, #0
 80069d6:	e7e0      	b.n	800699a <_raise_r+0x12>

080069d8 <raise>:
 80069d8:	4b02      	ldr	r3, [pc, #8]	; (80069e4 <raise+0xc>)
 80069da:	4601      	mov	r1, r0
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	f7ff bfd3 	b.w	8006988 <_raise_r>
 80069e2:	bf00      	nop
 80069e4:	20000044 	.word	0x20000044

080069e8 <_kill_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	2300      	movs	r3, #0
 80069ec:	4d06      	ldr	r5, [pc, #24]	; (8006a08 <_kill_r+0x20>)
 80069ee:	4604      	mov	r4, r0
 80069f0:	4608      	mov	r0, r1
 80069f2:	4611      	mov	r1, r2
 80069f4:	602b      	str	r3, [r5, #0]
 80069f6:	f7fa ff45 	bl	8001884 <_kill>
 80069fa:	1c43      	adds	r3, r0, #1
 80069fc:	d102      	bne.n	8006a04 <_kill_r+0x1c>
 80069fe:	682b      	ldr	r3, [r5, #0]
 8006a00:	b103      	cbz	r3, 8006a04 <_kill_r+0x1c>
 8006a02:	6023      	str	r3, [r4, #0]
 8006a04:	bd38      	pop	{r3, r4, r5, pc}
 8006a06:	bf00      	nop
 8006a08:	20000780 	.word	0x20000780

08006a0c <_getpid_r>:
 8006a0c:	f7fa bf33 	b.w	8001876 <_getpid>

08006a10 <__sread>:
 8006a10:	b510      	push	{r4, lr}
 8006a12:	460c      	mov	r4, r1
 8006a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a18:	f000 f894 	bl	8006b44 <_read_r>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	bfab      	itete	ge
 8006a20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a22:	89a3      	ldrhlt	r3, [r4, #12]
 8006a24:	181b      	addge	r3, r3, r0
 8006a26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a2a:	bfac      	ite	ge
 8006a2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a2e:	81a3      	strhlt	r3, [r4, #12]
 8006a30:	bd10      	pop	{r4, pc}

08006a32 <__swrite>:
 8006a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a36:	461f      	mov	r7, r3
 8006a38:	898b      	ldrh	r3, [r1, #12]
 8006a3a:	4605      	mov	r5, r0
 8006a3c:	05db      	lsls	r3, r3, #23
 8006a3e:	460c      	mov	r4, r1
 8006a40:	4616      	mov	r6, r2
 8006a42:	d505      	bpl.n	8006a50 <__swrite+0x1e>
 8006a44:	2302      	movs	r3, #2
 8006a46:	2200      	movs	r2, #0
 8006a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a4c:	f000 f868 	bl	8006b20 <_lseek_r>
 8006a50:	89a3      	ldrh	r3, [r4, #12]
 8006a52:	4632      	mov	r2, r6
 8006a54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a58:	81a3      	strh	r3, [r4, #12]
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	463b      	mov	r3, r7
 8006a5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a66:	f000 b817 	b.w	8006a98 <_write_r>

08006a6a <__sseek>:
 8006a6a:	b510      	push	{r4, lr}
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a72:	f000 f855 	bl	8006b20 <_lseek_r>
 8006a76:	1c43      	adds	r3, r0, #1
 8006a78:	89a3      	ldrh	r3, [r4, #12]
 8006a7a:	bf15      	itete	ne
 8006a7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a86:	81a3      	strheq	r3, [r4, #12]
 8006a88:	bf18      	it	ne
 8006a8a:	81a3      	strhne	r3, [r4, #12]
 8006a8c:	bd10      	pop	{r4, pc}

08006a8e <__sclose>:
 8006a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a92:	f000 b813 	b.w	8006abc <_close_r>
	...

08006a98 <_write_r>:
 8006a98:	b538      	push	{r3, r4, r5, lr}
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	4608      	mov	r0, r1
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	4d05      	ldr	r5, [pc, #20]	; (8006ab8 <_write_r+0x20>)
 8006aa4:	602a      	str	r2, [r5, #0]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f7fa ff23 	bl	80018f2 <_write>
 8006aac:	1c43      	adds	r3, r0, #1
 8006aae:	d102      	bne.n	8006ab6 <_write_r+0x1e>
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	b103      	cbz	r3, 8006ab6 <_write_r+0x1e>
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	bd38      	pop	{r3, r4, r5, pc}
 8006ab8:	20000780 	.word	0x20000780

08006abc <_close_r>:
 8006abc:	b538      	push	{r3, r4, r5, lr}
 8006abe:	2300      	movs	r3, #0
 8006ac0:	4d05      	ldr	r5, [pc, #20]	; (8006ad8 <_close_r+0x1c>)
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	4608      	mov	r0, r1
 8006ac6:	602b      	str	r3, [r5, #0]
 8006ac8:	f7fa ff2f 	bl	800192a <_close>
 8006acc:	1c43      	adds	r3, r0, #1
 8006ace:	d102      	bne.n	8006ad6 <_close_r+0x1a>
 8006ad0:	682b      	ldr	r3, [r5, #0]
 8006ad2:	b103      	cbz	r3, 8006ad6 <_close_r+0x1a>
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	bd38      	pop	{r3, r4, r5, pc}
 8006ad8:	20000780 	.word	0x20000780

08006adc <_fstat_r>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	2300      	movs	r3, #0
 8006ae0:	4d06      	ldr	r5, [pc, #24]	; (8006afc <_fstat_r+0x20>)
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	602b      	str	r3, [r5, #0]
 8006aea:	f7fa ff29 	bl	8001940 <_fstat>
 8006aee:	1c43      	adds	r3, r0, #1
 8006af0:	d102      	bne.n	8006af8 <_fstat_r+0x1c>
 8006af2:	682b      	ldr	r3, [r5, #0]
 8006af4:	b103      	cbz	r3, 8006af8 <_fstat_r+0x1c>
 8006af6:	6023      	str	r3, [r4, #0]
 8006af8:	bd38      	pop	{r3, r4, r5, pc}
 8006afa:	bf00      	nop
 8006afc:	20000780 	.word	0x20000780

08006b00 <_isatty_r>:
 8006b00:	b538      	push	{r3, r4, r5, lr}
 8006b02:	2300      	movs	r3, #0
 8006b04:	4d05      	ldr	r5, [pc, #20]	; (8006b1c <_isatty_r+0x1c>)
 8006b06:	4604      	mov	r4, r0
 8006b08:	4608      	mov	r0, r1
 8006b0a:	602b      	str	r3, [r5, #0]
 8006b0c:	f7fa ff27 	bl	800195e <_isatty>
 8006b10:	1c43      	adds	r3, r0, #1
 8006b12:	d102      	bne.n	8006b1a <_isatty_r+0x1a>
 8006b14:	682b      	ldr	r3, [r5, #0]
 8006b16:	b103      	cbz	r3, 8006b1a <_isatty_r+0x1a>
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	bd38      	pop	{r3, r4, r5, pc}
 8006b1c:	20000780 	.word	0x20000780

08006b20 <_lseek_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	4604      	mov	r4, r0
 8006b24:	4608      	mov	r0, r1
 8006b26:	4611      	mov	r1, r2
 8006b28:	2200      	movs	r2, #0
 8006b2a:	4d05      	ldr	r5, [pc, #20]	; (8006b40 <_lseek_r+0x20>)
 8006b2c:	602a      	str	r2, [r5, #0]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f7fa ff1f 	bl	8001972 <_lseek>
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	d102      	bne.n	8006b3e <_lseek_r+0x1e>
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	b103      	cbz	r3, 8006b3e <_lseek_r+0x1e>
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	20000780 	.word	0x20000780

08006b44 <_read_r>:
 8006b44:	b538      	push	{r3, r4, r5, lr}
 8006b46:	4604      	mov	r4, r0
 8006b48:	4608      	mov	r0, r1
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	4d05      	ldr	r5, [pc, #20]	; (8006b64 <_read_r+0x20>)
 8006b50:	602a      	str	r2, [r5, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	f7fa feb0 	bl	80018b8 <_read>
 8006b58:	1c43      	adds	r3, r0, #1
 8006b5a:	d102      	bne.n	8006b62 <_read_r+0x1e>
 8006b5c:	682b      	ldr	r3, [r5, #0]
 8006b5e:	b103      	cbz	r3, 8006b62 <_read_r+0x1e>
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	bd38      	pop	{r3, r4, r5, pc}
 8006b64:	20000780 	.word	0x20000780

08006b68 <_init>:
 8006b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6a:	bf00      	nop
 8006b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b6e:	bc08      	pop	{r3}
 8006b70:	469e      	mov	lr, r3
 8006b72:	4770      	bx	lr

08006b74 <_fini>:
 8006b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b76:	bf00      	nop
 8006b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b7a:	bc08      	pop	{r3}
 8006b7c:	469e      	mov	lr, r3
 8006b7e:	4770      	bx	lr
