
Stm32f1xx_Drivers_Examples.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004d4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000604  0800060c  0001060c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000604  08000604  0001060c  2**0
                  CONTENTS
  4 .ARM          00000000  08000604  08000604  0001060c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000604  0800060c  0001060c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000604  08000604  00010604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000608  08000608  00010608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001060c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800060c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800060c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001060c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006f0  00000000  00000000  00010635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000229  00000000  00000000  00010d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  00010f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000098  00000000  00000000  00011010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000015de  00000000  00000000  000110a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000bee  00000000  00000000  00012686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005461  00000000  00000000  00013274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000186d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000248  00000000  00000000  00018728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080005ec 	.word	0x080005ec

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080005ec 	.word	0x080005ec

08000170 <GPIO_PCLK>:
#include "stm32f100xx_gpio.h"


/*Peripheral Clock Setup(Enable or Disable)*/
void GPIO_PCLK(GPIO_RegDef_t *pGPIOx, uint8_t EnorDis)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	460b      	mov	r3, r1
 800017a:	70fb      	strb	r3, [r7, #3]
	  if (EnorDis != DISABLE)
 800017c:	78fb      	ldrb	r3, [r7, #3]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d036      	beq.n	80001f0 <GPIO_PCLK+0x80>
	  {
	      if(pGPIOx == GPIOA)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4a38      	ldr	r2, [pc, #224]	; (8000268 <GPIO_PCLK+0xf8>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d106      	bne.n	8000198 <GPIO_PCLK+0x28>
	      {
	    	  GPIOA_PCLK_EN();
 800018a:	4b38      	ldr	r3, [pc, #224]	; (800026c <GPIO_PCLK+0xfc>)
 800018c:	699b      	ldr	r3, [r3, #24]
 800018e:	4a37      	ldr	r2, [pc, #220]	; (800026c <GPIO_PCLK+0xfc>)
 8000190:	f043 0304 	orr.w	r3, r3, #4
 8000194:	6193      	str	r3, [r2, #24]
	      }else if(pGPIOx == GPIOE)
	      {
	    	  GPIOE_PCLK_DIS();
	      }
	  }
}
 8000196:	e061      	b.n	800025c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOB)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	4a35      	ldr	r2, [pc, #212]	; (8000270 <GPIO_PCLK+0x100>)
 800019c:	4293      	cmp	r3, r2
 800019e:	d106      	bne.n	80001ae <GPIO_PCLK+0x3e>
	    	  GPIOB_PCLK_EN();
 80001a0:	4b32      	ldr	r3, [pc, #200]	; (800026c <GPIO_PCLK+0xfc>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a31      	ldr	r2, [pc, #196]	; (800026c <GPIO_PCLK+0xfc>)
 80001a6:	f043 0308 	orr.w	r3, r3, #8
 80001aa:	6193      	str	r3, [r2, #24]
}
 80001ac:	e056      	b.n	800025c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOC)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	4a30      	ldr	r2, [pc, #192]	; (8000274 <GPIO_PCLK+0x104>)
 80001b2:	4293      	cmp	r3, r2
 80001b4:	d106      	bne.n	80001c4 <GPIO_PCLK+0x54>
	    	  GPIOC_PCLK_EN();
 80001b6:	4b2d      	ldr	r3, [pc, #180]	; (800026c <GPIO_PCLK+0xfc>)
 80001b8:	699b      	ldr	r3, [r3, #24]
 80001ba:	4a2c      	ldr	r2, [pc, #176]	; (800026c <GPIO_PCLK+0xfc>)
 80001bc:	f043 0310 	orr.w	r3, r3, #16
 80001c0:	6193      	str	r3, [r2, #24]
}
 80001c2:	e04b      	b.n	800025c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOD)
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	4a2c      	ldr	r2, [pc, #176]	; (8000278 <GPIO_PCLK+0x108>)
 80001c8:	4293      	cmp	r3, r2
 80001ca:	d106      	bne.n	80001da <GPIO_PCLK+0x6a>
	    	  GPIOD_PCLK_EN();
 80001cc:	4b27      	ldr	r3, [pc, #156]	; (800026c <GPIO_PCLK+0xfc>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a26      	ldr	r2, [pc, #152]	; (800026c <GPIO_PCLK+0xfc>)
 80001d2:	f043 0320 	orr.w	r3, r3, #32
 80001d6:	6193      	str	r3, [r2, #24]
}
 80001d8:	e040      	b.n	800025c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOE)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a27      	ldr	r2, [pc, #156]	; (800027c <GPIO_PCLK+0x10c>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d13c      	bne.n	800025c <GPIO_PCLK+0xec>
	    	  GPIOE_PCLK_EN();
 80001e2:	4b22      	ldr	r3, [pc, #136]	; (800026c <GPIO_PCLK+0xfc>)
 80001e4:	699b      	ldr	r3, [r3, #24]
 80001e6:	4a21      	ldr	r2, [pc, #132]	; (800026c <GPIO_PCLK+0xfc>)
 80001e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001ec:	6193      	str	r3, [r2, #24]
}
 80001ee:	e035      	b.n	800025c <GPIO_PCLK+0xec>
	      if(pGPIOx == GPIOA)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	4a1d      	ldr	r2, [pc, #116]	; (8000268 <GPIO_PCLK+0xf8>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d106      	bne.n	8000206 <GPIO_PCLK+0x96>
	    	  GPIOA_PCLK_DIS();
 80001f8:	4b1c      	ldr	r3, [pc, #112]	; (800026c <GPIO_PCLK+0xfc>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	4a1b      	ldr	r2, [pc, #108]	; (800026c <GPIO_PCLK+0xfc>)
 80001fe:	f023 0304 	bic.w	r3, r3, #4
 8000202:	6193      	str	r3, [r2, #24]
}
 8000204:	e02a      	b.n	800025c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOB)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4a19      	ldr	r2, [pc, #100]	; (8000270 <GPIO_PCLK+0x100>)
 800020a:	4293      	cmp	r3, r2
 800020c:	d106      	bne.n	800021c <GPIO_PCLK+0xac>
	    	  GPIOB_PCLK_DIS();
 800020e:	4b17      	ldr	r3, [pc, #92]	; (800026c <GPIO_PCLK+0xfc>)
 8000210:	699b      	ldr	r3, [r3, #24]
 8000212:	4a16      	ldr	r2, [pc, #88]	; (800026c <GPIO_PCLK+0xfc>)
 8000214:	f023 0308 	bic.w	r3, r3, #8
 8000218:	6193      	str	r3, [r2, #24]
}
 800021a:	e01f      	b.n	800025c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOC)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4a15      	ldr	r2, [pc, #84]	; (8000274 <GPIO_PCLK+0x104>)
 8000220:	4293      	cmp	r3, r2
 8000222:	d106      	bne.n	8000232 <GPIO_PCLK+0xc2>
	    	  GPIOC_PCLK_DIS();
 8000224:	4b11      	ldr	r3, [pc, #68]	; (800026c <GPIO_PCLK+0xfc>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a10      	ldr	r2, [pc, #64]	; (800026c <GPIO_PCLK+0xfc>)
 800022a:	f023 0310 	bic.w	r3, r3, #16
 800022e:	6193      	str	r3, [r2, #24]
}
 8000230:	e014      	b.n	800025c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOD)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4a10      	ldr	r2, [pc, #64]	; (8000278 <GPIO_PCLK+0x108>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d106      	bne.n	8000248 <GPIO_PCLK+0xd8>
	    	  GPIOD_PCLK_DIS();
 800023a:	4b0c      	ldr	r3, [pc, #48]	; (800026c <GPIO_PCLK+0xfc>)
 800023c:	699b      	ldr	r3, [r3, #24]
 800023e:	4a0b      	ldr	r2, [pc, #44]	; (800026c <GPIO_PCLK+0xfc>)
 8000240:	f023 0320 	bic.w	r3, r3, #32
 8000244:	6193      	str	r3, [r2, #24]
}
 8000246:	e009      	b.n	800025c <GPIO_PCLK+0xec>
	      }else if(pGPIOx == GPIOE)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a0c      	ldr	r2, [pc, #48]	; (800027c <GPIO_PCLK+0x10c>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d105      	bne.n	800025c <GPIO_PCLK+0xec>
	    	  GPIOE_PCLK_DIS();
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <GPIO_PCLK+0xfc>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <GPIO_PCLK+0xfc>)
 8000256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800025a:	6193      	str	r3, [r2, #24]
}
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	40010800 	.word	0x40010800
 800026c:	40021000 	.word	0x40021000
 8000270:	40010c00 	.word	0x40010c00
 8000274:	40011000 	.word	0x40011000
 8000278:	40011400 	.word	0x40011400
 800027c:	40011800 	.word	0x40011800

08000280 <GPIO_Init>:

/*
 * Initializes the GPIOx with the pGPIOHandle.
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	uint32_t tempmode=0;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]

	// 1. Configure the mode, first define whether the mode is output or not.
	if((pGPIOHandle->GPIO_PinConfig.GPIO_Mode) & (0x10))//All output mode's 5th bit is 1 (ex: 0001 0100)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	f003 0310 	and.w	r3, r3, #16
 8000294:	2b00      	cmp	r3, #0
 8000296:	d006      	beq.n	80002a6 <GPIO_Init+0x26>
	{
		pGPIOHandle->GPIO_PinConfig.GPIO_Mode |= pGPIOHandle->GPIO_PinConfig.GPIO_Speed; //Entegrating Output mode with speed
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	689a      	ldr	r2, [r3, #8]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	431a      	orrs	r2, r3
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	609a      	str	r2, [r3, #8]
	}

	//2. Configure the mode for CRL
	if(pGPIOHandle->GPIO_PinConfig.GPIO_Pin <=7) //Below the pin number 7 is in CRL register
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	2b07      	cmp	r3, #7
 80002ac:	d860      	bhi.n	8000370 <GPIO_Init+0xf0>
	{

	    /* Reset the corresponding ODR bit to configure pull-down activation */
	    if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INPUT_PD)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	2b28      	cmp	r3, #40	; 0x28
 80002b4:	d11b      	bne.n	80002ee <GPIO_Init+0x6e>
	    {
	    	pGPIOHandle->pGPIOx->BRR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	695a      	ldr	r2, [r3, #20]
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	2101      	movs	r1, #1
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43db      	mvns	r3, r3
 80002c8:	4619      	mov	r1, r3
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	400a      	ands	r2, r1
 80002d0:	615a      	str	r2, [r3, #20]
	    	pGPIOHandle->pGPIOx->BRR |= ( 1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	695a      	ldr	r2, [r3, #20]
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	685b      	ldr	r3, [r3, #4]
 80002dc:	2101      	movs	r1, #1
 80002de:	fa01 f303 	lsl.w	r3, r1, r3
 80002e2:	4619      	mov	r1, r3
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	430a      	orrs	r2, r1
 80002ea:	615a      	str	r2, [r3, #20]
 80002ec:	e01e      	b.n	800032c <GPIO_Init+0xac>
	    }
	    else
	    {
	      /* Set the corresponding ODR bit to configure pull-up activation */
	      if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INPUT_PU)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	2b48      	cmp	r3, #72	; 0x48
 80002f4:	d11a      	bne.n	800032c <GPIO_Init+0xac>
	      {
	  		  pGPIOHandle->pGPIOx->BSRR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clearing the corresponding bits.
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	691a      	ldr	r2, [r3, #16]
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	2101      	movs	r1, #1
 8000302:	fa01 f303 	lsl.w	r3, r1, r3
 8000306:	43db      	mvns	r3, r3
 8000308:	4619      	mov	r1, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	400a      	ands	r2, r1
 8000310:	611a      	str	r2, [r3, #16]
	    	  pGPIOHandle->pGPIOx->BSRR |= ( 1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	691a      	ldr	r2, [r3, #16]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	2101      	movs	r1, #1
 800031e:	fa01 f303 	lsl.w	r3, r1, r3
 8000322:	4619      	mov	r1, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	430a      	orrs	r2, r1
 800032a:	611a      	str	r2, [r3, #16]
	      }
	    }

		tempmode |= (((pGPIOHandle->GPIO_PinConfig.GPIO_Mode) & (0x0F)) <<  (4 * pGPIOHandle->GPIO_PinConfig.GPIO_Pin) ); // Getting the last 4 bits of GPIO_Mode to shift them 4 times left properly
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	f003 020f 	and.w	r2, r3, #15
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	4313      	orrs	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRL &= ~( 0xF << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clearing the corresponding bits first.
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	685b      	ldr	r3, [r3, #4]
 800034e:	210f      	movs	r1, #15
 8000350:	fa01 f303 	lsl.w	r3, r1, r3
 8000354:	43db      	mvns	r3, r3
 8000356:	4619      	mov	r1, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	400a      	ands	r2, r1
 800035e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= tempmode;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	6819      	ldr	r1, [r3, #0]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	430a      	orrs	r2, r1
 800036e:	601a      	str	r2, [r3, #0]
	}


	//3. Configure the mode for CRH
	if(pGPIOHandle->GPIO_PinConfig.GPIO_Pin >7) //Above the pin number 7 is in CRH register
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	2b07      	cmp	r3, #7
 8000376:	d963      	bls.n	8000440 <GPIO_Init+0x1c0>
	{
		tempmode=0;
 8000378:	2300      	movs	r3, #0
 800037a:	60fb      	str	r3, [r7, #12]

	    /* Reset the corresponding ODR bit to configure pull-down activation(Told in Reference Manual) */
	    if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INPUT_PD)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	689b      	ldr	r3, [r3, #8]
 8000380:	2b28      	cmp	r3, #40	; 0x28
 8000382:	d11b      	bne.n	80003bc <GPIO_Init+0x13c>
	    {
	    	pGPIOHandle->pGPIOx->BRR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clearing the corresponding bits.
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	695a      	ldr	r2, [r3, #20]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	2101      	movs	r1, #1
 8000390:	fa01 f303 	lsl.w	r3, r1, r3
 8000394:	43db      	mvns	r3, r3
 8000396:	4619      	mov	r1, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	400a      	ands	r2, r1
 800039e:	615a      	str	r2, [r3, #20]
	    	pGPIOHandle->pGPIOx->BRR |= ( 1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	695a      	ldr	r2, [r3, #20]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	2101      	movs	r1, #1
 80003ac:	fa01 f303 	lsl.w	r3, r1, r3
 80003b0:	4619      	mov	r1, r3
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	430a      	orrs	r2, r1
 80003b8:	615a      	str	r2, [r3, #20]
 80003ba:	e01e      	b.n	80003fa <GPIO_Init+0x17a>
	    }
	    else
	    {
	      /* Set the corresponding ODR bit to configure pull-up activation(Told in Reference Manual) */
	      if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INPUT_PU)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	2b48      	cmp	r3, #72	; 0x48
 80003c2:	d11a      	bne.n	80003fa <GPIO_Init+0x17a>
	      {
	    	  pGPIOHandle->pGPIOx->BSRR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clearing the corresponding bits.
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	691a      	ldr	r2, [r3, #16]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	2101      	movs	r1, #1
 80003d0:	fa01 f303 	lsl.w	r3, r1, r3
 80003d4:	43db      	mvns	r3, r3
 80003d6:	4619      	mov	r1, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	400a      	ands	r2, r1
 80003de:	611a      	str	r2, [r3, #16]
	    	  pGPIOHandle->pGPIOx->BSRR |= ( 1 << (pGPIOHandle->GPIO_PinConfig.GPIO_Pin));
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	691a      	ldr	r2, [r3, #16]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	2101      	movs	r1, #1
 80003ec:	fa01 f303 	lsl.w	r3, r1, r3
 80003f0:	4619      	mov	r1, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	430a      	orrs	r2, r1
 80003f8:	611a      	str	r2, [r3, #16]
	      }
	    }

		tempmode |= (((pGPIOHandle->GPIO_PinConfig.GPIO_Mode) & (0x0F)) <<  (4 * ((pGPIOHandle->GPIO_PinConfig.GPIO_Pin) - 8)) ); // Getting the last 4 bits of GPIO_Mode to shift them 4 times left properly. Between 8-16 pin number
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	689b      	ldr	r3, [r3, #8]
 80003fe:	f003 020f 	and.w	r2, r3, #15
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	3b08      	subs	r3, #8
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	fa02 f303 	lsl.w	r3, r2, r3
 800040e:	68fa      	ldr	r2, [r7, #12]
 8000410:	4313      	orrs	r3, r2
 8000412:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRH &= ~( 0xF << pGPIOHandle->GPIO_PinConfig.GPIO_Pin); // Clearing the corresponding bits first.
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	685a      	ldr	r2, [r3, #4]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	210f      	movs	r1, #15
 8000420:	fa01 f303 	lsl.w	r3, r1, r3
 8000424:	43db      	mvns	r3, r3
 8000426:	4619      	mov	r1, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	400a      	ands	r2, r1
 800042e:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= tempmode ;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	6859      	ldr	r1, [r3, #4]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	68fa      	ldr	r2, [r7, #12]
 800043c:	430a      	orrs	r2, r1
 800043e:	605a      	str	r2, [r3, #4]

	}

}
 8000440:	bf00      	nop
 8000442:	3714      	adds	r7, #20
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr

0800044a <GPIO_ReadFromInputPin>:
}



uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800044a:	b480      	push	{r7}
 800044c:	b085      	sub	sp, #20
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
 8000452:	460b      	mov	r3, r1
 8000454:	70fb      	strb	r3, [r7, #3]
	uint8_t value=0;
 8000456:	2300      	movs	r3, #0
 8000458:	73fb      	strb	r3, [r7, #15]
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);// Shift the corresponding reg value amount of pin number
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	689a      	ldr	r2, [r3, #8]
 800045e:	78fb      	ldrb	r3, [r7, #3]
 8000460:	fa22 f303 	lsr.w	r3, r2, r3
 8000464:	b2db      	uxtb	r3, r3
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	73fb      	strb	r3, [r7, #15]
													  //and take the last bit with AND operator(masking)
	return value;
 800046c:	7bfb      	ldrb	r3, [r7, #15]

}
 800046e:	4618      	mov	r0, r3
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr

08000478 <GPIO_ToggleOutputPin>:
	pGPIOx->ODR = Value;

}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	460b      	mov	r3, r1
 8000482:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1<<PinNumber);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	78fa      	ldrb	r2, [r7, #3]
 800048a:	2101      	movs	r1, #1
 800048c:	fa01 f202 	lsl.w	r2, r1, r2
 8000490:	405a      	eors	r2, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	60da      	str	r2, [r3, #12]

}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr

080004a0 <gpioConfig>:


#include <stdint.h>
#include "stm32f1xx.h"

void gpioConfig(){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b088      	sub	sp, #32
 80004a4:	af00      	add	r7, sp, #0

	GPIO_Handle_t  GPIOLed, GPIOButton;

	//For LED
	GPIOLed.pGPIOx = GPIOC;
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <gpioConfig+0x4c>)
 80004a8:	613b      	str	r3, [r7, #16]
	GPIOLed.GPIO_PinConfig.GPIO_Mode = GPIO_MODE_OUT_PP;
 80004aa:	2310      	movs	r3, #16
 80004ac:	61bb      	str	r3, [r7, #24]
	GPIOLed.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_10;
 80004ae:	230a      	movs	r3, #10
 80004b0:	617b      	str	r3, [r7, #20]
	GPIOLed.GPIO_PinConfig.GPIO_Speed = GPIO_SPEED_MEDIUM;
 80004b2:	2302      	movs	r3, #2
 80004b4:	61fb      	str	r3, [r7, #28]
	GPIO_PCLK(GPIOC, ENABLE);
 80004b6:	2101      	movs	r1, #1
 80004b8:	480c      	ldr	r0, [pc, #48]	; (80004ec <gpioConfig+0x4c>)
 80004ba:	f7ff fe59 	bl	8000170 <GPIO_PCLK>
	GPIO_Init(&GPIOLed);
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff fedc 	bl	8000280 <GPIO_Init>

	//For button
	GPIOButton.pGPIOx = GPIOA;
 80004c8:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <gpioConfig+0x50>)
 80004ca:	603b      	str	r3, [r7, #0]
	GPIOButton.GPIO_PinConfig.GPIO_Mode = GPIO_MODE_INPUT_PD;
 80004cc:	2328      	movs	r3, #40	; 0x28
 80004ce:	60bb      	str	r3, [r7, #8]
	GPIOButton.GPIO_PinConfig.GPIO_Pin = GPIO_Pin_0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	607b      	str	r3, [r7, #4]
	GPIO_PCLK(GPIOA, ENABLE);
 80004d4:	2101      	movs	r1, #1
 80004d6:	4806      	ldr	r0, [pc, #24]	; (80004f0 <gpioConfig+0x50>)
 80004d8:	f7ff fe4a 	bl	8000170 <GPIO_PCLK>
	GPIO_Init(&GPIOButton);
 80004dc:	463b      	mov	r3, r7
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff fece 	bl	8000280 <GPIO_Init>

}
 80004e4:	bf00      	nop
 80004e6:	3720      	adds	r7, #32
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40011000 	.word	0x40011000
 80004f0:	40010800 	.word	0x40010800

080004f4 <delay>:

void delay(uint32_t time){
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]

	while(time--);
 80004fc:	bf00      	nop
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	1e5a      	subs	r2, r3, #1
 8000502:	607a      	str	r2, [r7, #4]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d1fa      	bne.n	80004fe <delay+0xa>

}
 8000508:	bf00      	nop
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr

08000514 <main>:

int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
	gpioConfig();
 800051a:	f7ff ffc1 	bl	80004a0 <gpioConfig>
	uint32_t button_state=0;
 800051e:	2300      	movs	r3, #0
 8000520:	607b      	str	r3, [r7, #4]
	//uint32_t flag = 0;

	while(1){


		button_state=GPIO_ReadFromInputPin(GPIOA, GPIO_Pin_0);
 8000522:	2100      	movs	r1, #0
 8000524:	4807      	ldr	r0, [pc, #28]	; (8000544 <main+0x30>)
 8000526:	f7ff ff90 	bl	800044a <GPIO_ReadFromInputPin>
 800052a:	4603      	mov	r3, r0
 800052c:	607b      	str	r3, [r7, #4]

		if(button_state)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d0f6      	beq.n	8000522 <main+0xe>
		{
			delay(500000);
 8000534:	4804      	ldr	r0, [pc, #16]	; (8000548 <main+0x34>)
 8000536:	f7ff ffdd 	bl	80004f4 <delay>
			GPIO_ToggleOutputPin(GPIOC, GPIO_Pin_10);
 800053a:	210a      	movs	r1, #10
 800053c:	4803      	ldr	r0, [pc, #12]	; (800054c <main+0x38>)
 800053e:	f7ff ff9b 	bl	8000478 <GPIO_ToggleOutputPin>
		button_state=GPIO_ReadFromInputPin(GPIOA, GPIO_Pin_0);
 8000542:	e7ee      	b.n	8000522 <main+0xe>
 8000544:	40010800 	.word	0x40010800
 8000548:	0007a120 	.word	0x0007a120
 800054c:	40011000 	.word	0x40011000

08000550 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000550:	480d      	ldr	r0, [pc, #52]	; (8000588 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000552:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000554:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000558:	480c      	ldr	r0, [pc, #48]	; (800058c <LoopForever+0x6>)
  ldr r1, =_edata
 800055a:	490d      	ldr	r1, [pc, #52]	; (8000590 <LoopForever+0xa>)
  ldr r2, =_sidata
 800055c:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <LoopForever+0xe>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000560:	e002      	b.n	8000568 <LoopCopyDataInit>

08000562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000566:	3304      	adds	r3, #4

08000568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800056c:	d3f9      	bcc.n	8000562 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056e:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000570:	4c0a      	ldr	r4, [pc, #40]	; (800059c <LoopForever+0x16>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000574:	e001      	b.n	800057a <LoopFillZerobss>

08000576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000578:	3204      	adds	r2, #4

0800057a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800057c:	d3fb      	bcc.n	8000576 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800057e:	f000 f811 	bl	80005a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000582:	f7ff ffc7 	bl	8000514 <main>

08000586 <LoopForever>:

LoopForever:
    b LoopForever
 8000586:	e7fe      	b.n	8000586 <LoopForever>
  ldr   r0, =_estack
 8000588:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800058c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000590:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000594:	0800060c 	.word	0x0800060c
  ldr r2, =_sbss
 8000598:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800059c:	2000001c 	.word	0x2000001c

080005a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a0:	e7fe      	b.n	80005a0 <ADC_IRQHandler>
	...

080005a4 <__libc_init_array>:
 80005a4:	b570      	push	{r4, r5, r6, lr}
 80005a6:	2600      	movs	r6, #0
 80005a8:	4d0c      	ldr	r5, [pc, #48]	; (80005dc <__libc_init_array+0x38>)
 80005aa:	4c0d      	ldr	r4, [pc, #52]	; (80005e0 <__libc_init_array+0x3c>)
 80005ac:	1b64      	subs	r4, r4, r5
 80005ae:	10a4      	asrs	r4, r4, #2
 80005b0:	42a6      	cmp	r6, r4
 80005b2:	d109      	bne.n	80005c8 <__libc_init_array+0x24>
 80005b4:	f000 f81a 	bl	80005ec <_init>
 80005b8:	2600      	movs	r6, #0
 80005ba:	4d0a      	ldr	r5, [pc, #40]	; (80005e4 <__libc_init_array+0x40>)
 80005bc:	4c0a      	ldr	r4, [pc, #40]	; (80005e8 <__libc_init_array+0x44>)
 80005be:	1b64      	subs	r4, r4, r5
 80005c0:	10a4      	asrs	r4, r4, #2
 80005c2:	42a6      	cmp	r6, r4
 80005c4:	d105      	bne.n	80005d2 <__libc_init_array+0x2e>
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005cc:	4798      	blx	r3
 80005ce:	3601      	adds	r6, #1
 80005d0:	e7ee      	b.n	80005b0 <__libc_init_array+0xc>
 80005d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005d6:	4798      	blx	r3
 80005d8:	3601      	adds	r6, #1
 80005da:	e7f2      	b.n	80005c2 <__libc_init_array+0x1e>
 80005dc:	08000604 	.word	0x08000604
 80005e0:	08000604 	.word	0x08000604
 80005e4:	08000604 	.word	0x08000604
 80005e8:	08000608 	.word	0x08000608

080005ec <_init>:
 80005ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ee:	bf00      	nop
 80005f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005f2:	bc08      	pop	{r3}
 80005f4:	469e      	mov	lr, r3
 80005f6:	4770      	bx	lr

080005f8 <_fini>:
 80005f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fa:	bf00      	nop
 80005fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005fe:	bc08      	pop	{r3}
 8000600:	469e      	mov	lr, r3
 8000602:	4770      	bx	lr
