
Internal_Flash_Memory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014d4  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080016a4  080016a4  000116a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016d4  080016d4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080016d4  080016d4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016d4  080016d4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016d4  080016d4  000116d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016d8  080016d8  000116d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080016dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  20000018  080016f0  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  080016f0  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000039fa  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012a0  00000000  00000000  00023a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000500  00000000  00000000  00024cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000458  00000000  00000000  000251d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f23e  00000000  00000000  00025630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000594f  00000000  00000000  0003486e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b602  00000000  00000000  0003a1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000957bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011e4  00000000  00000000  00095810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000018 	.word	0x20000018
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800168c 	.word	0x0800168c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000001c 	.word	0x2000001c
 800020c:	0800168c 	.word	0x0800168c

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000214:	f000 f971 	bl	80004fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000218:	f000 f81a 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021c:	f000 f854 	bl	80002c8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  flashWrite(flashAddress, flashData);
 8000220:	4b08      	ldr	r3, [pc, #32]	; (8000244 <main+0x34>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a08      	ldr	r2, [pc, #32]	; (8000248 <main+0x38>)
 8000226:	6812      	ldr	r2, [r2, #0]
 8000228:	4611      	mov	r1, r2
 800022a:	4618      	mov	r0, r3
 800022c:	f000 f898 	bl	8000360 <flashWrite>
  dataRead = flashRead(flashAddress);
 8000230:	4b04      	ldr	r3, [pc, #16]	; (8000244 <main+0x34>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f8c9 	bl	80003cc <flashRead>
 800023a:	4603      	mov	r3, r0
 800023c:	4a03      	ldr	r2, [pc, #12]	; (800024c <main+0x3c>)
 800023e:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000240:	e7fe      	b.n	8000240 <main+0x30>
 8000242:	bf00      	nop
 8000244:	20000000 	.word	0x20000000
 8000248:	20000004 	.word	0x20000004
 800024c:	20000034 	.word	0x20000034

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b090      	sub	sp, #64	; 0x40
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	2228      	movs	r2, #40	; 0x28
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f001 fa0c 	bl	800167c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000272:	2302      	movs	r3, #2
 8000274:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000276:	2301      	movs	r3, #1
 8000278:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027a:	2310      	movs	r3, #16
 800027c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800027e:	2300      	movs	r3, #0
 8000280:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	4618      	mov	r0, r3
 8000288:	f000 fe1a 	bl	8000ec0 <HAL_RCC_OscConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000292:	f000 f8a8 	bl	80003e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	230f      	movs	r3, #15
 8000298:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800029a:	2300      	movs	r3, #0
 800029c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 f888 	bl	80013c4 <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ba:	f000 f894 	bl	80003e6 <Error_Handler>
  }
}
 80002be:	bf00      	nop
 80002c0:	3740      	adds	r7, #64	; 0x40
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b088      	sub	sp, #32
 80002cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ce:	f107 0310 	add.w	r3, r7, #16
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002dc:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <MX_GPIO_Init+0x90>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a1d      	ldr	r2, [pc, #116]	; (8000358 <MX_GPIO_Init+0x90>)
 80002e2:	f043 0310 	orr.w	r3, r3, #16
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <MX_GPIO_Init+0x90>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0310 	and.w	r3, r3, #16
 80002f0:	60fb      	str	r3, [r7, #12]
 80002f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f4:	4b18      	ldr	r3, [pc, #96]	; (8000358 <MX_GPIO_Init+0x90>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a17      	ldr	r2, [pc, #92]	; (8000358 <MX_GPIO_Init+0x90>)
 80002fa:	f043 0320 	orr.w	r3, r3, #32
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b15      	ldr	r3, [pc, #84]	; (8000358 <MX_GPIO_Init+0x90>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0320 	and.w	r3, r3, #32
 8000308:	60bb      	str	r3, [r7, #8]
 800030a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <MX_GPIO_Init+0x90>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a11      	ldr	r2, [pc, #68]	; (8000358 <MX_GPIO_Init+0x90>)
 8000312:	f043 0304 	orr.w	r3, r3, #4
 8000316:	6193      	str	r3, [r2, #24]
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_GPIO_Init+0x90>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f003 0304 	and.w	r3, r3, #4
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	f44f 7140 	mov.w	r1, #768	; 0x300
 800032a:	480c      	ldr	r0, [pc, #48]	; (800035c <MX_GPIO_Init+0x94>)
 800032c:	f000 fdb0 	bl	8000e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000330:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000336:	2301      	movs	r3, #1
 8000338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033a:	2300      	movs	r3, #0
 800033c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033e:	2302      	movs	r3, #2
 8000340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	4619      	mov	r1, r3
 8000348:	4804      	ldr	r0, [pc, #16]	; (800035c <MX_GPIO_Init+0x94>)
 800034a:	f000 fc1d 	bl	8000b88 <HAL_GPIO_Init>

}
 800034e:	bf00      	nop
 8000350:	3720      	adds	r7, #32
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000
 800035c:	40011000 	.word	0x40011000

08000360 <flashWrite>:

/* USER CODE BEGIN 4 */

uint32_t flashWrite(uint32_t flashAddress, uint32_t flashData)
{
 8000360:	b5b0      	push	{r4, r5, r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	6039      	str	r1, [r7, #0]
	static FLASH_EraseInitTypeDef eraseInitStruct;
	uint32_t pageError;
	//int sofar=0;

	HAL_FLASH_Unlock();
 800036a:	f000 fa73 	bl	8000854 <HAL_FLASH_Unlock>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_OPTVERR | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);
 800036e:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <flashWrite+0x64>)
 8000370:	f240 1235 	movw	r2, #309	; 0x135
 8000374:	60da      	str	r2, [r3, #12]

	eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000376:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <flashWrite+0x68>)
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
	eraseInitStruct.PageAddress = flashAddress;
 800037c:	4a12      	ldr	r2, [pc, #72]	; (80003c8 <flashWrite+0x68>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	6093      	str	r3, [r2, #8]
	eraseInitStruct.NbPages = 1; //sadece 127. page
 8000382:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <flashWrite+0x68>)
 8000384:	2201      	movs	r2, #1
 8000386:	60da      	str	r2, [r3, #12]

	if(HAL_FLASHEx_Erase(&eraseInitStruct, &pageError) != HAL_OK)
 8000388:	f107 030c 	add.w	r3, r7, #12
 800038c:	4619      	mov	r1, r3
 800038e:	480e      	ldr	r0, [pc, #56]	; (80003c8 <flashWrite+0x68>)
 8000390:	f000 fb52 	bl	8000a38 <HAL_FLASHEx_Erase>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d003      	beq.n	80003a2 <flashWrite+0x42>
	{
		return HAL_FLASH_GetError(); //Silme isleminde hata olduğunda geri dön
 800039a:	f000 fa91 	bl	80008c0 <HAL_FLASH_GetError>
 800039e:	4603      	mov	r3, r0
 80003a0:	e00c      	b.n	80003bc <flashWrite+0x5c>
	}

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress, flashData);
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	2200      	movs	r2, #0
 80003a6:	461c      	mov	r4, r3
 80003a8:	4615      	mov	r5, r2
 80003aa:	4622      	mov	r2, r4
 80003ac:	462b      	mov	r3, r5
 80003ae:	6879      	ldr	r1, [r7, #4]
 80003b0:	2002      	movs	r0, #2
 80003b2:	f000 f9df 	bl	8000774 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80003b6:	f000 fa73 	bl	80008a0 <HAL_FLASH_Lock>

	return 0;
 80003ba:	2300      	movs	r3, #0
}
 80003bc:	4618      	mov	r0, r3
 80003be:	3710      	adds	r7, #16
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bdb0      	pop	{r4, r5, r7, pc}
 80003c4:	40022000 	.word	0x40022000
 80003c8:	20000038 	.word	0x20000038

080003cc <flashRead>:

uint32_t flashRead(uint32_t flashAddress)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	uint32_t flashData;
	flashData = *(uint32_t*)flashAddress;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	60fb      	str	r3, [r7, #12]
	return flashData;
 80003da:	68fb      	ldr	r3, [r7, #12]
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3714      	adds	r7, #20
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bc80      	pop	{r7}
 80003e4:	4770      	bx	lr

080003e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ea:	b672      	cpsid	i
}
 80003ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ee:	e7fe      	b.n	80003ee <Error_Handler+0x8>

080003f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <HAL_MspInit+0x5c>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a14      	ldr	r2, [pc, #80]	; (800044c <HAL_MspInit+0x5c>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b12      	ldr	r3, [pc, #72]	; (800044c <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <HAL_MspInit+0x5c>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	4a0e      	ldr	r2, [pc, #56]	; (800044c <HAL_MspInit+0x5c>)
 8000414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000418:	61d3      	str	r3, [r2, #28]
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000426:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <HAL_MspInit+0x60>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	4a04      	ldr	r2, [pc, #16]	; (8000450 <HAL_MspInit+0x60>)
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000442:	bf00      	nop
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	40021000 	.word	0x40021000
 8000450:	40010000 	.word	0x40010000

08000454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000458:	e7fe      	b.n	8000458 <NMI_Handler+0x4>

0800045a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045e:	e7fe      	b.n	800045e <HardFault_Handler+0x4>

08000460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000464:	e7fe      	b.n	8000464 <MemManage_Handler+0x4>

08000466 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800046a:	e7fe      	b.n	800046a <BusFault_Handler+0x4>

0800046c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <UsageFault_Handler+0x4>

08000472 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000476:	bf00      	nop
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr

0800047e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr

0800048a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr

08000496 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800049a:	f000 f86b 	bl	8000574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr
	...

080004b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b0:	480c      	ldr	r0, [pc, #48]	; (80004e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004b2:	490d      	ldr	r1, [pc, #52]	; (80004e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004b4:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b8:	e002      	b.n	80004c0 <LoopCopyDataInit>

080004ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004be:	3304      	adds	r3, #4

080004c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c4:	d3f9      	bcc.n	80004ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c6:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004c8:	4c0a      	ldr	r4, [pc, #40]	; (80004f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004cc:	e001      	b.n	80004d2 <LoopFillZerobss>

080004ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d0:	3204      	adds	r2, #4

080004d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d4:	d3fb      	bcc.n	80004ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004d6:	f7ff ffe4 	bl	80004a2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004da:	f001 f8ab 	bl	8001634 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004de:	f7ff fe97 	bl	8000210 <main>
  bx lr
 80004e2:	4770      	bx	lr
  ldr r0, =_sdata
 80004e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80004ec:	080016dc 	.word	0x080016dc
  ldr r2, =_sbss
 80004f0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80004f4:	20000070 	.word	0x20000070

080004f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f8:	e7fe      	b.n	80004f8 <ADC1_IRQHandler>

080004fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fe:	2003      	movs	r0, #3
 8000500:	f000 f904 	bl	800070c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000504:	2000      	movs	r0, #0
 8000506:	f000 f805 	bl	8000514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050a:	f7ff ff71 	bl	80003f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800050e:	2300      	movs	r3, #0
}
 8000510:	4618      	mov	r0, r3
 8000512:	bd80      	pop	{r7, pc}

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <HAL_InitTick+0x54>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_InitTick+0x58>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	4619      	mov	r1, r3
 8000526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052a:	fbb3 f3f1 	udiv	r3, r3, r1
 800052e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000532:	4618      	mov	r0, r3
 8000534:	f000 f911 	bl	800075a <HAL_SYSTICK_Config>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800053e:	2301      	movs	r3, #1
 8000540:	e00e      	b.n	8000560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b0f      	cmp	r3, #15
 8000546:	d80a      	bhi.n	800055e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000548:	2200      	movs	r2, #0
 800054a:	6879      	ldr	r1, [r7, #4]
 800054c:	f04f 30ff 	mov.w	r0, #4294967295
 8000550:	f000 f8e7 	bl	8000722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000554:	4a06      	ldr	r2, [pc, #24]	; (8000570 <HAL_InitTick+0x5c>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800055a:	2300      	movs	r3, #0
 800055c:	e000      	b.n	8000560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800055e:	2301      	movs	r3, #1
}
 8000560:	4618      	mov	r0, r3
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000008 	.word	0x20000008
 800056c:	20000010 	.word	0x20000010
 8000570:	2000000c 	.word	0x2000000c

08000574 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <HAL_IncTick+0x1c>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	461a      	mov	r2, r3
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <HAL_IncTick+0x20>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4413      	add	r3, r2
 8000584:	4a03      	ldr	r2, [pc, #12]	; (8000594 <HAL_IncTick+0x20>)
 8000586:	6013      	str	r3, [r2, #0]
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	20000010 	.word	0x20000010
 8000594:	20000048 	.word	0x20000048

08000598 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  return uwTick;
 800059c:	4b02      	ldr	r3, [pc, #8]	; (80005a8 <HAL_GetTick+0x10>)
 800059e:	681b      	ldr	r3, [r3, #0]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr
 80005a8:	20000048 	.word	0x20000048

080005ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c8:	4013      	ands	r3, r2
 80005ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005de:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	60d3      	str	r3, [r2, #12]
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__NVIC_GetPriorityGrouping+0x18>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 0307 	and.w	r3, r3, #7
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	6039      	str	r1, [r7, #0]
 800061a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000620:	2b00      	cmp	r3, #0
 8000622:	db0a      	blt.n	800063a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	b2da      	uxtb	r2, r3
 8000628:	490c      	ldr	r1, [pc, #48]	; (800065c <__NVIC_SetPriority+0x4c>)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	0112      	lsls	r2, r2, #4
 8000630:	b2d2      	uxtb	r2, r2
 8000632:	440b      	add	r3, r1
 8000634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000638:	e00a      	b.n	8000650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4908      	ldr	r1, [pc, #32]	; (8000660 <__NVIC_SetPriority+0x50>)
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	f003 030f 	and.w	r3, r3, #15
 8000646:	3b04      	subs	r3, #4
 8000648:	0112      	lsls	r2, r2, #4
 800064a:	b2d2      	uxtb	r2, r2
 800064c:	440b      	add	r3, r1
 800064e:	761a      	strb	r2, [r3, #24]
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e000e100 	.word	0xe000e100
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000664:	b480      	push	{r7}
 8000666:	b089      	sub	sp, #36	; 0x24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f003 0307 	and.w	r3, r3, #7
 8000676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	f1c3 0307 	rsb	r3, r3, #7
 800067e:	2b04      	cmp	r3, #4
 8000680:	bf28      	it	cs
 8000682:	2304      	movcs	r3, #4
 8000684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	3304      	adds	r3, #4
 800068a:	2b06      	cmp	r3, #6
 800068c:	d902      	bls.n	8000694 <NVIC_EncodePriority+0x30>
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	3b03      	subs	r3, #3
 8000692:	e000      	b.n	8000696 <NVIC_EncodePriority+0x32>
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000698:	f04f 32ff 	mov.w	r2, #4294967295
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	fa02 f303 	lsl.w	r3, r2, r3
 80006a2:	43da      	mvns	r2, r3
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	401a      	ands	r2, r3
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ac:	f04f 31ff 	mov.w	r1, #4294967295
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	fa01 f303 	lsl.w	r3, r1, r3
 80006b6:	43d9      	mvns	r1, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006bc:	4313      	orrs	r3, r2
         );
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3724      	adds	r7, #36	; 0x24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006d8:	d301      	bcc.n	80006de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006da:	2301      	movs	r3, #1
 80006dc:	e00f      	b.n	80006fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <SysTick_Config+0x40>)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006e6:	210f      	movs	r1, #15
 80006e8:	f04f 30ff 	mov.w	r0, #4294967295
 80006ec:	f7ff ff90 	bl	8000610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <SysTick_Config+0x40>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006f6:	4b04      	ldr	r3, [pc, #16]	; (8000708 <SysTick_Config+0x40>)
 80006f8:	2207      	movs	r2, #7
 80006fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	e000e010 	.word	0xe000e010

0800070c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff ff49 	bl	80005ac <__NVIC_SetPriorityGrouping>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000722:	b580      	push	{r7, lr}
 8000724:	b086      	sub	sp, #24
 8000726:	af00      	add	r7, sp, #0
 8000728:	4603      	mov	r3, r0
 800072a:	60b9      	str	r1, [r7, #8]
 800072c:	607a      	str	r2, [r7, #4]
 800072e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000734:	f7ff ff5e 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 8000738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	68b9      	ldr	r1, [r7, #8]
 800073e:	6978      	ldr	r0, [r7, #20]
 8000740:	f7ff ff90 	bl	8000664 <NVIC_EncodePriority>
 8000744:	4602      	mov	r2, r0
 8000746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800074a:	4611      	mov	r1, r2
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff5f 	bl	8000610 <__NVIC_SetPriority>
}
 8000752:	bf00      	nop
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b082      	sub	sp, #8
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff ffb0 	bl	80006c8 <SysTick_Config>
 8000768:	4603      	mov	r3, r0
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000776:	b087      	sub	sp, #28
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800078e:	4b2f      	ldr	r3, [pc, #188]	; (800084c <HAL_FLASH_Program+0xd8>)
 8000790:	7e1b      	ldrb	r3, [r3, #24]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d101      	bne.n	800079a <HAL_FLASH_Program+0x26>
 8000796:	2302      	movs	r3, #2
 8000798:	e054      	b.n	8000844 <HAL_FLASH_Program+0xd0>
 800079a:	4b2c      	ldr	r3, [pc, #176]	; (800084c <HAL_FLASH_Program+0xd8>)
 800079c:	2201      	movs	r2, #1
 800079e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80007a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80007a4:	f000 f8b2 	bl	800090c <FLASH_WaitForLastOperation>
 80007a8:	4603      	mov	r3, r0
 80007aa:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80007ac:	7dfb      	ldrb	r3, [r7, #23]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d144      	bne.n	800083c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d102      	bne.n	80007be <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80007b8:	2301      	movs	r3, #1
 80007ba:	757b      	strb	r3, [r7, #21]
 80007bc:	e007      	b.n	80007ce <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d102      	bne.n	80007ca <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80007c4:	2302      	movs	r3, #2
 80007c6:	757b      	strb	r3, [r7, #21]
 80007c8:	e001      	b.n	80007ce <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80007ca:	2304      	movs	r3, #4
 80007cc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	75bb      	strb	r3, [r7, #22]
 80007d2:	e02d      	b.n	8000830 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80007d4:	7dbb      	ldrb	r3, [r7, #22]
 80007d6:	005a      	lsls	r2, r3, #1
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	eb02 0c03 	add.w	ip, r2, r3
 80007de:	7dbb      	ldrb	r3, [r7, #22]
 80007e0:	0119      	lsls	r1, r3, #4
 80007e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80007e6:	f1c1 0620 	rsb	r6, r1, #32
 80007ea:	f1a1 0020 	sub.w	r0, r1, #32
 80007ee:	fa22 f401 	lsr.w	r4, r2, r1
 80007f2:	fa03 f606 	lsl.w	r6, r3, r6
 80007f6:	4334      	orrs	r4, r6
 80007f8:	fa23 f000 	lsr.w	r0, r3, r0
 80007fc:	4304      	orrs	r4, r0
 80007fe:	fa23 f501 	lsr.w	r5, r3, r1
 8000802:	b2a3      	uxth	r3, r4
 8000804:	4619      	mov	r1, r3
 8000806:	4660      	mov	r0, ip
 8000808:	f000 f864 	bl	80008d4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800080c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000810:	f000 f87c 	bl	800090c <FLASH_WaitForLastOperation>
 8000814:	4603      	mov	r3, r0
 8000816:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000818:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <HAL_FLASH_Program+0xdc>)
 800081a:	691b      	ldr	r3, [r3, #16]
 800081c:	4a0c      	ldr	r2, [pc, #48]	; (8000850 <HAL_FLASH_Program+0xdc>)
 800081e:	f023 0301 	bic.w	r3, r3, #1
 8000822:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000824:	7dfb      	ldrb	r3, [r7, #23]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d107      	bne.n	800083a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800082a:	7dbb      	ldrb	r3, [r7, #22]
 800082c:	3301      	adds	r3, #1
 800082e:	75bb      	strb	r3, [r7, #22]
 8000830:	7dba      	ldrb	r2, [r7, #22]
 8000832:	7d7b      	ldrb	r3, [r7, #21]
 8000834:	429a      	cmp	r2, r3
 8000836:	d3cd      	bcc.n	80007d4 <HAL_FLASH_Program+0x60>
 8000838:	e000      	b.n	800083c <HAL_FLASH_Program+0xc8>
      {
        break;
 800083a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <HAL_FLASH_Program+0xd8>)
 800083e:	2200      	movs	r2, #0
 8000840:	761a      	strb	r2, [r3, #24]

  return status;
 8000842:	7dfb      	ldrb	r3, [r7, #23]
}
 8000844:	4618      	mov	r0, r3
 8000846:	371c      	adds	r7, #28
 8000848:	46bd      	mov	sp, r7
 800084a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800084c:	20000050 	.word	0x20000050
 8000850:	40022000 	.word	0x40022000

08000854 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800085a:	2300      	movs	r3, #0
 800085c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <HAL_FLASH_Unlock+0x40>)
 8000860:	691b      	ldr	r3, [r3, #16]
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	2b00      	cmp	r3, #0
 8000868:	d00d      	beq.n	8000886 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <HAL_FLASH_Unlock+0x40>)
 800086c:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <HAL_FLASH_Unlock+0x44>)
 800086e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <HAL_FLASH_Unlock+0x40>)
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <HAL_FLASH_Unlock+0x48>)
 8000874:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000876:	4b07      	ldr	r3, [pc, #28]	; (8000894 <HAL_FLASH_Unlock+0x40>)
 8000878:	691b      	ldr	r3, [r3, #16]
 800087a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000886:	79fb      	ldrb	r3, [r7, #7]
}
 8000888:	4618      	mov	r0, r3
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40022000 	.word	0x40022000
 8000898:	45670123 	.word	0x45670123
 800089c:	cdef89ab 	.word	0xcdef89ab

080008a0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <HAL_FLASH_Lock+0x1c>)
 80008a6:	691b      	ldr	r3, [r3, #16]
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <HAL_FLASH_Lock+0x1c>)
 80008aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ae:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40022000 	.word	0x40022000

080008c0 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80008c4:	4b02      	ldr	r3, [pc, #8]	; (80008d0 <HAL_FLASH_GetError+0x10>)
 80008c6:	69db      	ldr	r3, [r3, #28]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	20000050 	.word	0x20000050

080008d4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <FLASH_Program_HalfWord+0x30>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <FLASH_Program_HalfWord+0x34>)
 80008e8:	691b      	ldr	r3, [r3, #16]
 80008ea:	4a07      	ldr	r2, [pc, #28]	; (8000908 <FLASH_Program_HalfWord+0x34>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	887a      	ldrh	r2, [r7, #2]
 80008f6:	801a      	strh	r2, [r3, #0]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000050 	.word	0x20000050
 8000908:	40022000 	.word	0x40022000

0800090c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000914:	f7ff fe40 	bl	8000598 <HAL_GetTick>
 8000918:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800091a:	e010      	b.n	800093e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000922:	d00c      	beq.n	800093e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d007      	beq.n	800093a <FLASH_WaitForLastOperation+0x2e>
 800092a:	f7ff fe35 	bl	8000598 <HAL_GetTick>
 800092e:	4602      	mov	r2, r0
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	429a      	cmp	r2, r3
 8000938:	d201      	bcs.n	800093e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800093a:	2303      	movs	r3, #3
 800093c:	e025      	b.n	800098a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <FLASH_WaitForLastOperation+0x88>)
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	2b00      	cmp	r3, #0
 8000948:	d1e8      	bne.n	800091c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800094a:	4b12      	ldr	r3, [pc, #72]	; (8000994 <FLASH_WaitForLastOperation+0x88>)
 800094c:	68db      	ldr	r3, [r3, #12]
 800094e:	f003 0320 	and.w	r3, r3, #32
 8000952:	2b00      	cmp	r3, #0
 8000954:	d002      	beq.n	800095c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <FLASH_WaitForLastOperation+0x88>)
 8000958:	2220      	movs	r2, #32
 800095a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800095c:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <FLASH_WaitForLastOperation+0x88>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	f003 0310 	and.w	r3, r3, #16
 8000964:	2b00      	cmp	r3, #0
 8000966:	d10b      	bne.n	8000980 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <FLASH_WaitForLastOperation+0x88>)
 800096a:	69db      	ldr	r3, [r3, #28]
 800096c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000970:	2b00      	cmp	r3, #0
 8000972:	d105      	bne.n	8000980 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <FLASH_WaitForLastOperation+0x88>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800097c:	2b00      	cmp	r3, #0
 800097e:	d003      	beq.n	8000988 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000980:	f000 f80a 	bl	8000998 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000984:	2301      	movs	r3, #1
 8000986:	e000      	b.n	800098a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40022000 	.word	0x40022000

08000998 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80009a2:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <FLASH_SetErrorCode+0x98>)
 80009a4:	68db      	ldr	r3, [r3, #12]
 80009a6:	f003 0310 	and.w	r3, r3, #16
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d009      	beq.n	80009c2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <FLASH_SetErrorCode+0x9c>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f043 0302 	orr.w	r3, r3, #2
 80009b6:	4a1f      	ldr	r2, [pc, #124]	; (8000a34 <FLASH_SetErrorCode+0x9c>)
 80009b8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80009c2:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <FLASH_SetErrorCode+0x98>)
 80009c4:	68db      	ldr	r3, [r3, #12]
 80009c6:	f003 0304 	and.w	r3, r3, #4
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d009      	beq.n	80009e2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <FLASH_SetErrorCode+0x9c>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <FLASH_SetErrorCode+0x9c>)
 80009d8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <FLASH_SetErrorCode+0x98>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d00b      	beq.n	8000a06 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <FLASH_SetErrorCode+0x9c>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f043 0304 	orr.w	r3, r3, #4
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <FLASH_SetErrorCode+0x9c>)
 80009f8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <FLASH_SetErrorCode+0x98>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	4a0c      	ldr	r2, [pc, #48]	; (8000a30 <FLASH_SetErrorCode+0x98>)
 8000a00:	f023 0301 	bic.w	r3, r3, #1
 8000a04:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f240 1201 	movw	r2, #257	; 0x101
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d106      	bne.n	8000a1e <FLASH_SetErrorCode+0x86>
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <FLASH_SetErrorCode+0x98>)
 8000a12:	69db      	ldr	r3, [r3, #28]
 8000a14:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <FLASH_SetErrorCode+0x98>)
 8000a16:	f023 0301 	bic.w	r3, r3, #1
 8000a1a:	61d3      	str	r3, [r2, #28]
}  
 8000a1c:	e002      	b.n	8000a24 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000a1e:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <FLASH_SetErrorCode+0x98>)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	60d3      	str	r3, [r2, #12]
}  
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40022000 	.word	0x40022000
 8000a34:	20000050 	.word	0x20000050

08000a38 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000a4a:	4b2f      	ldr	r3, [pc, #188]	; (8000b08 <HAL_FLASHEx_Erase+0xd0>)
 8000a4c:	7e1b      	ldrb	r3, [r3, #24]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d101      	bne.n	8000a56 <HAL_FLASHEx_Erase+0x1e>
 8000a52:	2302      	movs	r3, #2
 8000a54:	e053      	b.n	8000afe <HAL_FLASHEx_Erase+0xc6>
 8000a56:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <HAL_FLASHEx_Erase+0xd0>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d116      	bne.n	8000a92 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000a64:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a68:	f7ff ff50 	bl	800090c <FLASH_WaitForLastOperation>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d141      	bne.n	8000af6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f000 f84c 	bl	8000b10 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000a78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a7c:	f7ff ff46 	bl	800090c <FLASH_WaitForLastOperation>
 8000a80:	4603      	mov	r3, r0
 8000a82:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000a84:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <HAL_FLASHEx_Erase+0xd4>)
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	4a20      	ldr	r2, [pc, #128]	; (8000b0c <HAL_FLASHEx_Erase+0xd4>)
 8000a8a:	f023 0304 	bic.w	r3, r3, #4
 8000a8e:	6113      	str	r3, [r2, #16]
 8000a90:	e031      	b.n	8000af6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000a92:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a96:	f7ff ff39 	bl	800090c <FLASH_WaitForLastOperation>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d12a      	bne.n	8000af6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	e019      	b.n	8000ae4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000ab0:	68b8      	ldr	r0, [r7, #8]
 8000ab2:	f000 f849 	bl	8000b48 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ab6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000aba:	f7ff ff27 	bl	800090c <FLASH_WaitForLastOperation>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_FLASHEx_Erase+0xd4>)
 8000ac4:	691b      	ldr	r3, [r3, #16]
 8000ac6:	4a11      	ldr	r2, [pc, #68]	; (8000b0c <HAL_FLASHEx_Erase+0xd4>)
 8000ac8:	f023 0302 	bic.w	r3, r3, #2
 8000acc:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d003      	beq.n	8000adc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	601a      	str	r2, [r3, #0]
            break;
 8000ada:	e00c      	b.n	8000af6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ae2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	029a      	lsls	r2, r3, #10
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8000af0:	68ba      	ldr	r2, [r7, #8]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d3dc      	bcc.n	8000ab0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <HAL_FLASHEx_Erase+0xd0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	761a      	strb	r2, [r3, #24]

  return status;
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000050 	.word	0x20000050
 8000b0c:	40022000 	.word	0x40022000

08000b10 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <FLASH_MassErase+0x30>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <FLASH_MassErase+0x34>)
 8000b20:	691b      	ldr	r3, [r3, #16]
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <FLASH_MassErase+0x34>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <FLASH_MassErase+0x34>)
 8000b2c:	691b      	ldr	r3, [r3, #16]
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <FLASH_MassErase+0x34>)
 8000b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b34:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	20000050 	.word	0x20000050
 8000b44:	40022000 	.word	0x40022000

08000b48 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <FLASH_PageErase+0x38>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <FLASH_PageErase+0x3c>)
 8000b58:	691b      	ldr	r3, [r3, #16]
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <FLASH_PageErase+0x3c>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <FLASH_PageErase+0x3c>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <FLASH_PageErase+0x3c>)
 8000b6a:	691b      	ldr	r3, [r3, #16]
 8000b6c:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <FLASH_PageErase+0x3c>)
 8000b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b72:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000050 	.word	0x20000050
 8000b84:	40022000 	.word	0x40022000

08000b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b08b      	sub	sp, #44	; 0x2c
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b9a:	e169      	b.n	8000e70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	69fa      	ldr	r2, [r7, #28]
 8000bac:	4013      	ands	r3, r2
 8000bae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	f040 8158 	bne.w	8000e6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	4a9a      	ldr	r2, [pc, #616]	; (8000e28 <HAL_GPIO_Init+0x2a0>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d05e      	beq.n	8000c82 <HAL_GPIO_Init+0xfa>
 8000bc4:	4a98      	ldr	r2, [pc, #608]	; (8000e28 <HAL_GPIO_Init+0x2a0>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d875      	bhi.n	8000cb6 <HAL_GPIO_Init+0x12e>
 8000bca:	4a98      	ldr	r2, [pc, #608]	; (8000e2c <HAL_GPIO_Init+0x2a4>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d058      	beq.n	8000c82 <HAL_GPIO_Init+0xfa>
 8000bd0:	4a96      	ldr	r2, [pc, #600]	; (8000e2c <HAL_GPIO_Init+0x2a4>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d86f      	bhi.n	8000cb6 <HAL_GPIO_Init+0x12e>
 8000bd6:	4a96      	ldr	r2, [pc, #600]	; (8000e30 <HAL_GPIO_Init+0x2a8>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d052      	beq.n	8000c82 <HAL_GPIO_Init+0xfa>
 8000bdc:	4a94      	ldr	r2, [pc, #592]	; (8000e30 <HAL_GPIO_Init+0x2a8>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d869      	bhi.n	8000cb6 <HAL_GPIO_Init+0x12e>
 8000be2:	4a94      	ldr	r2, [pc, #592]	; (8000e34 <HAL_GPIO_Init+0x2ac>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d04c      	beq.n	8000c82 <HAL_GPIO_Init+0xfa>
 8000be8:	4a92      	ldr	r2, [pc, #584]	; (8000e34 <HAL_GPIO_Init+0x2ac>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d863      	bhi.n	8000cb6 <HAL_GPIO_Init+0x12e>
 8000bee:	4a92      	ldr	r2, [pc, #584]	; (8000e38 <HAL_GPIO_Init+0x2b0>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d046      	beq.n	8000c82 <HAL_GPIO_Init+0xfa>
 8000bf4:	4a90      	ldr	r2, [pc, #576]	; (8000e38 <HAL_GPIO_Init+0x2b0>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d85d      	bhi.n	8000cb6 <HAL_GPIO_Init+0x12e>
 8000bfa:	2b12      	cmp	r3, #18
 8000bfc:	d82a      	bhi.n	8000c54 <HAL_GPIO_Init+0xcc>
 8000bfe:	2b12      	cmp	r3, #18
 8000c00:	d859      	bhi.n	8000cb6 <HAL_GPIO_Init+0x12e>
 8000c02:	a201      	add	r2, pc, #4	; (adr r2, 8000c08 <HAL_GPIO_Init+0x80>)
 8000c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c08:	08000c83 	.word	0x08000c83
 8000c0c:	08000c5d 	.word	0x08000c5d
 8000c10:	08000c6f 	.word	0x08000c6f
 8000c14:	08000cb1 	.word	0x08000cb1
 8000c18:	08000cb7 	.word	0x08000cb7
 8000c1c:	08000cb7 	.word	0x08000cb7
 8000c20:	08000cb7 	.word	0x08000cb7
 8000c24:	08000cb7 	.word	0x08000cb7
 8000c28:	08000cb7 	.word	0x08000cb7
 8000c2c:	08000cb7 	.word	0x08000cb7
 8000c30:	08000cb7 	.word	0x08000cb7
 8000c34:	08000cb7 	.word	0x08000cb7
 8000c38:	08000cb7 	.word	0x08000cb7
 8000c3c:	08000cb7 	.word	0x08000cb7
 8000c40:	08000cb7 	.word	0x08000cb7
 8000c44:	08000cb7 	.word	0x08000cb7
 8000c48:	08000cb7 	.word	0x08000cb7
 8000c4c:	08000c65 	.word	0x08000c65
 8000c50:	08000c79 	.word	0x08000c79
 8000c54:	4a79      	ldr	r2, [pc, #484]	; (8000e3c <HAL_GPIO_Init+0x2b4>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d013      	beq.n	8000c82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c5a:	e02c      	b.n	8000cb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	623b      	str	r3, [r7, #32]
          break;
 8000c62:	e029      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	623b      	str	r3, [r7, #32]
          break;
 8000c6c:	e024      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	3308      	adds	r3, #8
 8000c74:	623b      	str	r3, [r7, #32]
          break;
 8000c76:	e01f      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	330c      	adds	r3, #12
 8000c7e:	623b      	str	r3, [r7, #32]
          break;
 8000c80:	e01a      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d102      	bne.n	8000c90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	623b      	str	r3, [r7, #32]
          break;
 8000c8e:	e013      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d105      	bne.n	8000ca4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c98:	2308      	movs	r3, #8
 8000c9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	69fa      	ldr	r2, [r7, #28]
 8000ca0:	611a      	str	r2, [r3, #16]
          break;
 8000ca2:	e009      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca4:	2308      	movs	r3, #8
 8000ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	69fa      	ldr	r2, [r7, #28]
 8000cac:	615a      	str	r2, [r3, #20]
          break;
 8000cae:	e003      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
          break;
 8000cb4:	e000      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
          break;
 8000cb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	2bff      	cmp	r3, #255	; 0xff
 8000cbc:	d801      	bhi.n	8000cc2 <HAL_GPIO_Init+0x13a>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	e001      	b.n	8000cc6 <HAL_GPIO_Init+0x13e>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	2bff      	cmp	r3, #255	; 0xff
 8000ccc:	d802      	bhi.n	8000cd4 <HAL_GPIO_Init+0x14c>
 8000cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	e002      	b.n	8000cda <HAL_GPIO_Init+0x152>
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	3b08      	subs	r3, #8
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	210f      	movs	r1, #15
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	401a      	ands	r2, r3
 8000cec:	6a39      	ldr	r1, [r7, #32]
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d08:	4b4d      	ldr	r3, [pc, #308]	; (8000e40 <HAL_GPIO_Init+0x2b8>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a4c      	ldr	r2, [pc, #304]	; (8000e40 <HAL_GPIO_Init+0x2b8>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b4a      	ldr	r3, [pc, #296]	; (8000e40 <HAL_GPIO_Init+0x2b8>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d20:	4a48      	ldr	r2, [pc, #288]	; (8000e44 <HAL_GPIO_Init+0x2bc>)
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	089b      	lsrs	r3, r3, #2
 8000d26:	3302      	adds	r3, #2
 8000d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	220f      	movs	r2, #15
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	4013      	ands	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a40      	ldr	r2, [pc, #256]	; (8000e48 <HAL_GPIO_Init+0x2c0>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d013      	beq.n	8000d74 <HAL_GPIO_Init+0x1ec>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a3f      	ldr	r2, [pc, #252]	; (8000e4c <HAL_GPIO_Init+0x2c4>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d00d      	beq.n	8000d70 <HAL_GPIO_Init+0x1e8>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a3e      	ldr	r2, [pc, #248]	; (8000e50 <HAL_GPIO_Init+0x2c8>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d007      	beq.n	8000d6c <HAL_GPIO_Init+0x1e4>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a3d      	ldr	r2, [pc, #244]	; (8000e54 <HAL_GPIO_Init+0x2cc>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d101      	bne.n	8000d68 <HAL_GPIO_Init+0x1e0>
 8000d64:	2303      	movs	r3, #3
 8000d66:	e006      	b.n	8000d76 <HAL_GPIO_Init+0x1ee>
 8000d68:	2304      	movs	r3, #4
 8000d6a:	e004      	b.n	8000d76 <HAL_GPIO_Init+0x1ee>
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	e002      	b.n	8000d76 <HAL_GPIO_Init+0x1ee>
 8000d70:	2301      	movs	r3, #1
 8000d72:	e000      	b.n	8000d76 <HAL_GPIO_Init+0x1ee>
 8000d74:	2300      	movs	r3, #0
 8000d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d78:	f002 0203 	and.w	r2, r2, #3
 8000d7c:	0092      	lsls	r2, r2, #2
 8000d7e:	4093      	lsls	r3, r2
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d86:	492f      	ldr	r1, [pc, #188]	; (8000e44 <HAL_GPIO_Init+0x2bc>)
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d006      	beq.n	8000dae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000da0:	4b2d      	ldr	r3, [pc, #180]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	492c      	ldr	r1, [pc, #176]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	600b      	str	r3, [r1, #0]
 8000dac:	e006      	b.n	8000dbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dae:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	4928      	ldr	r1, [pc, #160]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000db8:	4013      	ands	r3, r2
 8000dba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d006      	beq.n	8000dd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dc8:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	4922      	ldr	r1, [pc, #136]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	604b      	str	r3, [r1, #4]
 8000dd4:	e006      	b.n	8000de4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dd6:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	491e      	ldr	r1, [pc, #120]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000de0:	4013      	ands	r3, r2
 8000de2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d006      	beq.n	8000dfe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000df0:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	4918      	ldr	r1, [pc, #96]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	608b      	str	r3, [r1, #8]
 8000dfc:	e006      	b.n	8000e0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	4914      	ldr	r1, [pc, #80]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000e08:	4013      	ands	r3, r2
 8000e0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d021      	beq.n	8000e5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	490e      	ldr	r1, [pc, #56]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	60cb      	str	r3, [r1, #12]
 8000e24:	e021      	b.n	8000e6a <HAL_GPIO_Init+0x2e2>
 8000e26:	bf00      	nop
 8000e28:	10320000 	.word	0x10320000
 8000e2c:	10310000 	.word	0x10310000
 8000e30:	10220000 	.word	0x10220000
 8000e34:	10210000 	.word	0x10210000
 8000e38:	10120000 	.word	0x10120000
 8000e3c:	10110000 	.word	0x10110000
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40010000 	.word	0x40010000
 8000e48:	40010800 	.word	0x40010800
 8000e4c:	40010c00 	.word	0x40010c00
 8000e50:	40011000 	.word	0x40011000
 8000e54:	40011400 	.word	0x40011400
 8000e58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_GPIO_Init+0x304>)
 8000e5e:	68da      	ldr	r2, [r3, #12]
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	4909      	ldr	r1, [pc, #36]	; (8000e8c <HAL_GPIO_Init+0x304>)
 8000e66:	4013      	ands	r3, r2
 8000e68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	fa22 f303 	lsr.w	r3, r2, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f47f ae8e 	bne.w	8000b9c <HAL_GPIO_Init+0x14>
  }
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	372c      	adds	r7, #44	; 0x2c
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	40010400 	.word	0x40010400

08000e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ea0:	787b      	ldrb	r3, [r7, #1]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eac:	e003      	b.n	8000eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eae:	887b      	ldrh	r3, [r7, #2]
 8000eb0:	041a      	lsls	r2, r3, #16
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	611a      	str	r2, [r3, #16]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e272      	b.n	80013b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f000 8087 	beq.w	8000fee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ee0:	4b92      	ldr	r3, [pc, #584]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 030c 	and.w	r3, r3, #12
 8000ee8:	2b04      	cmp	r3, #4
 8000eea:	d00c      	beq.n	8000f06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eec:	4b8f      	ldr	r3, [pc, #572]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 030c 	and.w	r3, r3, #12
 8000ef4:	2b08      	cmp	r3, #8
 8000ef6:	d112      	bne.n	8000f1e <HAL_RCC_OscConfig+0x5e>
 8000ef8:	4b8c      	ldr	r3, [pc, #560]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f04:	d10b      	bne.n	8000f1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f06:	4b89      	ldr	r3, [pc, #548]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d06c      	beq.n	8000fec <HAL_RCC_OscConfig+0x12c>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d168      	bne.n	8000fec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e24c      	b.n	80013b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f26:	d106      	bne.n	8000f36 <HAL_RCC_OscConfig+0x76>
 8000f28:	4b80      	ldr	r3, [pc, #512]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a7f      	ldr	r2, [pc, #508]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	e02e      	b.n	8000f94 <HAL_RCC_OscConfig+0xd4>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10c      	bne.n	8000f58 <HAL_RCC_OscConfig+0x98>
 8000f3e:	4b7b      	ldr	r3, [pc, #492]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a7a      	ldr	r2, [pc, #488]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	4b78      	ldr	r3, [pc, #480]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a77      	ldr	r2, [pc, #476]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	e01d      	b.n	8000f94 <HAL_RCC_OscConfig+0xd4>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f60:	d10c      	bne.n	8000f7c <HAL_RCC_OscConfig+0xbc>
 8000f62:	4b72      	ldr	r3, [pc, #456]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a71      	ldr	r2, [pc, #452]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	4b6f      	ldr	r3, [pc, #444]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a6e      	ldr	r2, [pc, #440]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e00b      	b.n	8000f94 <HAL_RCC_OscConfig+0xd4>
 8000f7c:	4b6b      	ldr	r3, [pc, #428]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a6a      	ldr	r2, [pc, #424]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	4b68      	ldr	r3, [pc, #416]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a67      	ldr	r2, [pc, #412]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d013      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fafc 	bl	8000598 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa4:	f7ff faf8 	bl	8000598 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b64      	cmp	r3, #100	; 0x64
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e200      	b.n	80013b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb6:	4b5d      	ldr	r3, [pc, #372]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f0      	beq.n	8000fa4 <HAL_RCC_OscConfig+0xe4>
 8000fc2:	e014      	b.n	8000fee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fae8 	bl	8000598 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fcc:	f7ff fae4 	bl	8000598 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b64      	cmp	r3, #100	; 0x64
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e1ec      	b.n	80013b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fde:	4b53      	ldr	r3, [pc, #332]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f0      	bne.n	8000fcc <HAL_RCC_OscConfig+0x10c>
 8000fea:	e000      	b.n	8000fee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d063      	beq.n	80010c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ffa:	4b4c      	ldr	r3, [pc, #304]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
 8001002:	2b00      	cmp	r3, #0
 8001004:	d00b      	beq.n	800101e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001006:	4b49      	ldr	r3, [pc, #292]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 030c 	and.w	r3, r3, #12
 800100e:	2b08      	cmp	r3, #8
 8001010:	d11c      	bne.n	800104c <HAL_RCC_OscConfig+0x18c>
 8001012:	4b46      	ldr	r3, [pc, #280]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d116      	bne.n	800104c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101e:	4b43      	ldr	r3, [pc, #268]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d005      	beq.n	8001036 <HAL_RCC_OscConfig+0x176>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	691b      	ldr	r3, [r3, #16]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d001      	beq.n	8001036 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e1c0      	b.n	80013b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001036:	4b3d      	ldr	r3, [pc, #244]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	4939      	ldr	r1, [pc, #228]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8001046:	4313      	orrs	r3, r2
 8001048:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104a:	e03a      	b.n	80010c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d020      	beq.n	8001096 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001054:	4b36      	ldr	r3, [pc, #216]	; (8001130 <HAL_RCC_OscConfig+0x270>)
 8001056:	2201      	movs	r2, #1
 8001058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105a:	f7ff fa9d 	bl	8000598 <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001060:	e008      	b.n	8001074 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001062:	f7ff fa99 	bl	8000598 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e1a1      	b.n	80013b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001074:	4b2d      	ldr	r3, [pc, #180]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f0      	beq.n	8001062 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001080:	4b2a      	ldr	r3, [pc, #168]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4927      	ldr	r1, [pc, #156]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8001090:	4313      	orrs	r3, r2
 8001092:	600b      	str	r3, [r1, #0]
 8001094:	e015      	b.n	80010c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001096:	4b26      	ldr	r3, [pc, #152]	; (8001130 <HAL_RCC_OscConfig+0x270>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff fa7c 	bl	8000598 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a4:	f7ff fa78 	bl	8000598 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e180      	b.n	80013b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b6:	4b1d      	ldr	r3, [pc, #116]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d03a      	beq.n	8001144 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d019      	beq.n	800110a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <HAL_RCC_OscConfig+0x274>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010dc:	f7ff fa5c 	bl	8000598 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e4:	f7ff fa58 	bl	8000598 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e160      	b.n	80013b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f0      	beq.n	80010e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001102:	2001      	movs	r0, #1
 8001104:	f000 fa78 	bl	80015f8 <RCC_Delay>
 8001108:	e01c      	b.n	8001144 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_RCC_OscConfig+0x274>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001110:	f7ff fa42 	bl	8000598 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001116:	e00f      	b.n	8001138 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001118:	f7ff fa3e 	bl	8000598 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d908      	bls.n	8001138 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e146      	b.n	80013b8 <HAL_RCC_OscConfig+0x4f8>
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000
 8001130:	42420000 	.word	0x42420000
 8001134:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001138:	4b92      	ldr	r3, [pc, #584]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1e9      	bne.n	8001118 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 80a6 	beq.w	800129e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001156:	4b8b      	ldr	r3, [pc, #556]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10d      	bne.n	800117e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	4b88      	ldr	r3, [pc, #544]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	4a87      	ldr	r2, [pc, #540]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	61d3      	str	r3, [r2, #28]
 800116e:	4b85      	ldr	r3, [pc, #532]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800117a:	2301      	movs	r3, #1
 800117c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117e:	4b82      	ldr	r3, [pc, #520]	; (8001388 <HAL_RCC_OscConfig+0x4c8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001186:	2b00      	cmp	r3, #0
 8001188:	d118      	bne.n	80011bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800118a:	4b7f      	ldr	r3, [pc, #508]	; (8001388 <HAL_RCC_OscConfig+0x4c8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a7e      	ldr	r2, [pc, #504]	; (8001388 <HAL_RCC_OscConfig+0x4c8>)
 8001190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001196:	f7ff f9ff 	bl	8000598 <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800119e:	f7ff f9fb 	bl	8000598 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b64      	cmp	r3, #100	; 0x64
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e103      	b.n	80013b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b0:	4b75      	ldr	r3, [pc, #468]	; (8001388 <HAL_RCC_OscConfig+0x4c8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0f0      	beq.n	800119e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d106      	bne.n	80011d2 <HAL_RCC_OscConfig+0x312>
 80011c4:	4b6f      	ldr	r3, [pc, #444]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	4a6e      	ldr	r2, [pc, #440]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6213      	str	r3, [r2, #32]
 80011d0:	e02d      	b.n	800122e <HAL_RCC_OscConfig+0x36e>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10c      	bne.n	80011f4 <HAL_RCC_OscConfig+0x334>
 80011da:	4b6a      	ldr	r3, [pc, #424]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	4a69      	ldr	r2, [pc, #420]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	f023 0301 	bic.w	r3, r3, #1
 80011e4:	6213      	str	r3, [r2, #32]
 80011e6:	4b67      	ldr	r3, [pc, #412]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	4a66      	ldr	r2, [pc, #408]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	f023 0304 	bic.w	r3, r3, #4
 80011f0:	6213      	str	r3, [r2, #32]
 80011f2:	e01c      	b.n	800122e <HAL_RCC_OscConfig+0x36e>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	2b05      	cmp	r3, #5
 80011fa:	d10c      	bne.n	8001216 <HAL_RCC_OscConfig+0x356>
 80011fc:	4b61      	ldr	r3, [pc, #388]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	4a60      	ldr	r2, [pc, #384]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 8001202:	f043 0304 	orr.w	r3, r3, #4
 8001206:	6213      	str	r3, [r2, #32]
 8001208:	4b5e      	ldr	r3, [pc, #376]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	4a5d      	ldr	r2, [pc, #372]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6213      	str	r3, [r2, #32]
 8001214:	e00b      	b.n	800122e <HAL_RCC_OscConfig+0x36e>
 8001216:	4b5b      	ldr	r3, [pc, #364]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 8001218:	6a1b      	ldr	r3, [r3, #32]
 800121a:	4a5a      	ldr	r2, [pc, #360]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 800121c:	f023 0301 	bic.w	r3, r3, #1
 8001220:	6213      	str	r3, [r2, #32]
 8001222:	4b58      	ldr	r3, [pc, #352]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 8001224:	6a1b      	ldr	r3, [r3, #32]
 8001226:	4a57      	ldr	r2, [pc, #348]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 8001228:	f023 0304 	bic.w	r3, r3, #4
 800122c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d015      	beq.n	8001262 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001236:	f7ff f9af 	bl	8000598 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800123c:	e00a      	b.n	8001254 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800123e:	f7ff f9ab 	bl	8000598 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	f241 3288 	movw	r2, #5000	; 0x1388
 800124c:	4293      	cmp	r3, r2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e0b1      	b.n	80013b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001254:	4b4b      	ldr	r3, [pc, #300]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0ee      	beq.n	800123e <HAL_RCC_OscConfig+0x37e>
 8001260:	e014      	b.n	800128c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001262:	f7ff f999 	bl	8000598 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001268:	e00a      	b.n	8001280 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800126a:	f7ff f995 	bl	8000598 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	f241 3288 	movw	r2, #5000	; 0x1388
 8001278:	4293      	cmp	r3, r2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e09b      	b.n	80013b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001280:	4b40      	ldr	r3, [pc, #256]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1ee      	bne.n	800126a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d105      	bne.n	800129e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001292:	4b3c      	ldr	r3, [pc, #240]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a3b      	ldr	r2, [pc, #236]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 8001298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800129c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 8087 	beq.w	80013b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012a8:	4b36      	ldr	r3, [pc, #216]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 030c 	and.w	r3, r3, #12
 80012b0:	2b08      	cmp	r3, #8
 80012b2:	d061      	beq.n	8001378 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d146      	bne.n	800134a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012bc:	4b33      	ldr	r3, [pc, #204]	; (800138c <HAL_RCC_OscConfig+0x4cc>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c2:	f7ff f969 	bl	8000598 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ca:	f7ff f965 	bl	8000598 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e06d      	b.n	80013b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012dc:	4b29      	ldr	r3, [pc, #164]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f0      	bne.n	80012ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f0:	d108      	bne.n	8001304 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012f2:	4b24      	ldr	r3, [pc, #144]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 80012f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f6:	f023 020f 	bic.w	r2, r3, #15
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	4921      	ldr	r1, [pc, #132]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 8001300:	4313      	orrs	r3, r2
 8001302:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001304:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a19      	ldr	r1, [r3, #32]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	430b      	orrs	r3, r1
 8001316:	491b      	ldr	r1, [pc, #108]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 8001318:	4313      	orrs	r3, r2
 800131a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <HAL_RCC_OscConfig+0x4cc>)
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001322:	f7ff f939 	bl	8000598 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800132a:	f7ff f935 	bl	8000598 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e03d      	b.n	80013b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f0      	beq.n	800132a <HAL_RCC_OscConfig+0x46a>
 8001348:	e035      	b.n	80013b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <HAL_RCC_OscConfig+0x4cc>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff f922 	bl	8000598 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001358:	f7ff f91e 	bl	8000598 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e026      	b.n	80013b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_RCC_OscConfig+0x4c4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x498>
 8001376:	e01e      	b.n	80013b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	69db      	ldr	r3, [r3, #28]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d107      	bne.n	8001390 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e019      	b.n	80013b8 <HAL_RCC_OscConfig+0x4f8>
 8001384:	40021000 	.word	0x40021000
 8001388:	40007000 	.word	0x40007000
 800138c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_RCC_OscConfig+0x500>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d106      	bne.n	80013b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d001      	beq.n	80013b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40021000 	.word	0x40021000

080013c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e0a0      	b.n	800151a <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d020      	beq.n	8001426 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013f0:	4b4c      	ldr	r3, [pc, #304]	; (8001524 <HAL_RCC_ClockConfig+0x160>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	4a4b      	ldr	r2, [pc, #300]	; (8001524 <HAL_RCC_ClockConfig+0x160>)
 80013f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0308 	and.w	r3, r3, #8
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001408:	4b46      	ldr	r3, [pc, #280]	; (8001524 <HAL_RCC_ClockConfig+0x160>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	4a45      	ldr	r2, [pc, #276]	; (8001524 <HAL_RCC_ClockConfig+0x160>)
 800140e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001412:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001414:	4b43      	ldr	r3, [pc, #268]	; (8001524 <HAL_RCC_ClockConfig+0x160>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4940      	ldr	r1, [pc, #256]	; (8001524 <HAL_RCC_ClockConfig+0x160>)
 8001422:	4313      	orrs	r3, r2
 8001424:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d040      	beq.n	80014b4 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d107      	bne.n	800144a <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143a:	4b3a      	ldr	r3, [pc, #232]	; (8001524 <HAL_RCC_ClockConfig+0x160>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d115      	bne.n	8001472 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e067      	b.n	800151a <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d107      	bne.n	8001462 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001452:	4b34      	ldr	r3, [pc, #208]	; (8001524 <HAL_RCC_ClockConfig+0x160>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d109      	bne.n	8001472 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e05b      	b.n	800151a <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001462:	4b30      	ldr	r3, [pc, #192]	; (8001524 <HAL_RCC_ClockConfig+0x160>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e053      	b.n	800151a <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001472:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <HAL_RCC_ClockConfig+0x160>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f023 0203 	bic.w	r2, r3, #3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	4929      	ldr	r1, [pc, #164]	; (8001524 <HAL_RCC_ClockConfig+0x160>)
 8001480:	4313      	orrs	r3, r2
 8001482:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001484:	f7ff f888 	bl	8000598 <HAL_GetTick>
 8001488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148a:	e00a      	b.n	80014a2 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800148c:	f7ff f884 	bl	8000598 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	f241 3288 	movw	r2, #5000	; 0x1388
 800149a:	4293      	cmp	r3, r2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e03b      	b.n	800151a <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <HAL_RCC_ClockConfig+0x160>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 020c 	and.w	r2, r3, #12
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d1eb      	bne.n	800148c <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d008      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <HAL_RCC_ClockConfig+0x160>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	4915      	ldr	r1, [pc, #84]	; (8001524 <HAL_RCC_ClockConfig+0x160>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d009      	beq.n	80014f2 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <HAL_RCC_ClockConfig+0x160>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	490d      	ldr	r1, [pc, #52]	; (8001524 <HAL_RCC_ClockConfig+0x160>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014f2:	f000 f81f 	bl	8001534 <HAL_RCC_GetSysClockFreq>
 80014f6:	4602      	mov	r2, r0
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_RCC_ClockConfig+0x160>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	4909      	ldr	r1, [pc, #36]	; (8001528 <HAL_RCC_ClockConfig+0x164>)
 8001504:	5ccb      	ldrb	r3, [r1, r3]
 8001506:	fa22 f303 	lsr.w	r3, r2, r3
 800150a:	4a08      	ldr	r2, [pc, #32]	; (800152c <HAL_RCC_ClockConfig+0x168>)
 800150c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <HAL_RCC_ClockConfig+0x16c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7fe fffe 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000
 8001528:	080016c4 	.word	0x080016c4
 800152c:	20000008 	.word	0x20000008
 8001530:	2000000c 	.word	0x2000000c

08001534 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001534:	b490      	push	{r4, r7}
 8001536:	b08e      	sub	sp, #56	; 0x38
 8001538:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800153a:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800153c:	f107 0414 	add.w	r4, r7, #20
 8001540:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001542:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8001546:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001548:	1d3c      	adds	r4, r7, #4
 800154a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800154c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
 8001558:	2300      	movs	r3, #0
 800155a:	637b      	str	r3, [r7, #52]	; 0x34
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001564:	4b21      	ldr	r3, [pc, #132]	; (80015ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156c:	f003 030c 	and.w	r3, r3, #12
 8001570:	2b04      	cmp	r3, #4
 8001572:	d002      	beq.n	800157a <HAL_RCC_GetSysClockFreq+0x46>
 8001574:	2b08      	cmp	r3, #8
 8001576:	d003      	beq.n	8001580 <HAL_RCC_GetSysClockFreq+0x4c>
 8001578:	e02a      	b.n	80015d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800157c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800157e:	e02a      	b.n	80015d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001582:	0c9b      	lsrs	r3, r3, #18
 8001584:	f003 030f 	and.w	r3, r3, #15
 8001588:	3338      	adds	r3, #56	; 0x38
 800158a:	443b      	add	r3, r7
 800158c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d011      	beq.n	80015c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	f003 030f 	and.w	r3, r3, #15
 80015a4:	3338      	adds	r3, #56	; 0x38
 80015a6:	443b      	add	r3, r7
 80015a8:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	4a0f      	ldr	r2, [pc, #60]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015b2:	fb03 f202 	mul.w	r2, r3, r2
 80015b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015bc:	637b      	str	r3, [r7, #52]	; 0x34
 80015be:	e004      	b.n	80015ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	4a0c      	ldr	r2, [pc, #48]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015c4:	fb02 f303 	mul.w	r3, r2, r3
 80015c8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 80015ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015ce:	e002      	b.n	80015d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3738      	adds	r7, #56	; 0x38
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc90      	pop	{r4, r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	080016a4 	.word	0x080016a4
 80015e8:	080016b4 	.word	0x080016b4
 80015ec:	40021000 	.word	0x40021000
 80015f0:	007a1200 	.word	0x007a1200
 80015f4:	003d0900 	.word	0x003d0900

080015f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <RCC_Delay+0x34>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <RCC_Delay+0x38>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	0a5b      	lsrs	r3, r3, #9
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	fb02 f303 	mul.w	r3, r2, r3
 8001612:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001614:	bf00      	nop
  }
  while (Delay --);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1e5a      	subs	r2, r3, #1
 800161a:	60fa      	str	r2, [r7, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1f9      	bne.n	8001614 <RCC_Delay+0x1c>
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	20000008 	.word	0x20000008
 8001630:	10624dd3 	.word	0x10624dd3

08001634 <__libc_init_array>:
 8001634:	b570      	push	{r4, r5, r6, lr}
 8001636:	2600      	movs	r6, #0
 8001638:	4d0c      	ldr	r5, [pc, #48]	; (800166c <__libc_init_array+0x38>)
 800163a:	4c0d      	ldr	r4, [pc, #52]	; (8001670 <__libc_init_array+0x3c>)
 800163c:	1b64      	subs	r4, r4, r5
 800163e:	10a4      	asrs	r4, r4, #2
 8001640:	42a6      	cmp	r6, r4
 8001642:	d109      	bne.n	8001658 <__libc_init_array+0x24>
 8001644:	f000 f822 	bl	800168c <_init>
 8001648:	2600      	movs	r6, #0
 800164a:	4d0a      	ldr	r5, [pc, #40]	; (8001674 <__libc_init_array+0x40>)
 800164c:	4c0a      	ldr	r4, [pc, #40]	; (8001678 <__libc_init_array+0x44>)
 800164e:	1b64      	subs	r4, r4, r5
 8001650:	10a4      	asrs	r4, r4, #2
 8001652:	42a6      	cmp	r6, r4
 8001654:	d105      	bne.n	8001662 <__libc_init_array+0x2e>
 8001656:	bd70      	pop	{r4, r5, r6, pc}
 8001658:	f855 3b04 	ldr.w	r3, [r5], #4
 800165c:	4798      	blx	r3
 800165e:	3601      	adds	r6, #1
 8001660:	e7ee      	b.n	8001640 <__libc_init_array+0xc>
 8001662:	f855 3b04 	ldr.w	r3, [r5], #4
 8001666:	4798      	blx	r3
 8001668:	3601      	adds	r6, #1
 800166a:	e7f2      	b.n	8001652 <__libc_init_array+0x1e>
 800166c:	080016d4 	.word	0x080016d4
 8001670:	080016d4 	.word	0x080016d4
 8001674:	080016d4 	.word	0x080016d4
 8001678:	080016d8 	.word	0x080016d8

0800167c <memset>:
 800167c:	4603      	mov	r3, r0
 800167e:	4402      	add	r2, r0
 8001680:	4293      	cmp	r3, r2
 8001682:	d100      	bne.n	8001686 <memset+0xa>
 8001684:	4770      	bx	lr
 8001686:	f803 1b01 	strb.w	r1, [r3], #1
 800168a:	e7f9      	b.n	8001680 <memset+0x4>

0800168c <_init>:
 800168c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800168e:	bf00      	nop
 8001690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001692:	bc08      	pop	{r3}
 8001694:	469e      	mov	lr, r3
 8001696:	4770      	bx	lr

08001698 <_fini>:
 8001698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800169a:	bf00      	nop
 800169c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800169e:	bc08      	pop	{r3}
 80016a0:	469e      	mov	lr, r3
 80016a2:	4770      	bx	lr
